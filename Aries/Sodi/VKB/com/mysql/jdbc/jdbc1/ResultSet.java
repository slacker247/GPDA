/*
 * MM JDBC Drivers for MySQL
 *
 * $Id: ResultSet.java,v 1.3 2002/05/15 03:16:55 mark_matthews Exp $
 *
 * Copyright (C) 1998 Mark Matthews <mmatthew@worldserver.com>
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 * 
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA  02111-1307, USA.
 *
 * See the COPYING file located in the top-level-directory of
 * the archive of this library for complete text of license.
 *
 * Some portions:
 *
 * Copyright (c) 1996 Bradley McLean / Jeffrey Medeiros
 * Modifications Copyright (c) 1996/1997 Martin Rode
 * Copyright (c) 1997 Peter T Mount
 */

/**
 * A ResultSet provides access to a table of data generated by executing a
 * Statement.  The table rows are retrieved in sequence.  Within a row its
 * column values can be accessed in any order.
 *
 * <P>A ResultSet maintains a cursor pointing to its current row of data.
 * Initially the cursor is positioned before the first row.  The 'next'
 * method moves the cursor to the next row.
 *
 * <P>The getXXX methods retrieve column values for the current row.  You can
 * retrieve values either using the index number of the column, or by using
 * the name of the column.  In general using the column index will be more
 * efficient.  Columns are numbered from 1.
 *
 * <P>For maximum portability, ResultSet columns within each row should be read
 * in left-to-right order and each column should be read only once.
 *
 *<P> For the getXXX methods, the JDBC driver attempts to convert the
 * underlying data to the specified Java type and returns a suitable Java
 * value.  See the JDBC specification for allowable mappings from SQL types
 * to Java types with the ResultSet getXXX methods.
 *
 * <P>Column names used as input to getXXX methods are case insenstive.  When
 * performing a getXXX using a column name, if several columns have the same
 * name, then the value of the first matching column will be returned.  The
 * column name option is designed to be used when column names are used in the
 * SQL Query.  For columns that are NOT explicitly named in the query, it is
 * best to use column numbers.  If column names were used there is no way for
 * the programmer to guarentee that they actually refer to the intended
 * columns.
 *
 * <P>A ResultSet is automatically closed by the Statement that generated it
 * when that Statement is closed, re-executed, or is used to retrieve the
 * next result from a sequence of multiple results.
 *
 * <P>The number, types and properties of a ResultSet's columns are provided by
 * the ResultSetMetaData object returned by the getMetaData method.
 *
 * @see ResultSetMetaData
 * @see java.sql.ResultSet
 * @author Mark Matthews <mmatthew@worldserver.com>
 * @version $Id: ResultSet.java,v 1.3 2002/05/15 03:16:55 mark_matthews Exp $
 */

package com.mysql.jdbc.jdbc1;

import java.io.*;
import java.math.*;
import java.text.*;
import java.util.*;
import java.sql.*;

public class ResultSet extends com.mysql.jdbc.ResultSet 
    implements java.sql.ResultSet
{
    /**
     * The numbers, types and properties of a ResultSet's columns are
     * provided by the getMetaData method
     *
     * @return a description of the ResultSet's columns
     * @exception java.sql.SQLException if a database access error occurs
     */
  
    public java.sql.ResultSetMetaData getMetaData() throws java.sql.SQLException
    {
	return new com.mysql.jdbc.jdbc1.ResultSetMetaData(_rows, _fields);
    }
  
    // ****************************************************************
    //
    //                       END OF PUBLIC INTERFACE
    //
    // ****************************************************************

    /**
     * Create a new ResultSet - Note that we create ResultSets to
     * represent the results of everything.
     *
     * @param fields an array of Field objects (basically, the
     *    ResultSet MetaData)
     * @param tuples Vector of the actual data
     * @param status the status string returned from the back end
     * @param updateCount the number of rows affected by the operation
     * @param cursor the positioned update/delete cursor name
     */

    public ResultSet(com.mysql.jdbc.Field[] Fields, Vector Tuples, com.mysql.jdbc.Connection Conn)
    {
	super(Fields, Tuples, Conn);
    }
	
    public ResultSet(com.mysql.jdbc.Field[] Fields, Vector Tuples)
    { 
	super(Fields, Tuples);
    }

    /**
     * Create a result set for an executeUpdate statement.
     *
     * @param updateCount the number of rows affected by the update
     */

    public ResultSet(long updateCount, long updateID)
    {
	super(updateCount, updateID);
    }

    public java.io.Reader getCharacterStream(int i)
    {return null;}
    
    public java.io.Reader getCharacterStream(String s)
    {return null;}
    
    public java.math.BigDecimal getBigDecimal(int i)
    {return null;}

    public java.math.BigDecimal getBigDecimal(String s)
    {return null;}
    
    public boolean isBeforeFirst()
    {return false;}
    
    public boolean isAfterLast()
    {return false;}
    
    public boolean isFirst()
    {return false;}
    
    public boolean isLast()
    {return false;}
    
    public void beforeFirst()
    {}
    
    public void afterLast()
    {}
    
    public boolean first()
    {return false;}
    
    public boolean last()
    {return false;}
    
    public int getRow()
    {return 0;}
    
    public boolean absolute(int i)
    {return false;}
    
    public boolean relative(int i)
    {return false;}
    
    public boolean previous()
    {return false;}
    
    public void setFetchDirection(int i)
    {}
    
    public int getFetchDirection()
    {return 0;}
    
    public void setFetchSize(int i)
    {}
    
    public int getFetchSize()
    {return 0;}
    
    public int getType()
    {return 0;}
    
    public int getConcurrency()
    {return 0;}
    
    public boolean rowUpdated()
    {return false;}
    
    public boolean rowInserted()
    {return false;}
    
    public boolean rowDeleted()
    {return false;}
    
    public void updateNull(int i)
    {}
    
    public void updateBoolean(int i, boolean b)
    {}
    
    public void updateByte(int i, byte b)
    {}
    
    public void updateShort(int i, short s)
    {}
    
    public void updateInt(int i, int x)
    {}
    
    public void updateLong(int i, long l)
    {}
    
    public void updateFloat(int i, float f)
    {}
    
    public void updateDouble(int i, double d)
    {}
    
    public void updateBigDecimal(int i, java.math.BigDecimal bd)
    {}
    
    public void updateString(int i, String s)
    {}
    
    public void updateBytes(int i, byte[] b)
    {}
    
    public void updateDate(int i, java.sql.Date d)
    {}
    
    public void updateTime(int i, java.sql.Time t)
    {}
    
    public void updateTimestamp(int i, java.sql.Timestamp t)
    {}
    
    public void updateAsciiStream(int i, java.io.InputStream s, int x)
    {}
    
    public void updateBinaryStream(int i, java.io.InputStream s, int x)
    {}
    
    public void updateCharaterSteam(int i, java.io.Reader r, int x)
    {}
    
    public void updateCharacterStream(int i, java.io.Reader r, int x)
    {}
    
    public void updateObject(int i, Object o, int x)
    {}
    
    public void updateObject(int i, Object o)
    {}
    
    public void updateNull(String s)
    {}
    
    public void updateBoolean(String s, boolean b)
    {}
    
    public void updateByte(String s, byte b)
    {}
    
    public void updateShort(String s, short st)
    {}
    
    public void updateInt(String s, int i)
    {}
    
    public void updateLong(String s, long l)
    {}
    
    public void updateFloat(String s, float f)
    {}
    
    public void updateDouble(String s, double d)
    {}
    
    public void updateBigDecimal(String s, java.math.BigDecimal bd)
    {}
    
    public void updateString(String s, String ss)
    {}
    
    public void updateBytes(String s, byte[] b)
    {}
    
    public void updateDate(String s, java.sql.Date d)
    {}
    
    public void updateTime(String s, java.sql.Time t)
    {}
    
    public void updateTimestamp(String s, java.sql.Timestamp t)
    {}
    
    public void updateAsciiStream(String s, java.io.InputStream is, int i)
    {}
    
    public void updateBinaryStream(String s, java.io.InputStream is, int i)
    {}
    
    public void updateCharacterStream(String s, java.io.Reader r, int i)
    {}
    
    public void updateObject(String s, Object o, int i)
    {}
    
    public void updateObject(String s, Object o)
    {}
    
    public void insertRow()
    {}
    
    public void updateRow()
    {}
    
    public void deleteRow()
    {}
    
    public void refreshRow()
    {}
    
    public void cancelRowUpdates()
    {}
    
    public void moveToInsertRow()
    {}
    
    public void moveToCurrentRow()
    {}
    
    public java.sql.Statement getStatement()
    {return null;}
    
    public Object getObject(int i, java.util.Map m)
    {return null;}
    
    public java.sql.Ref getRef(int i)
    {return null;}
    
    public java.sql.Blob getBlob(int i)
    {return null;}
    
    public java.sql.Clob getClob(int i)
    {return null;}
    
    public java.sql.Array getArray(int i)
    {return null;}
    
    public Object getObject(String s, java.util.Map m)
    {return null;}
    
    public java.sql.Ref getRef(String s)
    {return null;}
    
    public java.sql.Blob getBlob(String s)
    {return null;}
    
    public java.sql.Clob getClob(String s)
    {return null;}
    
    public java.sql.Array getArray(String s)
    {return null;}
    
    public java.sql.Date getDate(int i, java.util.Calendar c)
    {return null;}
    
    public java.sql.Date getDate(String s, java.util.Calendar c)
    {return null;}
    
    public java.sql.Time getTime(int i, java.util.Calendar c)
    {return null;}
    
    public java.sql.Time getTime(String s, java.util.Calendar c)
    {return null;}
    
    public java.sql.Timestamp getTimestamp(int i, java.util.Calendar c)
    {return null;}
    
    public java.sql.Timestamp getTimestamp(String s, java.util.Calendar c)
    {return null;}
    
    public java.net.URL getURL(int i)
    {return null;}
    
    public java.net.URL getURL(String s)
    {return null;}
    
    public void updateRef(int i, java.sql.Ref r)
    {}
    
    public void updateRef(String s, java.sql.Ref r)
    {}
    
    public void updateBlob(int i, java.sql.Blob b)
    {}

    public void updateBlob(String s, java.sql.Blob b)
    {}
    
    public void updateClob(int i, java.sql.Clob b)
    {}

    public void updateClob(String s, java.sql.Clob b)
    {}
    
    public void updateArray(int i, java.sql.Array b)
    {}

    public void updateArray(String s, java.sql.Array b)
    {}
};
