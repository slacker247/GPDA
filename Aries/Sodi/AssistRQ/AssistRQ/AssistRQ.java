/*
 * JFrame.java
 *
 * Created on August 12, 2002, 2:58 PM
 */

/**
 *
 * @author  Jeff McCartney
 *
 */
package AssistRQ;

//import
import javax.swing.*;
import javax.swing.tree.*;
import javax.swing.event.*;
import java.net.*;
import javax.swing.text.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.dnd.*;
import java.awt.datatransfer.*;
import java.io.*;
import java.io.Serializable;
import java.util.*;
import java.sql.*;

import gate.*;
import gate.creole.*;
import gate.util.*;
import gate.gui.*;
import gate.corpora.RepositioningInfo;

import DynTree.DynamicTree;
import SAA.StandAloneAnnie;
import SAA.StandAloneAnnie;

public class AssistRQ extends javax.swing.JFrame
{

    /** Debug variable. */
    public static boolean debug = false;//true;//

    /** Directory of the Mission files. */
    String WorkingDir = "/home/jeffmac";
    String MissionDir = "/AssistRQ/Mission/";
    String CurrentTxtFile = "";
    gate.Document g_GateDoc = null;
    StandAloneAnnie Saa = null;
    public String RulesWordlistDir = "Test";

    /** Root Node Name. */
    String RootNode = "Mission";
    String TaggedValuesFile = " ";
    /** Tree to generate. */
    DefaultMutableTreeNode dynamicTree;
    ConfigData Configuration = new ConfigData();

    /** Tree to allow modification.  */
    DynamicTree TaggedTreeModel = new DynamicTree("Gate Values");
    DynamicTree RQ_Slots_TreeModel = new DynamicTree("Reporter's Questions");
    
    gui.RQ_Form Form_RQ = new gui.RQ_Form();

    /** Creates new form JFrame */
    public AssistRQ() {
        initComponents();
        TaggedValuesTree.setModel(TaggedTreeModel.getTreeModel());
        RQ_Slots_Tree.setModel(RQ_Slots_TreeModel.getTreeModel());
        RQ_Slots_Tree.setEditable(true);
        RQ_Slots_Tree.setDropTarget(new DropTarget(RQ_Slots_Tree, new MyDropTargetLister()));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jDiagStatus = new javax.swing.JDialog();
        jLStatus = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jdNewNodeDiag = new javax.swing.JDialog();
        jTextField1 = new javax.swing.JTextField();
        OKBTN_NewNode = new javax.swing.JButton();
        CancelBTN_NewNode = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jFileChooser1 = new javax.swing.JFileChooser();
        ExportToDiag = new javax.swing.JDialog();
        Sodi1RadioBtn = new javax.swing.JRadioButton();
        Sodi2RadioBtn = new javax.swing.JRadioButton();
        ExportDiag_OkBtn = new javax.swing.JButton();
        ExportDiag_CancelBtn = new javax.swing.JButton();
        Sodi3RadioBtn = new javax.swing.JRadioButton();
        jDiagConfigHost = new javax.swing.JDialog();
        jTextField2 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        ConfigHost_OKBTN = new javax.swing.JButton();
        ConfigHost_CancelBTN = new javax.swing.JButton();
        jTextField_Port = new javax.swing.JTextField();
        jTextField_DBDriver = new javax.swing.JTextField();
        jTextField_DBAddress = new javax.swing.JTextField();
        jTextField_User = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jPasswordField_Password = new javax.swing.JPasswordField();
        jRadioBtnLocal = new javax.swing.JRadioButton();
        jRadioBtnDataBase = new javax.swing.JRadioButton();
        jDiag_RulesWordlist = new javax.swing.JDialog();
        jList_RulesWords = new javax.swing.JList();
        jLabel4 = new javax.swing.JLabel();
        LRW_OKBTN = new javax.swing.JButton();
        LRW_CancelBTN = new javax.swing.JButton();
        jDiag_RQ_Form = new javax.swing.JDialog();
        jL_Field2 = new javax.swing.JLabel();
        jL_Field3 = new javax.swing.JLabel();
        jL_Field4 = new javax.swing.JLabel();
        jL_Field5 = new javax.swing.JLabel();
        jL_Field6 = new javax.swing.JLabel();
        jL_Field7 = new javax.swing.JLabel();
        jL_Field8 = new javax.swing.JLabel();
        jL_Field9 = new javax.swing.JLabel();
        jL_Field10 = new javax.swing.JLabel();
        jL_Field11 = new javax.swing.JLabel();
        jL_Field12 = new javax.swing.JLabel();
        jL_Field13 = new javax.swing.JLabel();
        jL_Field14 = new javax.swing.JLabel();
        jL_Field15 = new javax.swing.JLabel();
        jL_Field16 = new javax.swing.JLabel();
        jL_Field17 = new javax.swing.JLabel();
        jL_Field18 = new javax.swing.JLabel();
        jL_Field19 = new javax.swing.JLabel();
        jL_Field20 = new javax.swing.JLabel();
        jL_Field21 = new javax.swing.JLabel();
        jL_Field22 = new javax.swing.JLabel();
        jL_Field23 = new javax.swing.JLabel();
        jL_Field24 = new javax.swing.JLabel();
        jL_Field25 = new javax.swing.JLabel();
        jL_Field26 = new javax.swing.JLabel();
        jL_Field27 = new javax.swing.JLabel();
        jL_Field28 = new javax.swing.JLabel();
        jL_Field29 = new javax.swing.JLabel();
        jL_Field30 = new javax.swing.JLabel();
        jL_Field31 = new javax.swing.JLabel();
        jL_Field32 = new javax.swing.JLabel();
        jL_Field33 = new javax.swing.JLabel();
        jL_Field34 = new javax.swing.JLabel();
        jL_Field35 = new javax.swing.JLabel();
        jL_Field36 = new javax.swing.JLabel();
        jL_Field37 = new javax.swing.JLabel();
        jL_Field38 = new javax.swing.JLabel();
        jL_Field39 = new javax.swing.JLabel();
        jL_Field40 = new javax.swing.JLabel();
        jL_Field41 = new javax.swing.JLabel();
        jL_Field42 = new javax.swing.JLabel();
        jL_Field43 = new javax.swing.JLabel();
        jL_Field44 = new javax.swing.JLabel();
        jL_Field45 = new javax.swing.JLabel();
        jL_Field46 = new javax.swing.JLabel();
        jL_Field47 = new javax.swing.JLabel();
        jL_Field48 = new javax.swing.JLabel();
        jL_Field49 = new javax.swing.JLabel();
        jL_Field50 = new javax.swing.JLabel();
        jL_Field51 = new javax.swing.JLabel();
        jL_Field52 = new javax.swing.JLabel();
        jT_Field2 = new javax.swing.JTextField();
        jT_Field3 = new javax.swing.JTextField();
        jT_Field4 = new javax.swing.JTextField();
        jT_Field5 = new javax.swing.JTextField();
        jT_Field6 = new javax.swing.JTextField();
        jT_Field7 = new javax.swing.JTextField();
        jT_Field8 = new javax.swing.JTextField();
        jT_Field9 = new javax.swing.JTextField();
        jT_Field10 = new javax.swing.JTextField();
        jT_Field11 = new javax.swing.JTextField();
        jT_Field12 = new javax.swing.JTextField();
        jT_Field13 = new javax.swing.JTextField();
        jT_Field14 = new javax.swing.JTextField();
        jT_Field15 = new javax.swing.JTextField();
        jT_Field16 = new javax.swing.JTextField();
        jT_Field17 = new javax.swing.JTextField();
        jT_Field18 = new javax.swing.JTextField();
        jT_Field19 = new javax.swing.JTextField();
        jT_Field20 = new javax.swing.JTextField();
        jT_Field21 = new javax.swing.JTextField();
        jT_Field22 = new javax.swing.JTextField();
        jT_Field23 = new javax.swing.JTextField();
        jT_Field24 = new javax.swing.JTextField();
        jT_Field25 = new javax.swing.JTextField();
        jT_Field26 = new javax.swing.JTextField();
        jT_Field27 = new javax.swing.JTextField();
        jT_Field28 = new javax.swing.JTextField();
        jT_Field29 = new javax.swing.JTextField();
        jT_Field30 = new javax.swing.JTextField();
        jT_Field31 = new javax.swing.JTextField();
        jT_Field32 = new javax.swing.JTextField();
        jT_Field33 = new javax.swing.JTextField();
        jT_Field34 = new javax.swing.JTextField();
        jT_Field35 = new javax.swing.JTextField();
        jT_Field36 = new javax.swing.JTextField();
        jT_Field37 = new javax.swing.JTextField();
        jT_Field38 = new javax.swing.JTextField();
        jT_Field39 = new javax.swing.JTextField();
        jT_Field40 = new javax.swing.JTextField();
        jT_Field41 = new javax.swing.JTextField();
        jT_Field42 = new javax.swing.JTextField();
        jT_Field43 = new javax.swing.JTextField();
        jT_Field44 = new javax.swing.JTextField();
        jT_Field45 = new javax.swing.JTextField();
        jT_Field46 = new javax.swing.JTextField();
        jT_Field47 = new javax.swing.JTextField();
        jT_Field48 = new javax.swing.JTextField();
        jT_Field49 = new javax.swing.JTextField();
        jT_Field50 = new javax.swing.JTextField();
        jT_Field51 = new javax.swing.JTextField();
        jT_Field52 = new javax.swing.JTextField();
        jL_Heading1 = new javax.swing.JLabel();
        jL_Heading2 = new javax.swing.JLabel();
        jL_Heading3 = new javax.swing.JLabel();
        jL_Heading4 = new javax.swing.JLabel();
        jL_Heading5 = new javax.swing.JLabel();
        jL_Heading6 = new javax.swing.JLabel();
        jL_Heading7 = new javax.swing.JLabel();
        jL_Field53 = new javax.swing.JLabel();
        jT_Field53 = new javax.swing.JTextField();
        jBTN_OK_RQ_Form = new javax.swing.JButton();
        jBTN_Cancel_RQ_Form = new javax.swing.JButton();
        jBTN_Sub_RQ_Form = new javax.swing.JButton();
        jBTN_Exit_RQ_Form = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator31 = new javax.swing.JSeparator();
        jSeparator32 = new javax.swing.JSeparator();
        jSeparator33 = new javax.swing.JSeparator();
        jSeparator34 = new javax.swing.JSeparator();
        jSeparator35 = new javax.swing.JSeparator();
        jSeparator36 = new javax.swing.JSeparator();
        jSeparator321 = new javax.swing.JSeparator();
        jSeparator322 = new javax.swing.JSeparator();
        jSeparator323 = new javax.swing.JSeparator();
        jSeparator324 = new javax.swing.JSeparator();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        TaggedValuesTree = new javax.swing.JTree();
        jScrollPane1 = new javax.swing.JScrollPane();
        OrgFileTxtBox = new javax.swing.JTextPane();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        RQ_Slots_Tree = new javax.swing.JTree();
        RemoveNodeBTN = new javax.swing.JButton();
        MoveToBTN = new javax.swing.JButton();
        NewNodeBTN = new javax.swing.JButton();
        MoveAllBTN = new javax.swing.JButton();
        RQ_FormBTN = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        MenuFile = new javax.swing.JMenu();
        File_Open = new javax.swing.JMenuItem();
        File_Save = new javax.swing.JMenuItem();
        File_ProcessTxt = new javax.swing.JMenuItem();
        File_Export = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        File_Exit = new javax.swing.JMenuItem();
        MenuMission = new javax.swing.JMenu();
        MenuEdit = new javax.swing.JMenu();
        Edit_ConfigHost = new javax.swing.JMenuItem();
        Edit_RulesWordLists = new javax.swing.JMenuItem();

        jDiagStatus.getContentPane().setLayout(null);

        jDiagStatus.setTitle("Status of Gate");
        jLStatus.setText("jLabel1");
        jLStatus.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jLStatusPropertyChange(evt);
            }
        });

        jDiagStatus.getContentPane().add(jLStatus);
        jLStatus.setBounds(20, 40, 220, 16);

        jDiagStatus.getContentPane().add(jProgressBar1);
        jProgressBar1.setBounds(18, 80, 230, 14);

        jdNewNodeDiag.getContentPane().setLayout(null);

        jdNewNodeDiag.setTitle("New Value");
        jdNewNodeDiag.getContentPane().add(jTextField1);
        jTextField1.setBounds(20, 40, 150, 20);

        OKBTN_NewNode.setText("OK");
        OKBTN_NewNode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OKBTN_NewNodeActionPerformed(evt);
            }
        });

        jdNewNodeDiag.getContentPane().add(OKBTN_NewNode);
        OKBTN_NewNode.setBounds(20, 70, 53, 26);

        CancelBTN_NewNode.setText("Cancel");
        CancelBTN_NewNode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelBTN_NewNodeActionPerformed(evt);
            }
        });

        jdNewNodeDiag.getContentPane().add(CancelBTN_NewNode);
        CancelBTN_NewNode.setBounds(90, 70, 80, 26);

        jLabel1.setText("Enter Value:");
        jdNewNodeDiag.getContentPane().add(jLabel1);
        jLabel1.setBounds(20, 20, 73, 16);

        ExportToDiag.getContentPane().setLayout(null);

        ExportToDiag.setName("Export To");
        Sodi1RadioBtn.setText("Local Host");
        ExportToDiag.getContentPane().add(Sodi1RadioBtn);
        Sodi1RadioBtn.setBounds(50, 30, 90, 24);

        Sodi2RadioBtn.setText("Remote Host");
        ExportToDiag.getContentPane().add(Sodi2RadioBtn);
        Sodi2RadioBtn.setBounds(50, 60, 105, 24);

        ExportDiag_OkBtn.setText("Ok");
        ExportDiag_OkBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExportDiag_OkBtnActionPerformed(evt);
            }
        });

        ExportToDiag.getContentPane().add(ExportDiag_OkBtn);
        ExportDiag_OkBtn.setBounds(20, 130, 52, 26);

        ExportDiag_CancelBtn.setText("Cancel");
        ExportDiag_CancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExportDiag_CancelBtnActionPerformed(evt);
            }
        });

        ExportToDiag.getContentPane().add(ExportDiag_CancelBtn);
        ExportDiag_CancelBtn.setBounds(100, 130, 75, 26);

        Sodi3RadioBtn.setText("DataBase");
        ExportToDiag.getContentPane().add(Sodi3RadioBtn);
        Sodi3RadioBtn.setBounds(50, 90, 114, 24);

        jDiagConfigHost.getContentPane().setLayout(null);

        jDiagConfigHost.setTitle("Configure Host");
        jDiagConfigHost.getContentPane().add(jTextField2);
        jTextField2.setBounds(30, 40, 190, 20);

        jLabel3.setText("IP Address or Computer Name:");
        jDiagConfigHost.getContentPane().add(jLabel3);
        jLabel3.setBounds(30, 20, 200, 16);

        ConfigHost_OKBTN.setText("OK");
        ConfigHost_OKBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConfigHost_OKBTNActionPerformed(evt);
            }
        });

        jDiagConfigHost.getContentPane().add(ConfigHost_OKBTN);
        ConfigHost_OKBTN.setBounds(140, 230, 70, 20);

        ConfigHost_CancelBTN.setText("Cancel");
        ConfigHost_CancelBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConfigHost_CancelBTNActionPerformed(evt);
            }
        });

        jDiagConfigHost.getContentPane().add(ConfigHost_CancelBTN);
        ConfigHost_CancelBTN.setBounds(290, 230, 75, 20);

        jDiagConfigHost.getContentPane().add(jTextField_Port);
        jTextField_Port.setBounds(30, 90, 70, 20);

        jDiagConfigHost.getContentPane().add(jTextField_DBDriver);
        jTextField_DBDriver.setBounds(310, 40, 140, 20);

        jDiagConfigHost.getContentPane().add(jTextField_DBAddress);
        jTextField_DBAddress.setBounds(310, 90, 140, 20);

        jDiagConfigHost.getContentPane().add(jTextField_User);
        jTextField_User.setBounds(310, 140, 140, 20);

        jLabel5.setText("Port:");
        jDiagConfigHost.getContentPane().add(jLabel5);
        jLabel5.setBounds(30, 70, 28, 16);

        jLabel7.setText("DataBase Driver:");
        jDiagConfigHost.getContentPane().add(jLabel7);
        jLabel7.setBounds(310, 20, 110, 16);

        jLabel8.setText("DataBase Address:");
        jDiagConfigHost.getContentPane().add(jLabel8);
        jLabel8.setBounds(310, 70, 120, 16);

        jLabel9.setText("User Name:");
        jDiagConfigHost.getContentPane().add(jLabel9);
        jLabel9.setBounds(310, 120, 70, 16);

        jLabel10.setText("Password:");
        jDiagConfigHost.getContentPane().add(jLabel10);
        jLabel10.setBounds(310, 170, 70, 16);

        jDiagConfigHost.getContentPane().add(jPasswordField_Password);
        jPasswordField_Password.setBounds(310, 190, 140, 20);

        jRadioBtnLocal.setText("Local Files");
        buttonGroup1.add(jRadioBtnLocal);
        jDiagConfigHost.getContentPane().add(jRadioBtnLocal);
        jRadioBtnLocal.setBounds(50, 310, 90, 24);

        jRadioBtnDataBase.setText("DataBase Files");
        buttonGroup1.add(jRadioBtnDataBase);
        jDiagConfigHost.getContentPane().add(jRadioBtnDataBase);
        jRadioBtnDataBase.setBounds(50, 340, 120, 24);

        jDiag_RulesWordlist.getContentPane().setLayout(null);

        jDiag_RulesWordlist.setTitle("Rules & WordLists");
        jDiag_RulesWordlist.getContentPane().add(jList_RulesWords);
        jList_RulesWords.setBounds(50, 30, 180, 230);

        jLabel4.setText("Select the Rules and wordlist group:");
        jDiag_RulesWordlist.getContentPane().add(jLabel4);
        jLabel4.setBounds(30, 10, 230, 20);

        LRW_OKBTN.setText("OK");
        LRW_OKBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LRW_OKBTNActionPerformed(evt);
            }
        });

        jDiag_RulesWordlist.getContentPane().add(LRW_OKBTN);
        LRW_OKBTN.setBounds(50, 280, 80, 26);

        LRW_CancelBTN.setText("Cancel");
        LRW_CancelBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LRW_CancelBTNActionPerformed(evt);
            }
        });

        jDiag_RulesWordlist.getContentPane().add(LRW_CancelBTN);
        LRW_CancelBTN.setBounds(150, 280, 80, 26);

        jDiag_RQ_Form.getContentPane().setLayout(null);

        jDiag_RQ_Form.setTitle("Reporter's Question's Form");
        jL_Field2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jL_Field2.setText("Case ID");
        jDiag_RQ_Form.getContentPane().add(jL_Field2);
        jL_Field2.setBounds(10, 20, 130, 16);

        jL_Field3.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jL_Field3.setText("Hypothesis");
        jDiag_RQ_Form.getContentPane().add(jL_Field3);
        jL_Field3.setBounds(10, 50, 130, 16);

        jL_Field4.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jL_Field4.setText("Belief");
        jDiag_RQ_Form.getContentPane().add(jL_Field4);
        jL_Field4.setBounds(10, 80, 130, 16);

        jL_Field5.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jL_Field5.setText("Disbelief");
        jDiag_RQ_Form.getContentPane().add(jL_Field5);
        jL_Field5.setBounds(10, 110, 130, 16);

        jL_Field6.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jL_Field6.setText("Report Org");
        jDiag_RQ_Form.getContentPane().add(jL_Field6);
        jL_Field6.setBounds(10, 180, 130, 16);

        jL_Field7.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jL_Field7.setText("Report Affil");
        jDiag_RQ_Form.getContentPane().add(jL_Field7);
        jL_Field7.setBounds(10, 210, 130, 16);

        jL_Field8.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jL_Field8.setText("Report Desc");
        jDiag_RQ_Form.getContentPane().add(jL_Field8);
        jL_Field8.setBounds(10, 240, 130, 16);

        jL_Field9.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jL_Field9.setText("Report Name");
        jDiag_RQ_Form.getContentPane().add(jL_Field9);
        jL_Field9.setBounds(10, 270, 130, 16);

        jL_Field10.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jL_Field10.setText("Enemy Org");
        jDiag_RQ_Form.getContentPane().add(jL_Field10);
        jL_Field10.setBounds(10, 300, 130, 16);

        jL_Field11.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jL_Field11.setText("Enemy Affil");
        jDiag_RQ_Form.getContentPane().add(jL_Field11);
        jL_Field11.setBounds(10, 330, 130, 16);

        jL_Field12.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jL_Field12.setText("Enemy Desc");
        jDiag_RQ_Form.getContentPane().add(jL_Field12);
        jL_Field12.setBounds(10, 360, 130, 16);

        jL_Field13.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jL_Field13.setText("Enemy Name");
        jDiag_RQ_Form.getContentPane().add(jL_Field13);
        jL_Field13.setBounds(10, 390, 130, 16);

        jL_Field14.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jL_Field14.setText("Ally Org");
        jDiag_RQ_Form.getContentPane().add(jL_Field14);
        jL_Field14.setBounds(10, 420, 130, 16);

        jL_Field15.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jL_Field15.setText("Ally Affil");
        jDiag_RQ_Form.getContentPane().add(jL_Field15);
        jL_Field15.setBounds(10, 450, 130, 16);

        jL_Field16.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jL_Field16.setText("Ally Desc");
        jDiag_RQ_Form.getContentPane().add(jL_Field16);
        jL_Field16.setBounds(10, 480, 130, 16);

        jL_Field17.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jL_Field17.setText("Ally Name");
        jDiag_RQ_Form.getContentPane().add(jL_Field17);
        jL_Field17.setBounds(10, 510, 130, 16);

        jL_Field18.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jL_Field18.setText("Party Org");
        jDiag_RQ_Form.getContentPane().add(jL_Field18);
        jL_Field18.setBounds(10, 580, 130, 16);

        jL_Field19.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jL_Field19.setText("Party Affil");
        jDiag_RQ_Form.getContentPane().add(jL_Field19);
        jL_Field19.setBounds(10, 610, 130, 16);

        jL_Field20.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jL_Field20.setText("Party Desc");
        jDiag_RQ_Form.getContentPane().add(jL_Field20);
        jL_Field20.setBounds(10, 640, 130, 16);

        jL_Field21.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jL_Field21.setText("Party Name");
        jDiag_RQ_Form.getContentPane().add(jL_Field21);
        jL_Field21.setBounds(10, 670, 130, 16);

        jL_Field22.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jL_Field22.setText("Region");
        jDiag_RQ_Form.getContentPane().add(jL_Field22);
        jL_Field22.setBounds(250, 40, 170, 16);

        jL_Field23.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jL_Field23.setText("Nation");
        jDiag_RQ_Form.getContentPane().add(jL_Field23);
        jL_Field23.setBounds(250, 70, 170, 16);

        jL_Field24.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jL_Field24.setText("Local");
        jDiag_RQ_Form.getContentPane().add(jL_Field24);
        jL_Field24.setBounds(250, 100, 170, 16);

        jL_Field25.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jL_Field25.setText("City");
        jDiag_RQ_Form.getContentPane().add(jL_Field25);
        jL_Field25.setBounds(250, 130, 170, 16);

        jL_Field26.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jL_Field26.setText("Structure");
        jDiag_RQ_Form.getContentPane().add(jL_Field26);
        jL_Field26.setBounds(250, 160, 170, 16);

        jL_Field27.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jL_Field27.setText("Latitude");
        jDiag_RQ_Form.getContentPane().add(jL_Field27);
        jL_Field27.setBounds(250, 190, 170, 16);

        jL_Field28.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jL_Field28.setText("Longitude");
        jDiag_RQ_Form.getContentPane().add(jL_Field28);
        jL_Field28.setBounds(250, 220, 170, 16);

        jL_Field29.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jL_Field29.setText("Altitude");
        jDiag_RQ_Form.getContentPane().add(jL_Field29);
        jL_Field29.setBounds(250, 250, 170, 16);

        jL_Field30.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jL_Field30.setText("Subject");
        jDiag_RQ_Form.getContentPane().add(jL_Field30);
        jL_Field30.setBounds(250, 340, 170, 16);

        jL_Field31.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jL_Field31.setText("Action");
        jDiag_RQ_Form.getContentPane().add(jL_Field31);
        jL_Field31.setBounds(250, 370, 170, 16);

        jL_Field32.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jL_Field32.setText("Objective");
        jDiag_RQ_Form.getContentPane().add(jL_Field32);
        jL_Field32.setBounds(250, 400, 170, 16);

        jL_Field33.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jL_Field33.setText("Strategic");
        jDiag_RQ_Form.getContentPane().add(jL_Field33);
        jL_Field33.setBounds(250, 480, 170, 16);

        jL_Field34.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jL_Field34.setText("Operation");
        jDiag_RQ_Form.getContentPane().add(jL_Field34);
        jL_Field34.setBounds(250, 510, 170, 16);

        jL_Field35.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jL_Field35.setText("Tactical");
        jDiag_RQ_Form.getContentPane().add(jL_Field35);
        jL_Field35.setBounds(250, 540, 170, 16);

        jL_Field36.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jL_Field36.setText("Task");
        jDiag_RQ_Form.getContentPane().add(jL_Field36);
        jL_Field36.setBounds(250, 570, 170, 16);

        jL_Field37.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jL_Field37.setText("Method");
        jDiag_RQ_Form.getContentPane().add(jL_Field37);
        jL_Field37.setBounds(530, 40, 140, 16);

        jL_Field38.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jL_Field38.setText("Desc 1");
        jDiag_RQ_Form.getContentPane().add(jL_Field38);
        jL_Field38.setBounds(530, 70, 140, 16);

        jL_Field39.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jL_Field39.setText("Desc 2");
        jDiag_RQ_Form.getContentPane().add(jL_Field39);
        jL_Field39.setBounds(530, 100, 140, 16);

        jL_Field40.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jL_Field40.setText("Desc 3");
        jDiag_RQ_Form.getContentPane().add(jL_Field40);
        jL_Field40.setBounds(530, 130, 140, 16);

        jL_Field41.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jL_Field41.setText("Casualties");
        jDiag_RQ_Form.getContentPane().add(jL_Field41);
        jL_Field41.setBounds(530, 160, 140, 16);

        jL_Field42.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jL_Field42.setText("Injuries");
        jDiag_RQ_Form.getContentPane().add(jL_Field42);
        jL_Field42.setBounds(530, 190, 140, 16);

        jL_Field43.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jL_Field43.setText("Cost");
        jDiag_RQ_Form.getContentPane().add(jL_Field43);
        jL_Field43.setBounds(530, 220, 140, 16);

        jL_Field44.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jL_Field44.setText("Adjective");
        jDiag_RQ_Form.getContentPane().add(jL_Field44);
        jL_Field44.setBounds(530, 250, 140, 16);

        jL_Field45.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jL_Field45.setText("Start Time");
        jDiag_RQ_Form.getContentPane().add(jL_Field45);
        jL_Field45.setBounds(530, 310, 140, 16);

        jL_Field46.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jL_Field46.setText("End Time");
        jDiag_RQ_Form.getContentPane().add(jL_Field46);
        jL_Field46.setBounds(530, 340, 140, 16);

        jL_Field47.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jL_Field47.setText("Duration");
        jDiag_RQ_Form.getContentPane().add(jL_Field47);
        jL_Field47.setBounds(530, 370, 140, 16);

        jL_Field48.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jL_Field48.setText("Time Frame");
        jDiag_RQ_Form.getContentPane().add(jL_Field48);
        jL_Field48.setBounds(530, 400, 140, 16);

        jL_Field49.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jL_Field49.setText("?");
        jDiag_RQ_Form.getContentPane().add(jL_Field49);
        jL_Field49.setBounds(530, 450, 140, 16);

        jL_Field50.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jL_Field50.setText("Info-ID");
        jDiag_RQ_Form.getContentPane().add(jL_Field50);
        jL_Field50.setBounds(530, 480, 140, 16);

        jL_Field51.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jL_Field51.setText("Prepared");
        jDiag_RQ_Form.getContentPane().add(jL_Field51);
        jL_Field51.setBounds(530, 510, 140, 16);

        jL_Field52.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jL_Field52.setText("Prep-Date");
        jDiag_RQ_Form.getContentPane().add(jL_Field52);
        jL_Field52.setBounds(530, 540, 140, 16);

        jDiag_RQ_Form.getContentPane().add(jT_Field2);
        jT_Field2.setBounds(150, 20, 90, 20);

        jDiag_RQ_Form.getContentPane().add(jT_Field3);
        jT_Field3.setBounds(150, 50, 90, 20);

        jDiag_RQ_Form.getContentPane().add(jT_Field4);
        jT_Field4.setBounds(150, 80, 90, 20);

        jDiag_RQ_Form.getContentPane().add(jT_Field5);
        jT_Field5.setBounds(150, 110, 90, 20);

        jDiag_RQ_Form.getContentPane().add(jT_Field6);
        jT_Field6.setBounds(150, 180, 90, 20);

        jDiag_RQ_Form.getContentPane().add(jT_Field7);
        jT_Field7.setBounds(150, 210, 90, 20);

        jDiag_RQ_Form.getContentPane().add(jT_Field8);
        jT_Field8.setBounds(150, 240, 90, 20);

        jDiag_RQ_Form.getContentPane().add(jT_Field9);
        jT_Field9.setBounds(150, 270, 90, 20);

        jDiag_RQ_Form.getContentPane().add(jT_Field10);
        jT_Field10.setBounds(150, 300, 90, 20);

        jDiag_RQ_Form.getContentPane().add(jT_Field11);
        jT_Field11.setBounds(150, 330, 90, 20);

        jDiag_RQ_Form.getContentPane().add(jT_Field12);
        jT_Field12.setBounds(150, 360, 90, 20);

        jDiag_RQ_Form.getContentPane().add(jT_Field13);
        jT_Field13.setBounds(150, 390, 90, 20);

        jDiag_RQ_Form.getContentPane().add(jT_Field14);
        jT_Field14.setBounds(150, 420, 90, 20);

        jDiag_RQ_Form.getContentPane().add(jT_Field15);
        jT_Field15.setBounds(150, 450, 90, 20);

        jDiag_RQ_Form.getContentPane().add(jT_Field16);
        jT_Field16.setBounds(150, 480, 90, 20);

        jDiag_RQ_Form.getContentPane().add(jT_Field17);
        jT_Field17.setBounds(150, 510, 90, 20);

        jDiag_RQ_Form.getContentPane().add(jT_Field18);
        jT_Field18.setBounds(150, 580, 90, 20);

        jDiag_RQ_Form.getContentPane().add(jT_Field19);
        jT_Field19.setBounds(150, 610, 90, 20);

        jDiag_RQ_Form.getContentPane().add(jT_Field20);
        jT_Field20.setBounds(150, 640, 90, 20);

        jDiag_RQ_Form.getContentPane().add(jT_Field21);
        jT_Field21.setBounds(150, 670, 90, 20);

        jDiag_RQ_Form.getContentPane().add(jT_Field22);
        jT_Field22.setBounds(430, 40, 90, 20);

        jDiag_RQ_Form.getContentPane().add(jT_Field23);
        jT_Field23.setBounds(430, 70, 90, 20);

        jDiag_RQ_Form.getContentPane().add(jT_Field24);
        jT_Field24.setBounds(430, 100, 90, 20);

        jDiag_RQ_Form.getContentPane().add(jT_Field25);
        jT_Field25.setBounds(430, 130, 90, 20);

        jDiag_RQ_Form.getContentPane().add(jT_Field26);
        jT_Field26.setBounds(430, 160, 90, 20);

        jDiag_RQ_Form.getContentPane().add(jT_Field27);
        jT_Field27.setBounds(430, 190, 90, 20);

        jDiag_RQ_Form.getContentPane().add(jT_Field28);
        jT_Field28.setBounds(430, 220, 90, 20);

        jDiag_RQ_Form.getContentPane().add(jT_Field29);
        jT_Field29.setBounds(430, 250, 90, 20);

        jT_Field30.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jT_Field30ActionPerformed(evt);
            }
        });

        jDiag_RQ_Form.getContentPane().add(jT_Field30);
        jT_Field30.setBounds(430, 340, 90, 20);

        jDiag_RQ_Form.getContentPane().add(jT_Field31);
        jT_Field31.setBounds(430, 370, 90, 20);

        jDiag_RQ_Form.getContentPane().add(jT_Field32);
        jT_Field32.setBounds(430, 400, 90, 20);

        jDiag_RQ_Form.getContentPane().add(jT_Field33);
        jT_Field33.setBounds(430, 480, 90, 20);

        jDiag_RQ_Form.getContentPane().add(jT_Field34);
        jT_Field34.setBounds(430, 510, 90, 20);

        jDiag_RQ_Form.getContentPane().add(jT_Field35);
        jT_Field35.setBounds(430, 540, 90, 20);

        jDiag_RQ_Form.getContentPane().add(jT_Field36);
        jT_Field36.setBounds(430, 570, 90, 20);

        jDiag_RQ_Form.getContentPane().add(jT_Field37);
        jT_Field37.setBounds(680, 40, 90, 20);

        jDiag_RQ_Form.getContentPane().add(jT_Field38);
        jT_Field38.setBounds(680, 70, 90, 20);

        jDiag_RQ_Form.getContentPane().add(jT_Field39);
        jT_Field39.setBounds(680, 100, 90, 20);

        jDiag_RQ_Form.getContentPane().add(jT_Field40);
        jT_Field40.setBounds(680, 130, 90, 20);

        jDiag_RQ_Form.getContentPane().add(jT_Field41);
        jT_Field41.setBounds(680, 160, 90, 20);

        jDiag_RQ_Form.getContentPane().add(jT_Field42);
        jT_Field42.setBounds(680, 190, 90, 20);

        jDiag_RQ_Form.getContentPane().add(jT_Field43);
        jT_Field43.setBounds(680, 220, 90, 20);

        jDiag_RQ_Form.getContentPane().add(jT_Field44);
        jT_Field44.setBounds(680, 250, 90, 20);

        jDiag_RQ_Form.getContentPane().add(jT_Field45);
        jT_Field45.setBounds(680, 310, 90, 20);

        jDiag_RQ_Form.getContentPane().add(jT_Field46);
        jT_Field46.setBounds(680, 340, 90, 20);

        jDiag_RQ_Form.getContentPane().add(jT_Field47);
        jT_Field47.setBounds(680, 370, 90, 20);

        jDiag_RQ_Form.getContentPane().add(jT_Field48);
        jT_Field48.setBounds(680, 400, 90, 20);

        jDiag_RQ_Form.getContentPane().add(jT_Field49);
        jT_Field49.setBounds(680, 450, 90, 20);

        jDiag_RQ_Form.getContentPane().add(jT_Field50);
        jT_Field50.setBounds(680, 480, 90, 20);

        jDiag_RQ_Form.getContentPane().add(jT_Field51);
        jT_Field51.setBounds(680, 510, 90, 20);

        jDiag_RQ_Form.getContentPane().add(jT_Field52);
        jT_Field52.setBounds(680, 540, 90, 20);

        jL_Heading1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jL_Heading1.setText("Who (People & Groups)");
        jDiag_RQ_Form.getContentPane().add(jL_Heading1);
        jL_Heading1.setBounds(60, 150, 170, 16);

        jL_Heading2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jL_Heading2.setText("3rd Party");
        jDiag_RQ_Form.getContentPane().add(jL_Heading2);
        jL_Heading2.setBounds(70, 560, 150, 16);

        jL_Heading3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jL_Heading3.setText("Where (Location)");
        jDiag_RQ_Form.getContentPane().add(jL_Heading3);
        jL_Heading3.setBounds(340, 20, 160, 16);

        jL_Heading4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jL_Heading4.setText("What (Activities & Events)");
        jDiag_RQ_Form.getContentPane().add(jL_Heading4);
        jL_Heading4.setBounds(340, 310, 170, 16);

        jL_Heading5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jL_Heading5.setText("Why (Goal/Intent/Purpose)");
        jDiag_RQ_Form.getContentPane().add(jL_Heading5);
        jL_Heading5.setBounds(340, 460, 170, 16);

        jL_Heading6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jL_Heading6.setText("How (Means & Methods)");
        jDiag_RQ_Form.getContentPane().add(jL_Heading6);
        jL_Heading6.setBounds(590, 20, 160, 16);

        jL_Heading7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jL_Heading7.setText("When (Time & Duration)");
        jDiag_RQ_Form.getContentPane().add(jL_Heading7);
        jL_Heading7.setBounds(590, 290, 170, 16);

        jL_Field53.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jL_Field53.setText("Source");
        jDiag_RQ_Form.getContentPane().add(jL_Field53);
        jL_Field53.setBounds(530, 570, 140, 16);

        jDiag_RQ_Form.getContentPane().add(jT_Field53);
        jT_Field53.setBounds(680, 570, 90, 20);

        jBTN_OK_RQ_Form.setText("OK");
        jBTN_OK_RQ_Form.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBTN_OK_RQ_FormActionPerformed(evt);
            }
        });

        jDiag_RQ_Form.getContentPane().add(jBTN_OK_RQ_Form);
        jBTN_OK_RQ_Form.setBounds(490, 640, 53, 26);

        jBTN_Cancel_RQ_Form.setText("Cancel");
        jBTN_Cancel_RQ_Form.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBTN_Cancel_RQ_FormActionPerformed(evt);
            }
        });

        jDiag_RQ_Form.getContentPane().add(jBTN_Cancel_RQ_Form);
        jBTN_Cancel_RQ_Form.setBounds(630, 640, 75, 26);

        jBTN_Sub_RQ_Form.setText("Submit");
        jBTN_Sub_RQ_Form.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBTN_Sub_RQ_FormActionPerformed(evt);
            }
        });

        jDiag_RQ_Form.getContentPane().add(jBTN_Sub_RQ_Form);
        jBTN_Sub_RQ_Form.setBounds(540, 640, 88, 26);

        jBTN_Exit_RQ_Form.setText("Exit");
        jBTN_Exit_RQ_Form.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBTN_Exit_RQ_FormActionPerformed(evt);
            }
        });

        jDiag_RQ_Form.getContentPane().add(jBTN_Exit_RQ_Form);
        jBTN_Exit_RQ_Form.setBounds(710, 640, 57, 26);

        jDiag_RQ_Form.getContentPane().add(jSeparator2);
        jSeparator2.setBounds(40, 540, 210, 10);

        jDiag_RQ_Form.getContentPane().add(jSeparator3);
        jSeparator3.setBounds(590, 600, 190, 10);

        jDiag_RQ_Form.getContentPane().add(jSeparator31);
        jSeparator31.setBounds(40, 140, 210, 10);

        jDiag_RQ_Form.getContentPane().add(jSeparator32);
        jSeparator32.setBounds(40, 700, 210, 10);

        jDiag_RQ_Form.getContentPane().add(jSeparator33);
        jSeparator33.setBounds(320, 440, 210, 10);

        jDiag_RQ_Form.getContentPane().add(jSeparator34);
        jSeparator34.setBounds(590, 430, 190, 10);

        jDiag_RQ_Form.getContentPane().add(jSeparator35);
        jSeparator35.setBounds(590, 280, 190, 10);

        jDiag_RQ_Form.getContentPane().add(jSeparator36);
        jSeparator36.setBounds(590, 10, 190, 10);

        jDiag_RQ_Form.getContentPane().add(jSeparator321);
        jSeparator321.setBounds(320, 290, 210, 10);

        jDiag_RQ_Form.getContentPane().add(jSeparator322);
        jSeparator322.setBounds(320, 10, 210, 10);

        jDiag_RQ_Form.getContentPane().add(jSeparator323);
        jSeparator323.setBounds(40, 10, 210, 10);

        jDiag_RQ_Form.getContentPane().add(jSeparator324);
        jSeparator324.setBounds(320, 600, 210, 10);

        getContentPane().setLayout(null);

        setTitle("Assisted Reporter's Questions");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        TaggedValuesTree.setDragEnabled(true);
        jScrollPane2.setViewportView(TaggedValuesTree);

        jTabbedPane1.addTab("Tagged Values", null, jScrollPane2, "");

        jScrollPane1.setViewportView(OrgFileTxtBox);

        jTabbedPane1.addTab("Original Text", jScrollPane1);

        getContentPane().add(jTabbedPane1);
        jTabbedPane1.setBounds(10, 10, 470, 680);

        jLabel2.setText("Reporter's Questions");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(650, 20, 140, 16);

        RQ_Slots_Tree.setDragEnabled(true);
        RQ_Slots_Tree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                RQ_Slots_TreeMouseReleased(evt);
            }
        });

        jScrollPane3.setViewportView(RQ_Slots_Tree);

        getContentPane().add(jScrollPane3);
        jScrollPane3.setBounds(650, 40, 200, 640);

        RemoveNodeBTN.setText("Remove Value");
        RemoveNodeBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveNodeBTNActionPerformed(evt);
            }
        });

        getContentPane().add(RemoveNodeBTN);
        RemoveNodeBTN.setBounds(500, 200, 130, 26);

        MoveToBTN.setText("Move   --->");
        MoveToBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoveToBTNActionPerformed(evt);
            }
        });

        getContentPane().add(MoveToBTN);
        MoveToBTN.setBounds(500, 120, 130, 26);

        NewNodeBTN.setText("New Value");
        NewNodeBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewNodeBTNActionPerformed(evt);
            }
        });

        getContentPane().add(NewNodeBTN);
        NewNodeBTN.setBounds(500, 160, 130, 26);

        MoveAllBTN.setText("Move All ->");
        MoveAllBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoveAllBTNActionPerformed(evt);
            }
        });

        getContentPane().add(MoveAllBTN);
        MoveAllBTN.setBounds(500, 80, 130, 26);

        RQ_FormBTN.setText("RQ Form");
        RQ_FormBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RQ_FormBTNActionPerformed(evt);
            }
        });

        getContentPane().add(RQ_FormBTN);
        RQ_FormBTN.setBounds(540, 270, 88, 26);

        MenuFile.setText("File");
        File_Open.setText("Open...");
        File_Open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                File_OpenActionPerformed(evt);
            }
        });

        MenuFile.add(File_Open);
        File_Save.setText("Save");
        File_Save.setEnabled(false);
        File_Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                File_SaveActionPerformed(evt);
            }
        });

        MenuFile.add(File_Save);
        File_ProcessTxt.setText("Process Text File...");
        File_ProcessTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                File_ProcessTxtActionPerformed(evt);
            }
        });

        MenuFile.add(File_ProcessTxt);
        File_Export.setText("Export R.Q.");
        File_Export.setEnabled(false);
        File_Export.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                File_ExportActionPerformed(evt);
            }
        });

        MenuFile.add(File_Export);
        MenuFile.add(jSeparator1);
        File_Exit.setText("Exit");
        File_Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                File_ExitActionPerformed(evt);
            }
        });

        MenuFile.add(File_Exit);
        jMenuBar1.add(MenuFile);
        MenuMission.setText("Mission");
        MenuMission.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuMissionActionPerformed(evt);
            }
        });

        MenuMission.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuSelected(javax.swing.event.MenuEvent evt) {
                MenuMissionMenuSelected(evt);
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }
        });

        jMenuBar1.add(MenuMission);
        MenuEdit.setText("Edit");
        MenuEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuEditActionPerformed(evt);
            }
        });

        Edit_ConfigHost.setText("Configuration");
        Edit_ConfigHost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Edit_ConfigHostActionPerformed(evt);
            }
        });

        MenuEdit.add(Edit_ConfigHost);
        Edit_RulesWordLists.setText("Rules & Wordlists...");
        Edit_RulesWordLists.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Edit_RulesWordListsActionPerformed(evt);
            }
        });

        MenuEdit.add(Edit_RulesWordLists);
        jMenuBar1.add(MenuEdit);
        setJMenuBar(jMenuBar1);

        pack();
    }//GEN-END:initComponents

    private void jBTN_Exit_RQ_FormActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBTN_Exit_RQ_FormActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jBTN_Exit_RQ_FormActionPerformed

    private void jBTN_Sub_RQ_FormActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBTN_Sub_RQ_FormActionPerformed
        fromRQ_Form();
        File_ExportActionPerformed(evt);
        Sodi1RadioBtn.setSelected(true);
        ExportDiag_OkBtnActionPerformed(evt);
        System.exit(0);
    }//GEN-LAST:event_jBTN_Sub_RQ_FormActionPerformed

    private void jBTN_Cancel_RQ_FormActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBTN_Cancel_RQ_FormActionPerformed
        Form_RQ.setVisible(false);
    }//GEN-LAST:event_jBTN_Cancel_RQ_FormActionPerformed

    private void jBTN_OK_RQ_FormActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBTN_OK_RQ_FormActionPerformed
        fromRQ_Form();
        Form_RQ.setVisible(false);
    }//GEN-LAST:event_jBTN_OK_RQ_FormActionPerformed

    private void jT_Field30ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jT_Field30ActionPerformed

    }//GEN-LAST:event_jT_Field30ActionPerformed

    private void RQ_FormBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RQ_FormBTNActionPerformed
        String DBUrl = Configuration.DB_Url + "//" + Configuration.Host + "/" + Configuration.Mission;
        ResultSet DBs = null;
        Connection Conn = null;
        Statement Stmt = null;
        int Count = 0;
        ButtonGroup group = new ButtonGroup();
        String [] Labels = new String[60];
        for(int i = 0; i < 60; i++)
        {
            Labels[i] = "   ";
        }
        
        toRQ_Form();
        try 
        {
            Class.forName(Configuration.DB_Driver).newInstance();
            Conn = DriverManager.getConnection(DBUrl, Configuration.User, Configuration.Password);
            Stmt = Conn.createStatement();
            if (debug) System.out.println("Established a connection with DB: " + DBUrl);
            DBs = Stmt.executeQuery("Select * from Labels;");
            DBs.next();
            
            for(; Count < 58; Count++)
            {
                Labels[Count] = DBs.getString(Count+1);
            }
            Form_RQ.setLabels(Labels);
            Form_RQ.show();
            
        }catch(Exception e)
        {
            e.printStackTrace();
        } finally 
        {
            if (Stmt != null) 
            {
                try 
                {
                    Stmt.close();
                } catch (SQLException SQLEx) 
                { /* ignore */
                }
            }
            if (Conn != null) 
            {
                try 
                {
                    Conn.close();
                } catch (SQLException SQLEx) 
                { /* ignore */
                }
            }
        }
        if(!BKRun)
        {
////            
//            jDiag_RQ_Form.setSize(900, 750);
//            jDiag_RQ_Form.show();
        }
    }//GEN-LAST:event_RQ_FormBTNActionPerformed

    private void MenuMissionMenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_MenuMissionMenuSelected
        // Add your handling code here:
    }//GEN-LAST:event_MenuMissionMenuSelected

    private void CBMenuMissionsActionPerformed(java.awt.event.ActionEvent evt) {
        if (debug) System.out.println(evt.getActionCommand());
        Configuration.Mission = evt.getActionCommand();
        SetMission(evt.getActionCommand());
    }
    private void MenuMissionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuMissionActionPerformed
        // Add your handling code here:
    }//GEN-LAST:event_MenuMissionActionPerformed

    private void LRW_CancelBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LRW_CancelBTNActionPerformed
        jDiag_RulesWordlist.hide();
    }//GEN-LAST:event_LRW_CancelBTNActionPerformed

    private void LRW_OKBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LRW_OKBTNActionPerformed
        RulesWordlistDir = jList_RulesWords.getSelectedValue().toString();
        if (debug) System.out.println("Rules & Wordlist directory: " + RulesWordlistDir);
        jDiag_RulesWordlist.hide();
    }//GEN-LAST:event_LRW_OKBTNActionPerformed

    private void Edit_RulesWordListsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Edit_RulesWordListsActionPerformed
        /* first load  the list of the directory names and put them into
         * a list box.  Then allow the user to select the one they want and
         * set that as the working dir for the template module.
         */
        String listData[] = new String[100];
        String sLine = "";
        int x = 0;
        FileInputStream fis = null;
        BufferedReader br = null;

        // check if file exists
        File f = new File(WorkingDir + "/AssistRQ/RulesWords.dir");
        if (f.exists())
        {
            try
            {
                if (debug) System.out.println("The file in .rq : ");
                fis = new FileInputStream(WorkingDir + "/AssistRQ/RulesWords.dir");
            }catch(IOException io_e)
            {
                System.out.print(" does not exist.");
            }
        }else
            return;

        br = new BufferedReader(new InputStreamReader(fis));
        if (debug) System.out.println("after br in export");

        //Extract the values in the slots and output to a file
        while(sLine != null)
        {
            try
            {
               sLine = br.readLine();
               if (debug) System.out.println("after readline in export");
            }catch(IOException io_e)
            {
                System.out.print(" does not exist.");
            }
            if(sLine == null)break;
            sLine = sLine.trim();
            if (debug) System.out.println("after node in export: " + sLine);
            listData[x] = sLine;
            x++;
        }//end of while
        jList_RulesWords.setListData(listData);
        jDiag_RulesWordlist.setSize(290, 350);
        jDiag_RulesWordlist.show();
    }//GEN-LAST:event_Edit_RulesWordListsActionPerformed

    private void File_SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_File_SaveActionPerformed
        //This asks whether or
        // not the data should be saved to disk.  If the data is to be saved
        // to disk then the data is saved to the filename of which the OrgFileName is.
        FileWriter m_Output = null;
        Object child, sd_child, th_child, fr_RootNode;
        DefaultTreeModel dtm = RQ_Slots_TreeModel.getTreeModel();
        String sRecord = "";
        if (debug) System.out.println("Writing this to file: " + sRecord);
        sRecord = "";

        //create or open the .tab file to write the RQ's to a file.
        int length = TaggedValuesFile.length();
        if (debug) System.out.println("before the for loop: " + TaggedValuesFile + "\n");
        TaggedValuesFile = TaggedValuesFile.substring(0, (length-5));

        /* Extracting the RQ_Tree to a file by
         * starting at the root node and working down to
         * each leaf.
         */
        fr_RootNode = dtm.getRoot();
        for (int x = 0; x < dtm.getChildCount(fr_RootNode); x++)
        {
            if (debug) System.out.println("Writing to file.");
            child = dtm.getChild(fr_RootNode, x);
            sRecord += "+ " + child.toString() + "\n";
            for (int y = 0; y < dtm.getChildCount(child); y++)
            {
                sd_child = dtm.getChild(child, y);
                sRecord += "> " + sd_child.toString() + "\n";
                for (int z = 0; z < dtm.getChildCount(sd_child); z++)
                {
                    th_child = dtm.getChild(sd_child, z);
                    sRecord += "^ " + th_child.toString() + "\n";
                }
            }
        }
        try
        {
            if (debug) System.out.println("The file out no . : " + TaggedValuesFile);
            m_Output = new FileWriter(TaggedValuesFile + ".tab", false);
            if (debug) System.out.println("The file out .tab : " + TaggedValuesFile);
            m_Output.write(sRecord);
            if (debug) System.out.println("Wrote this to file:" + sRecord);
            m_Output.close();
        }catch (IOException ioe)
        {
            Out.prln("IO error:" + ioe);
        }
    }//GEN-LAST:event_File_SaveActionPerformed

    private void jLStatusPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jLStatusPropertyChange
        if(debug) System.out.println("JLabel Changed.");
        if(jLStatus.getText() == "Done!")
            loadFiles(CurrentTxtFile);
    }//GEN-LAST:event_jLStatusPropertyChange

    private void RQ_Slots_TreeMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RQ_Slots_TreeMouseReleased
        // Add your handling code here:
    }//GEN-LAST:event_RQ_Slots_TreeMouseReleased

    private void MoveAllBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoveAllBTNActionPerformed
        Object parent, value = null, th_child, fr_RootNode, rq_Root, rq_child = null, rq_parent = null;
        DefaultTreeModel RQ_Tree = RQ_Slots_TreeModel.getTreeModel(),
            Tags_Tree = TaggedTreeModel.getTreeModel();
        fr_RootNode = Tags_Tree.getRoot();
        rq_Root = RQ_Tree.getRoot();
        for (int x = 0; x < Tags_Tree.getChildCount(fr_RootNode); x++)
        {
            if (debug) System.out.println("before set value of parent.");
            parent = Tags_Tree.getChild(fr_RootNode, x);
            for (int y = 0; y < Tags_Tree.getChildCount(parent); y++)
            {
                value = Tags_Tree.getChild(parent, y);
                if (debug) System.out.println("After set value.");
            }
            if(value != null)
            {
                int pos = -1;
                for(int q = 0; q < RQ_Tree.getChildCount(rq_Root); q++)
                {
                    rq_parent = RQ_Tree.getChild(rq_Root, q);
                    for(int r = 0; r < RQ_Tree.getChildCount(rq_parent); r++)
                    {
                        rq_child = RQ_Tree.getChild(rq_parent, r);
                        if(rq_child.toString().equalsIgnoreCase(parent.toString()))
                            parent = rq_child;
                    }
                    pos = RQ_Tree.getIndexOfChild(rq_parent, parent);
                    if (debug) System.out.println("rq_parent value:" + rq_parent.toString());
                    if(pos != -1) break;
                }
                if (debug) System.out.println("pos value:" + pos);
                if (debug) System.out.println("before setting value in RQ Tree." + parent + "|" + value.toString());
                RQ_Tree.insertNodeInto((MutableTreeNode)value, (MutableTreeNode)parent, 0);
                parent = value = null;
            }
        }
    }//GEN-LAST:event_MoveAllBTNActionPerformed

    private void Edit_ConfigHostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Edit_ConfigHostActionPerformed
        //Do data exchange.
        jTextField2.setText(Configuration.Host);
        jTextField_Port.setText(Configuration.Port);
        jTextField_DBAddress.setText(Configuration.DB_Url);
        jTextField_DBDriver.setText(Configuration.DB_Driver);
        jTextField_User.setText(Configuration.User);
        jPasswordField_Password.setText(Configuration.Password);
        jRadioBtnLocal.setSelected(Configuration.Local);
        jRadioBtnDataBase.setSelected(!Configuration.Local);
        jDiagConfigHost.setSize(540, 340);
        jDiagConfigHost.show();
    }//GEN-LAST:event_Edit_ConfigHostActionPerformed

    private void ConfigHost_CancelBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConfigHost_CancelBTNActionPerformed
        jDiagConfigHost.hide();
    }//GEN-LAST:event_ConfigHost_CancelBTNActionPerformed

    private void ConfigHost_OKBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConfigHost_OKBTNActionPerformed
        //Do data exchange.
        Configuration.Host = jTextField2.getText();
        Configuration.Port = jTextField_Port.getText();
        Configuration.DB_Url = jTextField_DBAddress.getText();
        Configuration.DB_Driver = jTextField_DBDriver.getText();
        Configuration.User = jTextField_User.getText();
        Configuration.Password = jPasswordField_Password.getText();
        Configuration.Local = jRadioBtnLocal.isSelected();
        try
        {
            writeConfigFile();
        }catch(IOException e)
        {
            e.printStackTrace();
        }
        jTextField2.grabFocus();
        jDiagConfigHost.hide();
    }//GEN-LAST:event_ConfigHost_OKBTNActionPerformed

    /** Outputs the configuration data that is located in the 
     * Configuration class
     */
    void writeConfigFile() throws IOException
    {
        FileWriter oOutStream = new FileWriter("Config.dat", false);
        if(Configuration != null)
        {
            oOutStream.write(Configuration.DB_Driver + "\n");
            oOutStream.write(Configuration.DB_Url + "\n");
            oOutStream.write(Configuration.Host + "\n");
            oOutStream.write(Configuration.Mission + "\n");
            Boolean tempb = new Boolean(Configuration.Local);
            oOutStream.write(tempb.toString() + "\n");
            if (debug) System.out.println(tempb.toString());
            String Pass = "";
            for(int i = 0; i < Configuration.Password.length(); i++)
            {
                Pass += (char)((Configuration.Password.toCharArray())[i] + '3');
            }
            oOutStream.write(Pass + "\n");
            oOutStream.write(Configuration.Port + "\n");
            oOutStream.write(Configuration.User + "\n");
        }
        oOutStream.flush();
        oOutStream.close();
    }

    /** Read in the Stored configuration data from the last session
     */
    void readConfigFile() throws Exception
    {
        FileInputStream iInStream = new FileInputStream("Config.dat");
        BufferedReader br = new BufferedReader(
                            new InputStreamReader(iInStream));
        if(Configuration != null)
        {
            Configuration.DB_Driver = br.readLine();
            Configuration.DB_Url = br.readLine();
            Configuration.Host = br.readLine();
            Configuration.Mission = br.readLine();
            Boolean tempb = new Boolean(br.readLine());
            if (debug) System.out.println(tempb.toString());
            Configuration.Local = tempb.booleanValue();
            String Pass = "";
            Configuration.Password = "";
            char Temp[] = br.readLine().toCharArray();
            for(int i = 0; i < Temp.length; i++)
            {
                Configuration.Password += (char)(Temp[i] - '3');
            }
            Configuration.Port = br.readLine();
            Configuration.User = br.readLine();
        }
        iInStream.close();
    }
    private void MenuEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuEditActionPerformed

    }//GEN-LAST:event_MenuEditActionPerformed

    private void ExportDiag_CancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExportDiag_CancelBtnActionPerformed
        ExportToDiag.hide();
    }//GEN-LAST:event_ExportDiag_CancelBtnActionPerformed

    private void ExportDiag_OkBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExportDiag_OkBtnActionPerformed
        //this preforms to things, the first is to save the file to a .tab then
        //to send the file to the port 8127 on 158.114.52.(140 or 130)
        FileWriter m_Output = null;
        DataOutputStream OutputURL = null;
        Object child, sd_child, th_child, fr_RootNode;
        DefaultTreeModel dtm = RQ_Slots_TreeModel.getTreeModel();
        String sLine = "", sRecord = "";
        FileInputStream fis = null;
        BufferedReader br = null;
        String RQ_Slots_File = WorkingDir + MissionDir + Configuration.Mission + ".rq";

        //create or open the .tab file to write the RQ's to a file.
        try
        {
            int length = TaggedValuesFile.length();
            if (debug) System.out.println("before the for loop: " + TaggedValuesFile + "\n");
            TaggedValuesFile = TaggedValuesFile.substring(0, (length-5));
            if (debug) System.out.println("The file out .tab : " + TaggedValuesFile);
            m_Output = new FileWriter(TaggedValuesFile + ".tab", false);
            if (debug) System.out.println("The file out .tab : " + TaggedValuesFile + ".tab");
        }catch (IOException ioe)
        {
            Out.prln("IO error:" + ioe);
        }

        // check if file exists
        File f = new File(RQ_Slots_File);
        if (debug) System.out.println("Before if File exists check of: " + RQ_Slots_File);
        if (f.exists())
        {
            if (debug) System.out.println("After if File exists check.");
            try
            {
                if (debug) System.out.println("The file in .rq : " + RQ_Slots_File);
                fis = new FileInputStream(RQ_Slots_File);
            }catch(IOException io_e)
            {
                System.out.print(RQ_Slots_File + " does not exist.");
            }
        }else
            return;

        br = new BufferedReader(new InputStreamReader(fis));
        if (debug) System.out.println("after br in export");
        if (debug) System.out.println("In ExportDiag, RQ_Slots_Tree: ");

        //Extract the values in the slots and output to a file
        while(sLine != null)
        {
            try
            {
               sLine = br.readLine();
               if (debug) System.out.println("after readline in export");
            }catch(IOException io_e)
            {
                System.out.print(RQ_Slots_File + " does not exist.");
            }
            if(sLine == null)break;
            char oldChar = ' ';
            if(sLine.charAt(0) == '-') oldChar = '-';
            if(sLine.charAt(0) == '>') oldChar = '>';
            if(sLine.charAt(0) == '+') continue;
            sLine = sLine.replace('_', ' ');
            sLine = sLine.replace(oldChar, ' ');
            sLine = sLine.trim();
            if (debug) System.out.println("after node in export: " + sLine);
            Object parent = findNode(sLine, (DefaultMutableTreeNode)dtm.getRoot());
            if (parent != null && dtm.getChildCount(parent) > 0)
            {
                child = dtm.getChild(parent, 0);

                sRecord += child.toString().replace('_', ' ').trim().replace(' ', '_');
                if(child.toString().length() == 1)
                {
                    sRecord += "? ";
                }else
                {
                    sRecord += " ";
                }
                if (debug) System.out.println("after findNode in export: " + child.toString());
            }
            else
            {
                sRecord += "? ";
                if (debug) System.out.println("after findNode in export: N/A (?)");
            }
        }//end of while

        /** Allows the user to select where the data will be exported to based
         * on the configuration class.
         */
        sRecord = sRecord.substring(0, (sRecord.length() - 2));
        sRecord += CurrentTxtFile + " \n";
        String byteStream = "";
        try
        {
            //This is the data(sRecord) to be sent with the appropriate format.
            byteStream = "Gate Sodi " + Configuration.Mission + " 2 " + sRecord.length() + " 0 " + sRecord;
            if (debug) System.out.println("Checking to see if selected.");

            /** This one sends the data to the test bed via message passing and
             * that the test bed is local
             */
            if(Sodi1RadioBtn.isSelected())
            {
                if (debug) System.out.println("Sending this to Local Host: " + sRecord);
                InetAddress host = null;
                host = host.getByName("localhost");
                if (debug) System.out.println("Sending to Local Host on port: " + Configuration.Port);
                int port = 8127;//Integer.getInteger(Configuration.Port).intValue();
                if (debug) System.out.println("Sending to Local Host on port: " + Configuration.Port + port);
                if (debug) System.out.println("DataGram before");
                DatagramSocket outSocket = new DatagramSocket();
                byte buf[] = byteStream.getBytes();
                DatagramPacket datagram = new DatagramPacket(buf, byteStream.length());
                datagram.setPort(port);
                datagram.setAddress(host);
                datagram.setLength(byteStream.length());
                outSocket.send(datagram);
                if (debug) System.out.println("Data sent to " + host.toString());
            }
            /** this one Sends the Data to the test bed via message passing and
             * that the test bed is located at the defined IP.
             */
            else if(Sodi2RadioBtn.isSelected())
            {
                if (debug) System.out.println("Sending this to Remote Host: " + sRecord);
                InetAddress host = null;
                host = host.getByName(Configuration.Host);
                int port = Integer.getInteger(Configuration.Port).intValue();
                if (debug) System.out.println("DataGram before");
                DatagramSocket outSocket = new DatagramSocket();
                byte buf[] = byteStream.getBytes();
                DatagramPacket datagram = new DatagramPacket(buf, byteStream.length());
                datagram.setPort(port);
                datagram.setAddress(host);
                datagram.setLength(byteStream.length());
                outSocket.send(datagram);
                if (debug) System.out.println("Data sent to " + host.toString());
            }
            /** This one sends the data to the defined data base in the configuration
             * class.
             */
            else if(Sodi3RadioBtn.isSelected())
            {
                String Record = "\'" + sRecord.trim() + "\'";
                boolean test = true;
                int index = 0;
                while(test)
                {
                    if(Record.charAt(index) == ' ')
                    {
                        Record = Record.substring(0, (index)) + "\',\'" + Record.substring(index + 1);
                    }
                    index++;
                    if(index == Record.length())
                    {
                        test = false;
                    }
                }
                if(debug) System.out.println("Sending this to DataBase: " + Record);
                String DBUrl = Configuration.DB_Url + "//" + Configuration.Host + "/" + Configuration.Mission;
                ResultSet DBs = null;
                Connection Conn = null;
                Statement Stmt = null;
//DB Connect
                try
                {
                    Class.forName(Configuration.DB_Driver).newInstance();
                    Conn = DriverManager.getConnection(DBUrl, Configuration.User, Configuration.Password);
                    Stmt = Conn.createStatement();
                    if(debug) System.out.println("Established a connection with DB: " + DBUrl);
                    DBs = Stmt.executeQuery("INSERT INTO Evidence VALUES (" + Record + ");");
                }catch(Exception e)
                {
                    e.printStackTrace();
                } finally 
                {
                    if (Stmt != null) 
                    {
                        try 
                        {
                            Stmt.close();
                        } catch (SQLException SQLEx)
                        { /* ignore */
                        }
                    }
                    if (Conn != null) 
                    {
                        try 
                        {
                            Conn.close();
                        } catch (SQLException SQLEx)
                        { /* ignore */
                        }
                    }
                }
            }
        }catch(IOException ioe)
        {
            System.out.println("IO error:" + ioe);
        }
        try
        {
            fis.close();
        }
        catch(IOException io_e)
        {
            System.out.print(RQ_Slots_File + " does not exist.");
        }
        ExportToDiag.hide();
    }//GEN-LAST:event_ExportDiag_OkBtnActionPerformed

    private void File_ExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_File_ExportActionPerformed
        if (debug) System.out.println("in file export.");
        ExportToDiag.setTitle("Export To");
        ExportToDiag.setSize(200, 200);
        ButtonGroup group = new ButtonGroup();
        group.add(Sodi1RadioBtn);
        group.add(Sodi2RadioBtn);
        group.add(Sodi3RadioBtn);
        ExportToDiag.show();
    }//GEN-LAST:event_File_ExportActionPerformed

    private void OKBTN_NewNodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OKBTN_NewNodeActionPerformed
        String NodeName = jTextField1.getText();
        TreePath RQ_Slots_Selection = RQ_Slots_Tree.getSelectionPath();
        if (debug) System.out.println("The path of the RQ : " + RQ_Slots_Selection.toString());
        if(RQ_Slots_Selection.getPathCount() == 3)
            RQ_Slots_TreeModel.addObject(NodeName, RQ_Slots_Selection);
        jTextField1.setText("");
        jTextField1.grabFocus();
        jdNewNodeDiag.hide();
    }//GEN-LAST:event_OKBTN_NewNodeActionPerformed

    private void CancelBTN_NewNodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelBTN_NewNodeActionPerformed
        jdNewNodeDiag.hide();
    }//GEN-LAST:event_CancelBTN_NewNodeActionPerformed

    private void File_ProcessTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_File_ProcessTxtActionPerformed
        if (debug) System.out.println(evt.toString());
        jLStatus.setText("Ready");
        jDiagStatus.setSize(300, 200);
        File_Save.setEnabled(true);
        File_Export.setEnabled(true);
        CurrentTxtFile = "";

/////////////////////////////////////////////////////////////////////////////
        final JFileChooser fileOpen = new JFileChooser();
        fileOpen.setCurrentDirectory(new File(WorkingDir + "/AssistRQ/SampleTexts"));
        if (debug) System.out.println("In File Open, WorkingDir:" + WorkingDir);
        fileOpen.setDialogTitle("Get Tagged File");
        int ReturnVal = fileOpen.showOpenDialog(this);
        if(ReturnVal == fileOpen.CANCEL_OPTION) return;
        CurrentTxtFile = fileOpen.getSelectedFile().toString();
        if (debug) System.out.println("In File Open, TaggedValuesFile:" + TaggedValuesFile);
/////////////////////////////////////////////////////////////////////////////

        Saa = new StandAloneAnnie("file:" + CurrentTxtFile);
        try
        {
            // initialize the GATE library
            jLStatus.setText("initializing GATE...");
            gate.Gate.init();
            jLStatus.setText("...GATE initialized");
            pThread StartGate = new pThread("file:" + CurrentTxtFile);
            StartGate.start();
            if(BKRun)
            {
                if (debug) System.out.println("Launching Gate thread.");
                //Center the window
                Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
                Dimension frameSize = jDiagStatus.getSize();
                if (frameSize.height > screenSize.height) {
                  frameSize.height = screenSize.height;
                }
                if (frameSize.width > screenSize.width) {
                  frameSize.width = screenSize.width;
                }
                jDiagStatus.setLocation((screenSize.width - frameSize.width) / 2, (screenSize.height - frameSize.height) / 2);
                jDiagStatus.show();
                while(StartGate.isAlive()){}
                if (debug) System.out.println("Killing Gate thread.");
            }
        }
        catch(Exception e)
        {
            System.out.print("Error in processing text.");
        }
        if(!BKRun)
        {
            jDiagStatus.show();
        }
    }//GEN-LAST:event_File_ProcessTxtActionPerformed

    private void NewNodeBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewNodeBTNActionPerformed
        TreePath RQ_Slots_Selection = RQ_Slots_Tree.getSelectionPath();
        if (RQ_Slots_Selection == null) 
        {
            return;
        }
        //Center the window
        jdNewNodeDiag.setSize(200, 140);
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension frameSize = jdNewNodeDiag.getSize();
        if (frameSize.height > screenSize.height) {
          frameSize.height = screenSize.height;
        }
        if (frameSize.width > screenSize.width) {
          frameSize.width = screenSize.width;
        }
        jdNewNodeDiag.setLocation((screenSize.width - frameSize.width) / 2, (screenSize.height - frameSize.height) / 2);
        jdNewNodeDiag.show();

    }//GEN-LAST:event_NewNodeBTNActionPerformed

    private void MoveToBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoveToBTNActionPerformed
        TreePath TaggedSelection = TaggedValuesTree.getSelectionPath();
        TreePath RQ_Slots_Selection = RQ_Slots_Tree.getSelectionPath();
        if (RQ_Slots_Selection == null || TaggedSelection == null) {
            return;
        }
        if (debug) System.out.println("The path of the RQ : " + RQ_Slots_Selection.toString());
        if(RQ_Slots_Selection.getPathCount() == 3 && TaggedSelection.getPathCount() == 3)
            RQ_Slots_TreeModel.addObject(TaggedSelection.getLastPathComponent(), RQ_Slots_Selection);
    }//GEN-LAST:event_MoveToBTNActionPerformed

    private void RemoveNodeBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveNodeBTNActionPerformed
        TreePath RQ_Slots_Selection = RQ_Slots_Tree.getSelectionPath();
        if (debug) System.out.println("The selected Path is: " + RQ_Slots_Selection.toString());
        if (RQ_Slots_Selection != null && RQ_Slots_Selection.getPathCount() > 3)
        {
            DefaultMutableTreeNode currentNode = (DefaultMutableTreeNode)
                         (RQ_Slots_Selection.getLastPathComponent());
            if (debug) System.out.println("after node in RemoveBTN: " + currentNode.toString());
            if (debug) System.out.println("In First, if, of remove btn");
            MutableTreeNode parent = (MutableTreeNode)(currentNode.getParent());
            if (parent != null) 
            {
                if (debug) System.out.println("In Second, if, of remove btn");
                if(RQ_Slots_TreeModel != null);
                    RQ_Slots_TreeModel.removeCurrentNode(RQ_Slots_Selection);
            }
        }
    }//GEN-LAST:event_RemoveNodeBTNActionPerformed

    private void File_ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_File_ExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_File_ExitActionPerformed

    private void File_OpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_File_OpenActionPerformed
        File_Save.setEnabled(true);
        File_Export.setEnabled(true);
        Frame f = new Frame("Junk");
//        String NameFile;
        final JFileChooser fileOpen = new JFileChooser();
        fileOpen.setCurrentDirectory(new File(WorkingDir + "/AssistRQ/SampleTexts"));
        if (debug) System.out.println("In File Open, WorkingDir:" + WorkingDir);
        fileOpen.setDialogTitle("Get Tagged File");
        int ReturnVal = fileOpen.showOpenDialog(this);
        if(ReturnVal == fileOpen.CANCEL_OPTION) return;
        TaggedValuesFile = fileOpen.getSelectedFile().toString();
        if (debug) System.out.println("In File Open, TaggedValuesFile:" + TaggedValuesFile);
        loadFiles(TaggedValuesFile);
    }//GEN-LAST:event_File_OpenActionPerformed

    //Takes in the base file name an opens it along with the tagged values file
    //and the text that was processed and loads them into the tabbed panes.
    private void loadFiles(String NameFile)
    {
        String temp = "";
        for (int i = 0; i < NameFile.length(); i++)
        {
            if(NameFile.charAt(i) == '.')
            {
                for(int x = 0; x < i; x++)
                {
                    temp += NameFile.charAt(x);
                }
            }
        }
        NameFile = temp;
        TaggedValuesFile = NameFile + ".tags";
        String OrgTxtFile = NameFile + ".HTML";
        FileInputStream fis = null;
        if (debug) System.out.println("In loadFiles, TaggedValuesFile:" + TaggedValuesFile);
        try
        {
            if (debug) System.out.println("The file in .rq : " + OrgTxtFile);
            fis = new FileInputStream(OrgTxtFile);
        }catch(IOException io_e)
        {
            System.out.print(OrgTxtFile + " does not exist.");
        }
        BufferedReader FileRead = new BufferedReader(new InputStreamReader(fis));
        try
        {
            File f = new File(OrgTxtFile);
            URL url = new URL("file:" + OrgTxtFile);
            OrgFileTxtBox.setPage("file:" + OrgTxtFile);
        }
        catch(IOException ioe)
        {
           ioe.printStackTrace();
        }
        try
        {
           TaggedTreeModel.setTreeModel(FillTree(TaggedValuesFile, TaggedValuesTree));
        } catch (IOException ioe)
        {
           ioe.printStackTrace();
        }
        String RQ_Slots_File = NameFile + ".tab";
        if (debug) System.out.println("In loadFiles, RQ_Slots_File: " + RQ_Slots_File);
        try
        {
            File f = new File(RQ_Slots_File);
            if (f.exists())
            {
                RQ_Slots_TreeModel.setTreeModel(FillTree(RQ_Slots_File, RQ_Slots_Tree));
            }
        } catch (IOException ioe)
          {
            ioe.printStackTrace();
          }
    }


    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) 
    {
        AssistRQ Temp = new AssistRQ();
        if(args[0] != "")
            //Sets the dir where AssistRQ is located based on first argument
        {
            Temp.WorkingDir = args[0];
            if(debug) System.out.println(Temp.WorkingDir);
        }
        else
            //Else sets it to where I put it
            Temp.WorkingDir = "/home/jeffmac";

        if(args.length == 1)
            //runs in normal mode
        {
            Temp.init();
            Temp.show();
        }
        else if(args[1].equalsIgnoreCase("1"))
            // Switch issued in command line to run in background with minimal interaction from user.
        {
            Temp.BackGroundRun();
        }
    }

    public void init()
    {
        jBTN_Sub_RQ_Form.setVisible(false);
        jBTN_Exit_RQ_Form.setVisible(false);
        try
        {
            readConfigFile();
        }catch(Exception e)
        {
            e.printStackTrace();
        }
        ConnectDB("test");
        if(debug) System.out.println("after connect to bd");

        //Center the window
        this.setSize(860, 740);
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension frameSize = this.getSize();
        if (frameSize.height > screenSize.height) {
          frameSize.height = screenSize.height;
        }
        if (frameSize.width > screenSize.width) {
          frameSize.width = screenSize.width;
        }
        this.setLocation((screenSize.width - frameSize.width) / 2, (screenSize.height - frameSize.height) / 2);
        
        Form_RQ.jBTN_OK_RQ_Form.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBTN_OK_RQ_FormActionPerformed(evt);
            }
        });

        Form_RQ.jBTN_Cancel_RQ_Form.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBTN_Cancel_RQ_FormActionPerformed(evt);
            }
        });
    }

    private javax.swing.JCheckBoxMenuItem CBMenuMissions[] = new javax.swing.JCheckBoxMenuItem[10];

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSeparator jSeparator34;
    private javax.swing.JMenuItem File_Export;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextField jT_Field53;
    private javax.swing.JSeparator jSeparator33;
    private javax.swing.JButton jBTN_OK_RQ_Form;
    private javax.swing.JTextField jT_Field4;
    private javax.swing.JTextField jT_Field27;
    private javax.swing.JTextField jT_Field41;
    private javax.swing.JTextField jT_Field12;
    private javax.swing.JLabel jL_Field37;
    public javax.swing.JLabel jLStatus;
    private javax.swing.JLabel jL_Field26;
    private javax.swing.JTextField jT_Field39;
    private javax.swing.JTextField jT_Field33;
    private javax.swing.JLabel jL_Field33;
    private javax.swing.JMenuItem File_Exit;
    private javax.swing.JLabel jL_Field40;
    private javax.swing.JDialog jDiag_RulesWordlist;
    private javax.swing.JTextField jT_Field19;
    private javax.swing.JTextField jT_Field2;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jL_Field42;
    private javax.swing.JTextField jT_Field5;
    private javax.swing.JTextField jT_Field50;
    private javax.swing.JTextField jT_Field13;
    private javax.swing.JLabel jL_Field20;
    private javax.swing.JTextField jT_Field38;
    private javax.swing.JTextField jT_Field23;
    private javax.swing.JTextField jT_Field45;
    private javax.swing.JButton jBTN_Cancel_RQ_Form;
    private javax.swing.JTextField jT_Field52;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JRadioButton Sodi1RadioBtn;
    private javax.swing.JTextField jT_Field14;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel jL_Field43;
    private javax.swing.JTextField jT_Field37;
    private javax.swing.JLabel jL_Field21;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTextField jT_Field15;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JButton ConfigHost_OKBTN;
    private javax.swing.JLabel jL_Field35;
    private javax.swing.JTextField jT_Field6;
    private javax.swing.JTextField jT_Field20;
    private javax.swing.JButton OKBTN_NewNode;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jL_Field34;
    private javax.swing.JTextField jT_Field49;
    private javax.swing.JButton LRW_OKBTN;
    private javax.swing.JLabel jL_Field12;
    private javax.swing.JTextField jT_Field3;
    private javax.swing.JDialog jDiagStatus;
    private javax.swing.JButton NewNodeBTN;
    private javax.swing.JTextPane OrgFileTxtBox;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField jT_Field40;
    private javax.swing.JTextField jT_Field11;
    private javax.swing.JLabel jL_Field50;
    private javax.swing.JSeparator jSeparator32;
    private javax.swing.JTextField jT_Field8;
    private javax.swing.JLabel jL_Field6;
    private javax.swing.JLabel jL_Field36;
    private javax.swing.JTextField jT_Field21;
    private javax.swing.JTextField jT_Field26;
    private javax.swing.JSeparator jSeparator35;
    private javax.swing.JSeparator jSeparator324;
    private javax.swing.JLabel jL_Field53;
    private javax.swing.JButton LRW_CancelBTN;
    private javax.swing.JLabel jLabel7;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jL_Field18;
    private javax.swing.JTextField jTextField_DBAddress;
    private javax.swing.JTextField jT_Field7;
    private javax.swing.JTextField jTextField_Port;
    private javax.swing.JLabel jL_Field52;
    private javax.swing.JTextField jT_Field28;
    private javax.swing.JLabel jL_Field7;
    private javax.swing.JTextField jT_Field51;
    private javax.swing.JDialog jdNewNodeDiag;
    private javax.swing.JMenu MenuMission;
    private javax.swing.JLabel jL_Field2;
    private javax.swing.JSeparator jSeparator36;
    private javax.swing.JTextField jT_Field29;
    private javax.swing.JLabel jL_Field16;
    private javax.swing.JSeparator jSeparator31;
    private javax.swing.JLabel jL_Field3;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JLabel jL_Field13;
    private javax.swing.JLabel jL_Field9;
    private javax.swing.JLabel jL_Field46;
    private javax.swing.JTextField jT_Field31;
    private javax.swing.JList jList_RulesWords;
    private javax.swing.JLabel jL_Field4;
    private javax.swing.JButton ExportDiag_CancelBtn;
    private javax.swing.JLabel jL_Field48;
    private javax.swing.JLabel jL_Field8;
    private javax.swing.JRadioButton jRadioBtnDataBase;
    private javax.swing.JTextField jTextField_User;
    private javax.swing.JButton MoveToBTN;
    private javax.swing.JLabel jL_Field15;
    private javax.swing.JLabel jL_Heading4;
    private javax.swing.JLabel jL_Field11;
    private javax.swing.JMenu MenuFile;
    private javax.swing.JLabel jL_Heading7;
    private javax.swing.JLabel jL_Field14;
    private javax.swing.JSeparator jSeparator322;
    private javax.swing.JMenu MenuEdit;
    private javax.swing.JLabel jL_Heading2;
    private javax.swing.JButton ExportDiag_OkBtn;
    private javax.swing.JTree RQ_Slots_Tree;
    private javax.swing.JLabel jL_Heading6;
    private javax.swing.JButton jBTN_Exit_RQ_Form;
    private javax.swing.JTextField jT_Field48;
    private javax.swing.JTextField jT_Field32;
    private javax.swing.JLabel jL_Field47;
    private javax.swing.JSeparator jSeparator323;
    private javax.swing.JButton jBTN_Sub_RQ_Form;
    private javax.swing.JTextField jT_Field10;
    private javax.swing.JLabel jL_Field28;
    private javax.swing.JLabel jL_Field39;
    private javax.swing.JLabel jL_Field17;
    private javax.swing.JTextField jT_Field46;
    private javax.swing.JLabel jL_Heading3;
    private javax.swing.JTextField jT_Field16;
    private javax.swing.JTree TaggedValuesTree;
    private javax.swing.JDialog jDiagConfigHost;
    private javax.swing.JLabel jL_Field23;
    private javax.swing.JTextField jTextField_DBDriver;
    private javax.swing.JButton CancelBTN_NewNode;
    private javax.swing.JTextField jT_Field30;
    private javax.swing.JLabel jL_Field5;
    private javax.swing.JLabel jL_Field30;
    private javax.swing.JSeparator jSeparator321;
    private javax.swing.JLabel jL_Field44;
    private javax.swing.JLabel jL_Field19;
    private javax.swing.JLabel jL_Field51;
    private javax.swing.JMenuItem File_Open;
    private javax.swing.JRadioButton jRadioBtnLocal;
    private javax.swing.JTextField jT_Field47;
    private javax.swing.JLabel jL_Field38;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JLabel jL_Field49;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField jT_Field42;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jL_Field24;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jT_Field34;
    private javax.swing.JLabel jL_Field41;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jL_Field29;
    private javax.swing.JMenuItem File_ProcessTxt;
    private javax.swing.JLabel jL_Heading1;
    private javax.swing.JTextField jT_Field43;
    private javax.swing.JLabel jL_Field25;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton MoveAllBTN;
    private javax.swing.JDialog jDiag_RQ_Form;
    private javax.swing.JPasswordField jPasswordField_Password;
    private javax.swing.JTextField jT_Field9;
    private javax.swing.JTextField jT_Field35;
    private javax.swing.JTextField jT_Field24;
    private javax.swing.JMenuItem Edit_ConfigHost;
    private javax.swing.JLabel jL_Field31;
    private javax.swing.JMenuItem Edit_RulesWordLists;
    private javax.swing.JButton RemoveNodeBTN;
    private javax.swing.JMenuItem File_Save;
    private javax.swing.JRadioButton Sodi2RadioBtn;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JRadioButton Sodi3RadioBtn;
    private javax.swing.JLabel jL_Field45;
    private javax.swing.JTextField jT_Field17;
    private javax.swing.JButton ConfigHost_CancelBTN;
    private javax.swing.JLabel jL_Field22;
    private javax.swing.JTextField jT_Field22;
    private javax.swing.JTextField jT_Field18;
    private javax.swing.JLabel jL_Heading5;
    private javax.swing.JTextField jT_Field44;
    private javax.swing.JDialog ExportToDiag;
    private javax.swing.JTextField jT_Field25;
    private javax.swing.JLabel jL_Field27;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField jT_Field36;
    private javax.swing.JLabel jL_Field32;
    private javax.swing.JButton RQ_FormBTN;
    private javax.swing.JLabel jL_Field10;
    // End of variables declaration//GEN-END:variables

    /*Find a specified node from a string and the tree.  It then passes back the
     * node.
     */
    public Object findNode(String field, DefaultMutableTreeNode node)
    {
        Enumeration e = node.depthFirstEnumeration();
        Object currNode;
        while(e.hasMoreElements())
        {
            currNode = e.nextElement();
            if (debug) System.out.println("before if equal in findNode: " + currNode.toString());
            if(currNode.toString().equals(field))
            {
                if (debug) System.out.println("after if equal in findNode: " + currNode.toString());
                return currNode;
            }
        }
        return null;
    }

    /* Set the tree based on the Mission selection. */
    private void SetMission(String inString)
    {
        //Configuration.Mission = inString;
        String RQ_Slots_File = WorkingDir + MissionDir + inString + ".rq";
        String DBUrl = Configuration.DB_Url + "//" + Configuration.Host + "/" + inString; //Used to connect to the DB
        ResultSet Fields = null;
        Connection Conn = null;
        Statement Stmt = null;

        try 
        {
            Class.forName(Configuration.DB_Driver).newInstance(); //Used to Connect to the DB
            Conn = DriverManager.getConnection(DBUrl, Configuration.User, Configuration.Password); //Used to Connect to the DB
            Stmt = Conn.createStatement();
            if (debug) System.out.println("Established a connection with DB: " + DBUrl);
            FileOutputStream m_Output = new FileOutputStream(RQ_Slots_File);
            PrintStream ps = new PrintStream(m_Output);
            Fields = Stmt.executeQuery("Select * from Labels"); //Preforms SQL statements
            Fields.next();
            for(int i = 1; i < 59; i++)
            {
                if(debug) System.out.println("List of Fields:" + Fields.getString(i));
                ps.print(Fields.getString(i) + "\n");
            }
            ps.close();
        }catch(Exception e)
        {
            e.printStackTrace();
        } finally {
            if (Stmt != null) 
            {
                try 
                {
                    Stmt.close();
                } catch (SQLException SQLEx) 
                { /* ignore */
                }
            }
            if (Conn != null) 
            {
                try 
                {
                    Conn.close();
                } catch (SQLException SQLEx) 
                { /* ignore */
                }
            }
        }
        RootNode = inString;
        try
        {
            RQ_Slots_TreeModel.setTreeModel(FillTree(RQ_Slots_File, RQ_Slots_Tree));
        } catch (IOException ioe)
          {
            ioe.printStackTrace();
          }
    }

////////////////////////////////////////////////////////////////////////////////
////////////   Start of the functionality to import a tree from a file /////////
////////////////////////////////////////////////////////////////////////////////
    /** Utility method to parse a file.  File where each new
        level is indicated by a char(-,+,>) next to that word.  One word per line. */
    private DefaultMutableTreeNode parseTableOfContents(FileInputStream fis)
        throws IOException
    {
        DefaultMutableTreeNode outNode = new DefaultMutableTreeNode(RootNode);
        ArrayList sAl_Temp = new ArrayList();
        BufferedReader br = new BufferedReader(
                            new InputStreamReader(fis));
        String sLine = null;
        DefaultMutableTreeNode parent = null, childparent = null;
        DefaultMutableTreeNode other = new DefaultMutableTreeNode("Other");
        boolean check = true;

        while ( (sLine = br.readLine()) != null)
        {
            if (debug) System.out.println("Line: " + sLine);
            sLine = sLine.replace('_', ' ');
            if (debug) System.out.println("Line(_): " + sLine);

            if(sLine.charAt(0) == '+')
            {
                sLine = sLine.replace('+', ' ');
                if (debug) System.out.println("Line(+): " + sLine);
                DefaultMutableTreeNode aNode = new DefaultMutableTreeNode(sLine.trim());
                parent = aNode;
                outNode.add(aNode);
            }

            if(sLine.charAt(0) == '-')
            {
                if(check)
                {
                    outNode.add(other);
                    check = false;
                }
                sLine = sLine.replace('-', ' ');
                if (debug) System.out.println("Line(-): " + sLine);
                DefaultMutableTreeNode aNode = new DefaultMutableTreeNode(sLine.trim());
                other.add(aNode);
            }

            if(sLine.charAt(0) == '>')
            {
                sLine = sLine.replace('>', ' ');
                if (debug) System.out.println("Line(>): " + sLine);
                DefaultMutableTreeNode aNode = new DefaultMutableTreeNode(sLine.trim());
                childparent = aNode;
                parent.add(aNode);
            }

            if(sLine.charAt(0) == '^')
            {
                sLine = sLine.replace('^', ' ');
                if (debug) System.out.println("Line(^): " + sLine);
                DefaultMutableTreeNode aNode = new DefaultMutableTreeNode(sLine.trim());
                childparent.add(aNode);
            }
        }
        if (debug) System.out.println(outNode.toString());
        return outNode;
    }
////////////////////////////////////////////////////////////////////////////////
////////////  End of File import  //////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

    /** takes in the file to which to create the tree from and the tree to store it
      * in.
      */
    public DefaultTreeModel FillTree(String sTocFile, JTree inTree)
                        throws IOException
    {
        /** Graphical Tree Outline. */
        JTree jt;
        DefaultTreeModel DynamicTreeModel;

        // check if file exists
        if (debug) System.out.println("In FillTree:" + sTocFile);
        File f = new File(sTocFile);

        if (debug) System.out.println("In FillTree before new File:" + sTocFile);
        FileInputStream fis = new FileInputStream(sTocFile);
        if (debug) System.out.println("In FillTree after new File:" + sTocFile);

         /** Fills the tree from a file */
        dynamicTree = parseTableOfContents(fis);
        fis.close();
        if (dynamicTree != null)
        {
            // create a JTree
            DynamicTreeModel = new DefaultTreeModel(dynamicTree);
            DynamicTreeModel.addTreeModelListener(new TMListener());
            jt = new JTree(DynamicTreeModel);
            jt.setEditable(true);
            inTree.setModel(jt.getModel());
            return DynamicTreeModel;
        }
        else
            throw new IOException(sTocFile + " is empty.");
    }

    void ConnectDB(String DB)
    {
        String Missions_File = WorkingDir + MissionDir + "Missions.ini";
        String DBUrl = Configuration.DB_Url + "//" + Configuration.Host + "/" + DB;// DB = test
        ResultSet DBs = null;
        Connection Conn = null;
        Statement Stmt = null;
        int i = 0;
        ButtonGroup group = new ButtonGroup();

        try 
        {
            Class.forName(Configuration.DB_Driver).newInstance();
            Conn = DriverManager.getConnection(DBUrl, Configuration.User, Configuration.Password);
            Stmt = Conn.createStatement();
            if (debug) System.out.println("Established a connection with DB: " + DBUrl);

            FileOutputStream m_Output = new FileOutputStream(Missions_File);
            PrintStream ps = new PrintStream(m_Output);

            DBs = Stmt.executeQuery("Show databases;");
            while(DBs.next())
            {
                if((DBs.getString(1).trim().equalsIgnoreCase("mysql")) || (DBs.getString(1).trim().equalsIgnoreCase("test")))
                {
                    if(debug) System.out.println("list of unwanted missions:" + DBs.getString(1));
                }
                else
                {
                    if(debug) System.out.println("list of wanted missions:" + DBs.getString(1));
                    ps.print(DBs.getString(1) + "\n");
                }
            }
            ps.close();
        }catch(Exception e)
        {
            e.printStackTrace();
        } finally 
        {
            if (Stmt != null) 
            {
                try
                {
                    Stmt.close();
                } catch (SQLException SQLEx) 
                { /* ignore */
                }
            }
            if (Conn != null) 
            {
                try 
                {
                    Conn.close();
                } catch (SQLException SQLEx) 
                { /* ignore */
                }
            }
        }

        try
        {
            FileInputStream fis = new FileInputStream(Missions_File);
            BufferedReader br = new BufferedReader(new InputStreamReader(fis));
            i = 0;
            String sLine = " ";

            while(sLine != null)
            {
                sLine = br.readLine();
                if(sLine != null)
                {
                    CBMenuMissions[i] = new javax.swing.JCheckBoxMenuItem();
                    MenuMission.add(CBMenuMissions[i]);
                    CBMenuMissions[i].setText(sLine);
                    group.add(CBMenuMissions[i]);
                    CBMenuMissions[i].addActionListener(new java.awt.event.ActionListener() 
                    {
                        public void actionPerformed(java.awt.event.ActionEvent evt) 
                        {
                            CBMenuMissionsActionPerformed(evt);
                        }
                    });
                    i++;
                }
            }

        } catch(Exception ie)
        {
            //ie.printStackTrace();
        }
        CBMenuMissions[0].setState(true);
        Configuration.Mission = CBMenuMissions[0].getText();
        SetMission(Configuration.Mission);
    }

    private boolean BKRun = false;
    void BackGroundRun()
    {
        BKRun = true;
// Need to be able to change between submit and ok functionality on the RQ_Form
        Object source = new Object();
        if (debug) System.out.println("attempting to run in the background.");
        try
        {
            readConfigFile();
        }catch(Exception e)
        {
            e.printStackTrace();
        }
        java.awt.event.ActionEvent evt = new java.awt.event.ActionEvent(source, 13224, "");
        File_ProcessTxtActionPerformed(evt);
        SetMission(Configuration.Mission);
        if (debug) System.out.println("before moveAll.");
        MoveAllBTNActionPerformed(evt);
        if (debug) System.out.println("before Display.");
        BkDisplay(evt);
    }
////
    void fromRQ_Form()
    {
        String sRecord[] = new String[100];
        int count = 0;
        
        sRecord = Form_RQ.getFieldValues();

        Object child, sd_child, th_child, fr_RootNode;
        DefaultTreeModel dtm = RQ_Slots_TreeModel.getTreeModel();
        fr_RootNode = dtm.getRoot();
        for (int x = 0; x < dtm.getChildCount(fr_RootNode); x++)
        {
            if (debug) System.out.println("Writing to file.");
            child = dtm.getChild(fr_RootNode, x);
            for (int y = 0; y < dtm.getChildCount(child); y++)
            {
                sd_child = dtm.getChild(child, y);
                {
                    DefaultMutableTreeNode aNode = new DefaultMutableTreeNode(sRecord[count]+" ");
                    th_child = aNode.getUserObject();
                    TreePath path = new TreePath(dtm.getPathToRoot((DefaultMutableTreeNode)sd_child));
                    if(dtm.getChildCount(sd_child) != 0)
                    {
                        TreePath TreePath_Child = new TreePath(dtm.getPathToRoot((DefaultMutableTreeNode)dtm.getChild(sd_child ,0)));
                        RQ_Slots_TreeModel.removeCurrentNode(TreePath_Child);
                    }
                    RQ_Slots_TreeModel.addObject(th_child, path);
                }
                count++;
            }
        }
    }

    void toRQ_Form()
    {
        Object child, sd_child, th_child, fr_RootNode;
        DefaultTreeModel dtm = RQ_Slots_TreeModel.getTreeModel();
        String sRecord[] = new String[60];

        for(int z = 0; z < 60; z++)
        {
            sRecord[z] = "";
        }

        /* Extracting the RQ_Tree to a file by
         * starting at the root node and working down to
         * each leaf.
         */
        fr_RootNode = dtm.getRoot();
        int count = 0;
        for (int x = 0; x < dtm.getChildCount(fr_RootNode); x++)
        {
            if (debug) System.out.println("Writing to file.");
            child = dtm.getChild(fr_RootNode, x);
            for (int y = 0; y < dtm.getChildCount(child); y++)
            {
                sd_child = dtm.getChild(child, y);
                for (int z = 0; z < dtm.getChildCount(sd_child); z++)
                {
                    th_child = dtm.getChild(sd_child, z);
                    sRecord[count] = th_child.toString(); // "^"
                    System.out.println("Test: " + sRecord[count] + " : " + count);
                }
                count++;
            }
        }
        
        Form_RQ.setFieldValues(sRecord);
    }
////    
    DocumentEditor DocDisplay()
    {
        try
        {
          gate.FeatureMap params = Factory.newFeatureMap();
          DocumentEditor editor = (DocumentEditor)Factory.createResource(
                                "gate.gui.DocumentEditor", params);//
          editor.setTarget(g_GateDoc);  //for the document is it possible to take the exported doc(HTML) file and insert it. 
          params =  Factory.newFeatureMap();
          params.put("xmlFileUrl", DocumentEditor.class.getResource(
                                  "/gate/resources/creole/schema/PosSchema.xml"));

          AnnotationSchema annotSchema = (AnnotationSchema)
             Factory.createResource("gate.creole.AnnotationSchema", params);
          Set annotationSchemas = new HashSet();
          annotationSchemas.add(annotSchema);
          editor.setTypesTreeVisible(true);
          return editor;
        }catch(Exception e)
        {
            e.printStackTrace();
        }
        return null;
    }

    void BkDisplay(java.awt.event.ActionEvent evt)
    {
        try
        {
          JTabbedPane jTabbedPane_BK = new JTabbedPane();
          DocumentEditor editor = DocDisplay();

          JFrame frame = new JFrame("Gate Document Editor");
          frame.addWindowListener(
            new WindowAdapter()
            {
              public void windowClosing(WindowEvent e)
              {
                System.exit(0);
              }
            }
          );

          toRQ_Form();
          jTabbedPane_BK.addTab("Text & Tags", editor);
          jTabbedPane_BK.addTab("Reporter's Questions", Form_RQ.getContentPane());
          frame.getContentPane().add(jTabbedPane_BK);
          frame.pack();
          frame.setSize(900, 800);
          frame.setVisible(true);
          System.out.println("Domain: " + Configuration.Mission);
          RQ_FormBTNActionPerformed(evt);

        }catch(Exception ie)
        {
          ie.printStackTrace();
        }
    }

    class MyDropTargetLister extends DropTarget
    {
        MyDropTargetLister(){}
        public void dragOver(DropTargetDragEvent dtde)
        {
            Point p = dtde.getLocation();
            int row = RQ_Slots_Tree.getRowForLocation(p.x, p.y);
            RQ_Slots_Tree.setSelectionRow(row);
            if (debug) System.out.println("In DropTarget target local is:" + row);
        }

        public void drop(DropTargetDropEvent dtde)
        {
            Transferable trans = dtde.getTransferable();
            DefaultMutableTreeNode node = null;
            DataFlavor STRING_FLAVOR = new DataFlavor(String.class, "String Type");
            try
            {
                node = new DefaultMutableTreeNode(trans.getTransferData(STRING_FLAVOR));
                if (debug) System.out.println("In Drop target the value of node." + node.toString()/* + " " + dataflav.toString()*/);
            }catch(Exception e)
            {
                e.printStackTrace();
            }

            if (debug) System.out.println("In Drop target before setting the value." + dtde.getSource().toString());
            if(RQ_Slots_Tree.getSelectionPath().getPathCount() == 3)
                RQ_Slots_TreeModel.addObject((Object)node, RQ_Slots_Tree.getSelectionPath());
            if (debug) System.out.println("In Drop target value is:" + node.toString());
        }
    }

    class TMListener implements TreeModelListener 
    {
        public void treeNodesChanged(TreeModelEvent e) 
        {
            DefaultMutableTreeNode node;
            node = (DefaultMutableTreeNode)
                     (e.getTreePath().getLastPathComponent());

            /*
             * If the event lists children, then the changed
             * node is the child of the node we've already
             * gotten.  Otherwise, the changed node and the
             * specified node are the same.
             */
            try 
            {
                int index = e.getChildIndices()[0];
                node = (DefaultMutableTreeNode)
                       (node.getChildAt(index));
            } catch (NullPointerException exc) {}

            if (debug) System.out.println("The user has finished editing the node.");
            if (debug) System.out.println("New value: " + node.getUserObject());
        }
        public void treeNodesInserted(TreeModelEvent e) {}
        public void treeNodesRemoved(TreeModelEvent e) {}
        public void treeStructureChanged(TreeModelEvent e) {}
    }

    class Cfilter extends javax.swing.filechooser.FileFilter 
    {
        public String ext;

        public Cfilter() 
        {
            ext = "";
        }

        public Cfilter(String in) 
        {
            ext = in;
        }
        
        public String getDescription()
        {
            return ext;
        }

        public boolean accept(File f)
        {
            return false;
        }
        
        public boolean accept(File dir, String name) 
        {
            return(name.endsWith(ext));
        }
    }

    public class ConfigData implements Serializable
    {
        public ConfigData()
        {
            User = null;                   ///access to db
            Password = null;               ///access to db
            Host = null;                   ///Location of testbed
            Port = null;                   ///Port on Testbed
            DB_Url = null;                 ///jdbc:mysql:
            DB_Driver = null;              ///com.mysql.jdbc.Driver
            Mission = null;
            Local = true;
        }

        public ConfigData(String User, String Password, String Host, String Port, String DB_Url, String DB_Driver, String Mission, boolean Local)
        {
            this.User = User;                   ///access to db
            this.Password = Password;           ///access to db
            this.Host = Host;                   ///Location of testbed
            this.Port = Port;                   ///Port on Testbed
            this.DB_Url = DB_Url;
            this.DB_Driver = DB_Driver;
            this.Mission = Mission;
            this.Local = Local;
        }

        public void setUser(String User)
        { this.User = User;}
        public void setPassword(String Password)
        { this.Password = Password;}
        public void setHost(String Host)
        { this.Host = Host;}
        public void setPort(String Port)
        { this.Port = Port;}
        public void setDB_Url(String DB_Url)
        { this.DB_Url = DB_Url;}
        public void setDB_Driver(String DB_Driver)
        { this.DB_Driver = DB_Driver;}
        public void setMission(String Mission)
        { this.Mission = Mission;}
        public void setLocal(boolean Local)
        { this.Local = Local;}

        public String getUser()
        { return User;}
        public String getPassword()
        { return Password;}
        public String getHost()
        { return Host;}
        public String getPort()
        { return Port;}
        public String getDB_Url()
        { return DB_Url;}
        public String getDB_Driver()
        { return DB_Driver;}
        public String getMission()
        { return Mission;}
        public boolean getLocal()
        { return Local;}

        public String User = null;                   ///access to db
        public String Password = null;               ///access to db
        public String Host = null;                   ///Location of testbed
        public String Port = null;                   ///Port on Testbed
        public String DB_Url = null;
        public String DB_Driver = null;
        public String Mission = null;
        public boolean Local = true;
    }

    class pThread extends Thread   ///runs stand Alone Annie(SAA)
    {
        String TxtFile;
        public pThread(){}
        public pThread(String in)
        {
            TxtFile = in;
        }

        public void run() //throws gate.util.GateException, java.io.IOException
        {
            FileInputStream fis = null;
            BufferedReader br = null;
            String sLine = "";
            jLStatus.setText("GATE initialized . . . . Processing");
            Saa.WorkingDir = WorkingDir;
            Saa.CurrentRules = RulesWordlistDir;
            jProgressBar1.setIndeterminate(true);

            // initialize ANNIE (this may take several minutes)
            try
            {
                Saa.initAnnie();
            }catch(Exception ioe)
            {
                ioe.printStackTrace();
            }

            // create a GATE corpus and add a document for each command-line
            // argument
            gate.Corpus corpus = null;
            java.net.URL u = null;
            try
            {
                corpus = (gate.Corpus) Factory.createResource("gate.corpora.CorpusImpl");
                u = new java.net.URL(TxtFile);
            }catch(Exception ioe)
            {
                System.out.println(ioe.toString());
            }
            for(int i = 0; i < 1; i++) 
            {

              gate.FeatureMap params = Factory.newFeatureMap();
              params.put("sourceUrl", u);
              params.put("preserveOriginalContent", new Boolean(true));
              params.put("collectRepositioningInfo", new Boolean(true));
              jLStatus.setText("Creating doc for current file");
              gate.Document doc = null;
              try
              {
                doc = (gate.Document)
                  Factory.createResource("gate.corpora.DocumentImpl", params);
              }catch(Exception ioe)
              {
                System.out.println(ioe.toString());
              }
                corpus.add(doc);
            } // for each of args

            // tell the pipeline about the corpus and run it
            Saa.setCorpus(corpus);
            try
            {
                Saa.execute();
            }catch(Exception ioe)
            {
                System.out.println(ioe.toString());
            }

            // for each document, get an XML document with the
            // person and location names added
            java.util.Iterator iter = corpus.iterator();
            int count = 0;
            String startTagPart_1 = "<span GateID=\"";
            String startTagPart_2 = "\" title=\"";
            String startTagPart_3 = "\" style=\"background:";
            String color[] = {"Red", "Green", "Blue", "lightBlue", "lightGreen", "Pink", "Magenta"};
            String startTagPart_4 = ";\">";
            String endTag = "</span>";
            int color_count = 0;

            while(iter.hasNext()) 
            {
              gate.Document doc = (gate.Document) iter.next();
              gate.AnnotationSet defaultAnnotSet = doc.getAnnotations();
              java.util.Set annotTypesRequired = new java.util.HashSet();

              // check if file exists
              File f = new File(WorkingDir + "/AssistRQ/Japes/Annots.ini");
              if (f.exists())
              {
                try
                {
                    if (debug) System.out.println("The file in .rq : ");
                    fis = new  FileInputStream(f);
                }catch(IOException io_e)
                {
                    System.out.print(" does not exist.");
                }
              }else
                return;

              br = new BufferedReader(new InputStreamReader(fis));
              if (debug) System.out.println("after br in export");
              //Extract the values in the slots and output to a file
              while(sLine != null)
              {
                try
                {
                   sLine = br.readLine();
                   if (debug) System.out.println("after readline in export");
                }catch(IOException io_e)
                {
                    System.out.print(" does not exist.");
                }
                if(sLine == null)break;
                sLine = sLine.trim();
                if (debug) System.out.println("after node in export: " + sLine);
                annotTypesRequired.add(sLine);

              }//end of while

              gate.AnnotationSet peopleAndPlaces = defaultAnnotSet.get(annotTypesRequired);

              gate.FeatureMap features = doc.getFeatures();
              String originalContent = (String)
                features.get(gate.GateConstants.ORIGINAL_DOCUMENT_CONTENT_FEATURE_NAME);
              gate.corpora.RepositioningInfo info = (gate.corpora.RepositioningInfo)
                features.get(gate.GateConstants.DOCUMENT_REPOSITIONING_INFO_FEATURE_NAME);

              ++count;
              String temp = "";
    //////////////////////////////////////////////////////////////////////////
    // Converting the text file name to the name and path without the ".ext"
              for (int i = 0; i < u.getPath().length(); i++)
              {
                if(u.getPath().charAt(i) == '.')
                {
                    for(int x = 0; x  < i; x++)
                    {
                        temp += u.getPath().charAt(x);
                    }
                }
              }
    //////////////////////////////////////////////////////////////////////////
              File file = new File(temp + ".HTML");
              if (debug) System.out.println("File name: '"+file.getAbsolutePath()+"'");
              if(originalContent != null && info != null) 
              {
                jLStatus.setText("OrigContent and reposInfo existing. Generate file...");

                java.util.Iterator it = peopleAndPlaces.iterator();
                Annotation currAnnot;
                StandAloneAnnie.SortedAnnotationList sortedAnnotations = new StandAloneAnnie.SortedAnnotationList();

                while(it.hasNext()) 
                {
                  currAnnot = (Annotation) it.next();
                  sortedAnnotations.addSortedExclusive(currAnnot);
                } // while

                StringBuffer editableContent = new StringBuffer(originalContent);
                long insertPositionEnd;
                long insertPositionStart;
                // insert anotation tags backward
                if (debug) System.out.println("Unsorted annotations count: " + peopleAndPlaces.size());
                if (debug) System.out.println("Sorted annotations count: " + sortedAnnotations.size());
                for(int i = sortedAnnotations.size() - 1; i >= 0; --i) 
                {
                  currAnnot = (Annotation) sortedAnnotations.get(i);
                  insertPositionStart =
                    currAnnot.getStartNode().getOffset().longValue();
                  insertPositionStart = info.getOriginalPos(insertPositionStart);
                  insertPositionEnd = currAnnot.getEndNode().getOffset().longValue();
                  insertPositionEnd = info.getOriginalPos(insertPositionEnd, true);
                  if(insertPositionEnd != -1 && insertPositionStart != -1) 
                  {
                    editableContent.insert((int)insertPositionEnd, endTag);
                    if(color_count > 5)color_count = 0;
                    else color_count++;
                    String Temp = (startTagPart_3 + color[color_count] + startTagPart_4);
                    if (debug) System.out.println("Tag for color: " + Temp);
                    editableContent.insert((int)insertPositionStart, Temp);
                    editableContent.insert((int)insertPositionStart,
                                                                  currAnnot.getType());
                    editableContent.insert((int)insertPositionStart, startTagPart_2);
                    editableContent.insert((int)insertPositionStart,
                                                          currAnnot.getId().toString());
                    editableContent.insert((int)insertPositionStart, startTagPart_1);
                  } // if
                } // for

                jLStatus.setText("Writing file to disk: " + file.toString());
                try
                {
                    FileWriter writer = new java.io.FileWriter(temp + ".HTML");
                    writer.write(editableContent.toString());
                    writer.close();
                }catch(Exception ioe)
                {
                    System.out.println(ioe.toString());
                }
              } // if - should generate
              else 
              {
                jLStatus.setText("Writing unHighlighted file to disk: " + file.toString());
                try
                {
                    FileWriter writer = new java.io.FileWriter(temp + ".HTML");
                    writer.write(originalContent);
                    writer.close();
                }catch(Exception ioe)
                {
                    System.out.println(ioe.toString());
                }
                if (debug) System.out.println("Content : " + originalContent);
                if (debug) System.out.println("Repositioning: " + info);
              }
              g_GateDoc = doc;
              if(!BKRun)
              {
                jTabbedPane1.addTab("Text & Tags", DocDisplay());
              }
            } // while - for each doc
            jLStatus.setText("Done!");
            jDiagStatus.hide();
        }
    }
    
/*    class DocumentEditor2 extends DocumentEditor
    {
        DocumentEditor2()
        {
            super();
        }
        
        public Resource init(){
            super.init();
            return this;
        }

        protected TypeData getTypeData(String setName, String type){
            return super.getTypeData(setName, type);
        }// protected TypeData getTypeData(String setName, String type)
        
        public void setToolBar(boolean temp)
        {
            toolbar.setVisible(temp);
        }
    }*/
}
