/*
 File:		BehaviorStreamBuffer.java
 CVS Info:	$Id: BehaviorStreamBuffer.java,v 1.1.1.1 1998/10/8 21:35:14 brutzman Exp $
 Compiler:	jdk 1.3
 */


package mil.navy.nps.dis;		// the package we belong to

import mil.navy.nps.disEnumerations.*;	// Enumerations for DIS

import org.web3d.vrtp.net.*;		// network utilities, especially privileges & DatagramStreamBuffer
import org.web3d.vrtp.security.*;

import java.net.*;
import java.util.*;
import java.io.*;

/**
 * Threaded DIS PDU reader.
 *
 *<P>
 *@version 1.0
 *<P>
 *@author <a href="mailto:mcgredo@cs.nps.navy.mil">Don McGregor</a> (<a href="http://www.npsnet.org/~mcgredo">http://www.npsnet.org/~mcgredo</a>)
 *<P>
 *
 *<dt><b>Location:</b>
 *<dd>Web:  <a href="http://www.web3d.org/WorkingGroups/vrtp/mil/navy/nps/dis/BehaviorStreamBuffer.java">
 *  http://www.web3d.org/WorkingGroups/vrtp/mil/navy/nps/dis/BehaviorStreamBuffer.java</a>
 *
 *<dd>or locally:  <a href="../../../../../../mil/navy/nps/dis/BehaviorStreamBuffer.java">
 *  ~/mil/navy/nps/dis/BehaviorStreamBuffer.java</a>
 *<P>
 *
 *<dt><b>Hierarchy Diagram:</b>
 *<dd><a href="../../../../../../dis-java-vrml/images/PduClassHierarchy.jpg"><IMG SRC="../../../../../../dis-java-vrml/images/PduClassHierarchyButton.jpg" ALIGN=ABSCENTER WIDTH=150 HEIGHT=21></a>
 *<P>
 *
 *<dt><b>Summary:</b>
 *<dd>BehaviorStreamBuffer runs in a separate thread and collects PDUs off the
 * network in preparation for processing; it contains a DatagramStreamBuffer that
 * reads datagrams from the network.
 *<P>
 *
 *<dt><b>Explanation:</b>
 *<dd>BehaviorStreamBuffer is an "adaptor", from pp. 139-150 of _Design Patterns_,
 * Gamma, Helm, Hohnson, and Vlissides ("GoF"). An adaptor can be indicated
 * when 1) you want to use an existing class, and its interface does not match
 * the one you need; 2) You want to create a reusable class that cooperates with
 * unrelated or unforeseen clases, that is, classes that don't necessarily have
 * compatible interfaces.
 *
 * Effectively, a DatagramStreamBuffer is close to the class we want to
 * use, but not close enough. It returns Datagrams rather than PDUs.
 * This makes it very reusable in other contexts. This class adapts
 * the datagrams to PDUs, and provides some other assistance, such as
 * suspending and resuming reading operations.
 *
 *
 *<P>
 *
 *<dt><b>History:</b>
 *<dd>15Nov96 DMcG        	New
 *<dd>20Nov96 DMcG        	Added multicast support
 *<dd>10Dec96 DMcG        	Multicast changed over to 1.1 API spec
 *<dd>7Jun97  Don Brutzman	Upgrading for JSAI use
 *<dd>19Aug97 DMcG		Made "multicast" terminology consistent
 *<dd>18Sep98 DMcG            changed ttl to an int in accordance with JDK 1.2
 *<dd>20Nov98 DMcG          Changed to use DatagramStreamBuffer
 *<dd>10Jun99 DMcG          Uses platform-independent security in org.web3d.vrtp
 *
 *<dt><b>References:</b>
 *<dd>		DIS specification : IEEE 1278.1
 *
 */

public class BehaviorStreamBuffer extends Object implements Runnable, AllPermissionsBadge
{
  protected org.web3d.vrtp.net.DatagramStreamBuffer datagramStreamBuffer;      // holds networking code

  private   boolean              datagramStreamBufferThreadStarted = false; 
  protected boolean              runContinue = true; // continue looping in run() method?

/**
 *   Get platform-specific security strategy
 */
 
 protected SecurityStrategy strategy = SecurityStrategy.getSecurityStrategy();
 
/**
 * When DEBUG is true, System.out.println text messages trace the internals of script operation.
 * Text output appears in the Java Console (CosmoPlayer browser) or in the VRML console (WorldView browser)
 */
 
	private static boolean DEBUG = false;  // diagnostic messages on/off

/**
 * Retrieve value of DEBUG.  When DEBUG is true, System.out.println text messages trace the internals of script operation.
 * Text output appears in the Java Console (CosmoPlayer browser) or in the VRML console (WorldView browser)
 */
 
public static boolean getDEBUG ()
{
	debug ("getDEBUG " + DEBUG);

	return DEBUG;
}

/**
 * Set value of DEBUG.  When DEBUG is true, System.out.println text messages trace the internals of script operation.
 * Text output appears in the Java Console (CosmoPlayer browser) or in the VRML console (WorldView browser)
 */
 
public static void setDEBUG (boolean pDEBUG)
{
	DEBUG = pDEBUG;

	trace ("setDEBUG " + pDEBUG);
}

/**
  Debugging output. Pass in a string, and it gets printed out on the console.
  You can pass in strings such as "foo " + bar.getName().
*/

protected static void debug (String pDiagnostic)
{
  if (DEBUG)
  {
  	System.out.println("BehaviorStreamBuffer: " + pDiagnostic);
  	System.out.flush();
  }
}

/**
 *   Guaranteed debugging output. Pass in a string, and it gets printed out on the console.
 *   You can pass in strings such as "foo " + bar.getName().
 */

protected static void trace (String pDiagnostic)
{
  System.out.println("BehaviorStreamBuffer: " + pDiagnostic);
  System.out.flush();
}

/**
 * A constructor that creates a new unicast socket datagramStreamBuffer.
 */

public BehaviorStreamBuffer(int pDatagramPort)            // INPUT: port we read from
{
	debug ("starting constructor unicast port BehaviorStreamBuffer");
	
	datagramStreamBuffer = new org.web3d.vrtp.net.DatagramStreamBuffer(pDatagramPort);
	datagramStreamBuffer.setDEBUG (DEBUG);

	if (datagramStreamBufferThreadStarted == false)
	{
		try{
			trace ("initialize:  strategy.invokePrivilege(this, \"startDatagramStreamBufferThread\");");
			strategy.invokePrivilege(this, "startDatagramStreamBufferThread");
		}
		catch (Exception catchAllException)
		{
			trace ("initialize:   exception from strategy.invokePrivilege " + catchAllException);
		// 	catchAllException.printStackTrace();
 			}
		debug ("datagramStreamBufferThreadStarted = " + datagramStreamBufferThreadStarted);
	}
	debug ("finished constructor unicast port BehaviorStreamBuffer");

	return;
}

/**
 * A constructor that creates a new unicast socket datagramStreamBuffer on an
 * ephemeral (system-chosen) port
 *
 * If the Netscape security classes are visible, this instantiates itself
 * with an underlying Netscape-specific DatagramStreamBuffer. Otherwise,
 * it uses an generic, security-free datagramStreamBuffer.
 */

public BehaviorStreamBuffer()
{
	debug ("starting constructor unicast ephemeral BehaviorStreamBuffer");

	datagramStreamBuffer = new org.web3d.vrtp.net.DatagramStreamBuffer();
	datagramStreamBuffer.setDEBUG (DEBUG);

	if (datagramStreamBufferThreadStarted == false)
	{
		try{
			trace ("initialize:  strategy.invokePrivilege(this, \"startDatagramStreamBufferThread\");");
			strategy.invokePrivilege(this, "startDatagramStreamBufferThread");
		}
		catch (Exception catchAllException)
		{
			trace ("initialize:   exception from strategy.invokePrivilege " + catchAllException);
		// 	catchAllException.printStackTrace();
 			}
		debug ("datagramStreamBufferThreadStarted = " + datagramStreamBufferThreadStarted);
	}
	debug ("finished constructor unicast ephemeral BehaviorStreamBuffer");

	return;
 }
/**
 *   A constructor that creates a multicast socket datagramStreamBuffer
 * 
 *   If the netscape security classes are visible, this instantiates
 *   itself as a netscape-specific datagramStreamBuffer, able to
 *   bypass the Java sandbox. Otherwise, a generic DSB is used
 *   that has no security calls.
 */

public BehaviorStreamBuffer(String pMulticastAddress, int pDatagramPort)            // INPUT: multicast Address, port we read from
{
	// NOTE: only use with browsers that support java 1.1. Multicast

	debug ("starting constructor multicast BehaviorStreamBuffer");

	datagramStreamBuffer = new org.web3d.vrtp.net.DatagramStreamBuffer(pMulticastAddress, pDatagramPort);
	datagramStreamBuffer.setDEBUG (DEBUG);

/*
	if (datagramStreamBufferThreadStarted == false)
	{
		try{
			trace ("initialize:  strategy.invokePrivilege(this, \"startDatagramStreamBufferThread\");");
			strategy.invokePrivilege(this, "startDatagramStreamBufferThread");
		}
		catch (Exception catchAllException)
		{
			trace ("initialize:   exception from strategy.invokePrivilege " + catchAllException);
		// 	catchAllException.printStackTrace();
 			}
		debug ("datagramStreamBufferThreadStarted = " + datagramStreamBufferThreadStarted);
	}
*/
	debug ("finished multicast BehaviorStreamBuffer constructor");

	return;
}

/**
 * Simple method to launch thread because Microsoft puts security restraints on everything.
 * <P>
 * EntityDispatcher is static; only one copy is shared between all instances
 * of the EspduTransform and other Script nodes.  If it's null the first time through here, create
 * and thread it.
 * <P>
 * This is synchronized, since we may have N EspduTransforms attempting
 * to instantiate themselves at once, all accessing this shared class
 * variable. The synchronization prevents multiple access.
 * <P>
 * This is actually some magic code. Java keeps several mutex locks around,
 * one for every instance of a class and one for the class itself. We
 * can't sychronize on entityDispatcher because that's null the first
 * time through, which will fail silently. We also can't use a java primitive
 * type. So I created a completely arbitrary instance of an object as
 * a class variable, and synchronize on that. It's a standin for the
 * EntityDispatcher in a way.
 */


public void startDatagramStreamBufferThread()
{
  
   if (datagramStreamBufferThreadStarted)
   {
   		trace ("startDatagramStreamBufferThread() invoked again, ignored...");
   		return;
   }
   
	trace ("startDatagramStreamBufferThread() method started...");

 	try
	{
		// Thread used to run the entityDispatcher
		debug ("create entityDispatcher thread... *** IE security crash is here ?? ***");

		Thread datagramStreamBufferThread = new Thread(datagramStreamBuffer);//, "DebuggingDatagramStreamBuffer-" + ClassUtilities.nextSerialNum()
		debug ("datagramStreamBuffer thread starting...");
		datagramStreamBufferThread.start();
		trace (datagramStreamBufferThread.getName() + " thread started, datagramStreamBufferThread() complete");
		datagramStreamBufferThreadStarted = true;
	}
	catch (Exception catchAllException)
	{
		trace ("startDatagramStreamBufferThread: exception\n" + catchAllException);
		trace ("startDatagramStreamBufferThread: attempting to continue without datagramStreamBuffer threaded...");
	}
	return;
}

/**
Creates a BehaviorStreamBuffer with the specified DatagramStream
*/
public BehaviorStreamBuffer(org.web3d.vrtp.net.DatagramStreamBuffer pDatagramStreamBuffer)
{
  datagramStreamBuffer = pDatagramStreamBuffer;
}

/**
 *  Terminate the run loop and shutdown the thread.
 */
public void shutdown ()
{
  trace ("shutdown ();");
  runContinue = false;
  this.suspendReading();
}

/**
 *  Accessor method to provide current multicast address.
 */
public InetAddress getAddress()
{
  return datagramStreamBuffer.getMulticastAddress();
}

/**
 *  Accessor method to provide current multicast ort.
 */
public int getPort()
{
  return datagramStreamBuffer.getDatagramPort();
}

/**
 *  Threading method to read/write via datagramStreamBuffer until shutdown.
 */
public void run()
{
  trace ("commencing datagramStreamBuffer.run ()...");

  datagramStreamBuffer.run();

  trace ("datagramStreamBuffer.run() invocation returned");

  while (runContinue == true) /* spin until told to stop running */
  {
/*
*** commented out because JIT errors result!  apparently not needed anyway.

  	try
  	{
  		while(datagramStreamBuffer.getReadingActive() == true) wait();
  	}
  	catch(InterruptedException ie)
  	{
		trace ("Interrupted exception on wait; problems with suspendReading and co");
	throw new RuntimeException("Problems with suspend/read on DatagramStreamBuffer");
	}
*/
  }
  trace ("completed run () wait loop");
}

/**
Returns a vector of all the PDUs received since the last time we
asked. Queries the underlying DatagramStreamBuffer for this information.
*/

public Vector receivedPdus()
{  
  Vector      newDatagrams,     // raw datagrams we get from the datagramStreamBuffer
              pduVector;        // the above, "promoted" to PDU objects
  Enumeration datagramEnumeration;

  // get datagrams from the underlying datagramStreamBuffer, which is synchronized with itself
  
  //  newDatagrams = datagramStreamBuffer.receivedDatagrams(); // renamed
  newDatagrams = datagramStreamBuffer.getPackets();
  pduVector = new Vector();

  // Step through the vector, translating each datagram into a PDU of whatever type.

  datagramEnumeration = newDatagrams.elements();
  while(datagramEnumeration.hasMoreElements())
  {
    byte                datagramData[] = (byte[])datagramEnumeration.nextElement();
    ProtocolDataUnit    aPdu;

    aPdu = ProtocolDataUnit.byteArrayToPdu(datagramData);
    if(aPdu != null)
    {
        // Save in list
    	pduVector.addElement(aPdu);
    	debug ("pduVector.addElement(aPdu)");
    }
  }

  return pduVector;
} // end of receivedPdus

/**
 * JDK 1.2 version:  set the multicast socket time-to-live, with 15=> local distribution, 63=>regional
 * distribution, 127=>global distribution.
 * <P>
 * Note that browsers are still using JDK 1.1 while command-line applications can use JDK 1.2.
 * <P>
 * see java.net.MulticastSocket.setTTL()
 */

public void setTimeToLive(int pTTL)
{
  datagramStreamBuffer.setTimeToLive(pTTL);
}


/**
 * (Deprecated) JDK 1.1 version:  set the multicast socket time-to-live, with 15=> local distribution, 63=>regional
 * distribution, 127=>global distribution. It seems that there is a bug under NS
 * 4.04 (surprise, surprise) so that setTTL on the mcast socket throws an exception,
 * so you probably shouldn't use this yet.
 * 
 *   JDK 1.2 deprecated the setTTL method on the MulticastSocket class
 *   and replaced it with the setTimeToLive method, which takes an int
 *   instead of a byte. If you have problems compiling under 1.1
 *   this is probably the problem.
 * <P>
 * see java.net.MulticastSocket.setTimeToLive()
 */
  
public void setTTL(byte pTTL)
{
  datagramStreamBuffer.setTTL(pTTL);
}

public synchronized void sendPduMulticast (ProtocolDataUnit pPdu)
{
  if (datagramStreamBuffer.getUsingMulticast())
  {
    this.sendPdu (pPdu, datagramStreamBuffer.getMulticastAddress().getHostAddress(), -1); // port is not relevant
  }
}

public synchronized void sendPdu(ProtocolDataUnit pdu,
                                 String pDestinationHost,
                                 int    pDestinationPort)
{
	ByteArrayOutputStream oStream = null;
	DataOutputStream      dataOutputStream = null;
	DatagramPacket        dgramPacket = null;
	InetAddress           destHostAddress = null;

	debug ("in sendPdu, address " + pDestinationHost + " port " + pDestinationPort);

	try
	 {
	 	destHostAddress = InetAddress.getByName(pDestinationHost);
	 }
	catch(UnknownHostException e)
	 {
	 	System.out.println("cannot resolve address " + pDestinationHost + ", packet not sent");
	 }

	oStream = new ByteArrayOutputStream();
	dataOutputStream = new DataOutputStream(oStream);

	debug ("Preparing to serialize a PDU");

	pdu.serialize(dataOutputStream);

	if(datagramStreamBuffer.getUsingMulticast())
	  dgramPacket = new DatagramPacket(oStream.toByteArray(),
	                                 oStream.size(),
	                                 destHostAddress,
	                                 pDestinationPort);
	else
	  dgramPacket = new DatagramPacket(oStream.toByteArray(),
	                                 oStream.size(),
	                                 destHostAddress,
	                                 pDestinationPort);

	debug ("created datagram packet for sending");

	datagramStreamBuffer.sendDatagram(dgramPacket);

	return;
}

public synchronized void sendDatagram(InetAddress pDestHost, int pPort, String pCommand)
{

  DatagramPacket dgramPacket;
  byte           buf[];

  System.out.println("Sending packet unicast");

  buf = pCommand.getBytes();
  dgramPacket = new DatagramPacket(buf, buf.length, pDestHost, pPort);
  
  datagramStreamBuffer.sendDatagram(dgramPacket);
}

/**
 *   suspend reading in the DatagramStreamBuffer
 */
public synchronized void suspendReading()
{
  datagramStreamBuffer.setReadingActive(false);
}

/**
 * Start reading packets from the datagramStreamBuffer again.
 */

public void resumeReading()
{
  synchronized(this)        // Lets us take ownership of the object monitor
  {
    if(datagramStreamBuffer.getReadingActive() == false)
    {
      try
      {
        notify();       // Wakes up thread in run(), which is executing a wait()
      }
      catch(IllegalMonitorStateException badMonitorNoDonut)
      {
        System.out.println("This thread is not the owner of the monitor; can't resume");
        throw new 
          RuntimeException("Exception in DatagramStreamBuffer; don't own monitor");
    } // catch
    } // if thread suspended
  }   // synchronized

  datagramStreamBuffer.run();
}


/**
 * Closes down sockets nicely
 */

public synchronized void cleanup()
{
  datagramStreamBuffer.cleanup();
}

/**
 *  Finalize method--used to clean up any sockets that are still open
 */

protected synchronized void finalize() throws Throwable
{
  cleanup();
}
  

} // end of class BehaviorStreamBuffer

