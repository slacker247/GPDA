#VRML V2.0 utf8
# X3D-to-VRML-97 XSL translation autogenerated by X3dToVrml97.xsl
# http://www.web3D.org/TaskGroups/x3d/translation/X3dToVrml97.xsl

# [X3D]
# [Header]
# [meta] filename: RadioCommunicationsPrototypes.xml
# [meta] authors: Don Brutzman and Dave Laflam
# [meta] revised: 7 December 2000
# [meta] description: Prototype definitions for ReceiverPdu SignalPdu and TransmitterPdu, all of which share share RadioCommunicationsPduScriptNode class
# [meta] url: http://web.nps.navy.mil/~brutzman/vrtp/mil/navy/nps/dis/RadioCommunicationsPrototypes.xml
# [meta] generator: X3D-Edit, http://www.web3D.org/TaskGroups/x3d/translation/README.X3D-Edit.html
# [Scene]

# ============================================================
PROTO ReceiverPdu [
  # set whichGeometry to -1 for no geometry, 0 for text trace, 1 for default geometry
  exposedField SFInt32 whichGeometry 0 # IS ReceiverPduGeometrySwitch.whichChoice
  # Initialization fields
  field SFTime readInterval 2 # IS ReceiverPduScriptNode.readInterval
  field SFTime writeInterval 0 # IS ReceiverPduScriptNode.writeInterval
  field SFInt32 siteID 14 # IS ReceiverPduScriptNode.siteID
  field SFInt32 applicationID 17 # IS ReceiverPduScriptNode.applicationID
  field SFInt32 entityID 9 # IS ReceiverPduScriptNode.entityID
  field SFString address "224.2.181.145" # IS ReceiverPduScriptNode.address
  field SFInt32 port 62040 # IS ReceiverPduScriptNode.port
  field SFString multicastRelayHost "devo.cs.nps.navy.mil" # IS ReceiverPduScriptNode.multicastRelayHost
  field SFInt32 multicastRelayPort 8010 # IS ReceiverPduScriptNode.multicastRelayPort
  field SFBool rtpHeaderExpected FALSE # IS ReceiverPduScriptNode.rtpHeaderExpected
  field SFBool traceJava FALSE # IS ReceiverPduScriptNode.traceJava
  # Generic events
  eventOut SFBool active # IS ReceiverPduScriptNode.active
  eventOut SFTime timestamp # IS ReceiverPduScriptNode.timestamp
  eventOut SFBool rtpHeaderHeard # IS ReceiverPduScriptNode.rtpHeaderHeard
  # RadioCommunicationsFamily events
  eventOut SFInt32 radioID # IS ReceiverPduScriptNode.radioID
  # ReceiverPdu fields
  eventOut SFFloat receiverPower # IS ReceiverPduScriptNode.receiverPower
  eventOut SFInt32 receiverState # IS ReceiverPduScriptNode.receiverState
  eventOut SFInt32 transmitterSiteID # IS ReceiverPduScriptNode.transmitterSiteID
  eventOut SFInt32 transmitterApplicationID # IS ReceiverPduScriptNode.transmitterApplicationID
  eventOut SFInt32 transmitterEntityID # IS ReceiverPduScriptNode.transmitterEntityID
  eventOut SFInt32 transmitterRadioID # IS ReceiverPduScriptNode.transmitterRadioID
] {
  # First node inside a PrototypeDeclaration is the node type of the ProtoInstance
  DEF ReceiverPduGeometrySwitch Switch {
    whichChoice IS whichGeometry
    choice [
      # whichGeometry 0 is trace text showing PDU values
      Group {
	children [
	  Viewpoint {
	    description "Receiver Pdu Observer"
	    position 0 0 15
	  }
	  NavigationInfo {
	    type [ "EXAMINE" "ANY" ]
	  }
	  Group {
	    children [
	      Transform {
		translation 0 6 0
		children [
		  Shape {
		    geometry Text {
		      string [ "Open Java Console to see PDU trace messages"
			"Netscape..Communicator..Tools..Java Console" ]
		      fontStyle DEF FONT1 FontStyle {
			justify [ "MIDDLE" "BEGIN" ]
			size 0.5
		      }
		    }
		    appearance Appearance {
		      material Material {
			diffuseColor 0 0.4 0.8
		      }
		    }
		  }
		]
	      }
	      Transform {
		translation 0 4.75 0
		children [
		  Shape {
		    geometry Text {
		      string [ "Receiver PDU values" ]
		      fontStyle USE FONT1
		    }
		    # GreenAppearance not DEF-ed and re-USE-d because each PrototypeDeclaration is an independent template. Nodes defined within one PrototypeDeclaration are not visible withing the others, because these are "cookie cutters" rather than instances.visible
		    appearance Appearance {
		      material Material {
			diffuseColor 0 0.8 0.4
		      }
		    }
		  }
		]
	      }
	      Transform {
		translation 0 4 0
		children [
		  Shape {
		    # This text will get updated by the script when eventOut active is set to a value
		    geometry DEF ReceiverOutput1 Text {
		      string [ "Receiver output uninitialized" ]
		      fontStyle USE FONT1
		    }
		    appearance Appearance {
		      material Material {
			diffuseColor 0.8 0.8 0
		      }
		    }
		  }
		]
	      }
	    ]
	  }
	  DEF ReceiverOutputAssembler1 Script {
	    # surprising limit on MFString: 10 strings
	    eventOut MFString messageResult
	    eventIn SFBool active
	    eventIn SFTime timestamp
	    eventIn SFBool rtpHeaderHeard
	    eventIn SFInt32 radioID
	    eventIn SFFloat receiverPower
	    eventIn SFInt32 receiverState
	    eventIn SFInt32 transmitterSiteID
	    eventIn SFInt32 transmitterApplicationID
	    eventIn SFInt32 transmitterEntityID
	    eventIn SFInt32 transmitterRadioID
	    url [ "javascript:
	      
	      
	      
	      
	      
	      
	      
	      
	      
	      
	      
	      function initialize ()
	      {
		value='awaiting PDU';
		messageResult [ 0 ] = 'active=' + value;
		messageResult [ 1 ] = 'timestamp=' + value;
		messageResult [ 2 ] = 'rtpHeaderHeard=' + value;
		messageResult [ 3 ] = 'radioID=' + value;
		messageResult [ 4 ] = 'receiverPower=' + value;
		messageResult [ 5 ] = 'receiverState=' + value;
		messageResult [ 6 ] = 'transmitterSiteID=' + value;
		messageResult [ 7 ] = 'transmitterApplicationID=' + value;
		messageResult [ 8 ] = 'transmitterEntityID=' + value;
		messageResult [ 9 ] = 'transmitterRadioID=' + value;
	      }
	      function active (value, ts) { messageResult [ 0 ] = 'active=' + value; }
	      function timestamp (value, ts) { messageResult [ 1 ] = 'timestamp=' + value; }
	      function rtpHeaderHeard (value, ts) { messageResult [ 2 ] = 'rtpHeaderHeard=' + value; }
	      function radioID (value, ts) { messageResult [ 3 ] = 'radioID=' + value; }
	      function receiverPower (value, ts) { messageResult [ 4 ] = 'receiverPower=' + value; }
	      function receiverState (value, ts) { messageResult [ 5 ] = 'receiverState=' + value; }
	      function transmitterSiteID (value, ts) { messageResult [ 6 ] = 'transmitterSiteID=' + value; }
	      function transmitterApplicationID (value, ts) { messageResult [ 7 ] = 'transmitterApplicationID=' + value; }
	      function transmitterEntityID (value, ts) { messageResult [ 8 ] = 'transmitterEntityID=' + value; }
	      function transmitterRadioID (value, ts) { messageResult [ 9 ] = 'transmitterRadioID=' + value; }
	      " ]
	  }
	]
      }
      # Further geometry representations go here
    ]
  }
  # The Script follows the Switch, since the first node in the file determines the node type of this prototype
  # Fields in the Script are directly mapped to the PrototypeDeclare field-tag interfaces by using the IS construct
  DEF ReceiverPduScriptNode Script {
    # Valid values for radioPduType are ReceiverPdu, SignalPdu and TransmitterPdu
    field SFString radioPduType "ReceiverPdu"
    # Initialization fields
    field SFTime readInterval IS readInterval
    field SFTime writeInterval IS writeInterval
    field SFInt32 siteID IS siteID
    field SFInt32 applicationID IS applicationID
    field SFInt32 entityID IS entityID
    field SFString address IS address
    field SFInt32 port IS port
    field SFString multicastRelayHost IS multicastRelayHost
    field SFInt32 multicastRelayPort IS multicastRelayPort
    field SFBool rtpHeaderExpected IS rtpHeaderExpected
    field SFBool traceJava IS traceJava
    # Generic events
    eventIn SFTime update
    eventOut SFBool active IS active
    eventOut SFTime timestamp IS timestamp
    eventOut SFBool rtpHeaderHeard IS rtpHeaderHeard
    # RadioCommunicationsFamily events
    eventOut SFInt32 radioID IS radioID
    # SignalPdu fields
    eventOut SFFloat receiverPower IS receiverPower
    eventOut SFInt32 receiverState IS receiverState
    eventOut SFInt32 transmitterSiteID IS transmitterSiteID
    eventOut SFInt32 transmitterApplicationID IS transmitterApplicationID
    eventOut SFInt32 transmitterEntityID IS transmitterEntityID
    eventOut SFInt32 transmitterRadioID IS transmitterRadioID
    directOutput TRUE
    mustEvaluate TRUE
    url [ "RadioCommunicationsPduScriptNode.class" ]
  }
  # Clocks stimulate the processEvents() method in the Script code, resulting in DIS PDU reads/writes. The 'update' eventIn is implicit (i.e. no corresponding Java method is needed).
  DEF ReceiverPduReadIntervalClock TimeSensor {
    loop TRUE
  }
  DEF ReceiverPduWriteIntervalClock TimeSensor {
    cycleInterval 0
    enabled FALSE
    loop TRUE
  }
  ROUTE ReceiverPduReadIntervalClock.cycleTime TO ReceiverPduScriptNode.update
  ROUTE ReceiverPduWriteIntervalClock.cycleTime TO ReceiverPduScriptNode.update
  # These ROUTEs connect the PDU Script node to the geometryChoice=0 text output
  ROUTE ReceiverPduScriptNode.active TO ReceiverOutputAssembler1.active
  ROUTE ReceiverPduScriptNode.timestamp TO ReceiverOutputAssembler1.timestamp
  ROUTE ReceiverPduScriptNode.rtpHeaderHeard TO ReceiverOutputAssembler1.rtpHeaderHeard
  ROUTE ReceiverPduScriptNode.radioID TO ReceiverOutputAssembler1.radioID
  ROUTE ReceiverPduScriptNode.receiverPower TO ReceiverOutputAssembler1.receiverPower
  ROUTE ReceiverPduScriptNode.receiverState TO ReceiverOutputAssembler1.receiverState
  ROUTE ReceiverPduScriptNode.transmitterSiteID TO ReceiverOutputAssembler1.transmitterSiteID
  ROUTE ReceiverPduScriptNode.transmitterApplicationID TO ReceiverOutputAssembler1.transmitterApplicationID
  ROUTE ReceiverPduScriptNode.transmitterEntityID TO ReceiverOutputAssembler1.transmitterEntityID
  ROUTE ReceiverPduScriptNode.transmitterRadioID TO ReceiverOutputAssembler1.transmitterRadioID
  ROUTE ReceiverOutputAssembler1.messageResult TO ReceiverOutput1.string
  # ROUTEs for further geometry representations go here
}
# ============================================================
PROTO SignalPdu [
  # set whichGeometry to -1 for no geometry, 0 for text trace, 1 for default geometry
  exposedField SFInt32 whichGeometry 0 # IS SignalPduGeometrySwitch.whichChoice
  # Initialization fields
  field SFTime readInterval 2 # IS SignalPduScriptNode.readInterval
  field SFTime writeInterval 0 # IS SignalPduScriptNode.writeInterval
  field SFInt32 siteID 14 # IS SignalPduScriptNode.siteID
  field SFInt32 applicationID 17 # IS SignalPduScriptNode.applicationID
  field SFInt32 entityID 9 # IS SignalPduScriptNode.entityID
  field SFString address "224.2.181.145" # IS SignalPduScriptNode.address
  field SFInt32 port 62040 # IS SignalPduScriptNode.port
  field SFString multicastRelayHost "devo.cs.nps.navy.mil" # IS SignalPduScriptNode.multicastRelayHost
  field SFInt32 multicastRelayPort 8010 # IS SignalPduScriptNode.multicastRelayPort
  field SFBool rtpHeaderExpected FALSE # IS SignalPduScriptNode.rtpHeaderExpected
  field SFBool traceJava FALSE # IS SignalPduScriptNode.traceJava
  # Generic events
  eventOut SFBool active # IS SignalPduScriptNode.active
  eventOut SFTime timestamp # IS SignalPduScriptNode.timestamp
  eventOut SFBool rtpHeaderHeard # IS SignalPduScriptNode.rtpHeaderHeard
  # RadioCommunicationsFamily events
  eventOut SFInt32 radioID # IS SignalPduScriptNode.radioID
  # SignalPdu fields
  eventOut SFInt32 encodingScheme # IS SignalPduScriptNode.encodingScheme
  eventOut SFInt32 tdlType # IS SignalPduScriptNode.tdlType
  eventOut SFInt32 sampleRate # IS SignalPduScriptNode.sampleRate
  eventOut SFInt32 samples # IS SignalPduScriptNode.samples
  eventOut SFInt32 dataLength # IS SignalPduScriptNode.dataLength
  eventOut SFInt32 data00 # IS SignalPduScriptNode.data00
  eventOut SFInt32 data01 # IS SignalPduScriptNode.data01
  eventOut SFInt32 data02 # IS SignalPduScriptNode.data02
  eventOut SFInt32 data03 # IS SignalPduScriptNode.data03
  eventOut SFInt32 data04 # IS SignalPduScriptNode.data04
  eventOut SFInt32 data05 # IS SignalPduScriptNode.data05
  eventOut SFInt32 data06 # IS SignalPduScriptNode.data06
  eventOut SFInt32 data07 # IS SignalPduScriptNode.data07
  eventOut SFInt32 data08 # IS SignalPduScriptNode.data08
  eventOut SFInt32 data09 # IS SignalPduScriptNode.data09
  eventOut SFInt32 data10 # IS SignalPduScriptNode.data10
] {
  # First node inside a PrototypeDeclaration is the node type of the ProtoInstance
  DEF SignalPduGeometrySwitch Switch {
    whichChoice IS whichGeometry
    choice [
      # whichGeometry 0 is trace text showing PDU values
      Group {
	children [
	  Viewpoint {
	    description "Signal Pdu Observer"
	    position 0 0 15
	  }
	  NavigationInfo {
	    type [ "EXAMINE" "ANY" ]
	  }
	  Group {
	    children [
	      Transform {
		translation 0 6 0
		children [
		  Shape {
		    geometry Text {
		      string [ "Open Java Console to see PDU trace messages"
			"Netscape..Communicator..Tools..Java Console" ]
		      fontStyle DEF FONT2 FontStyle {
			justify [ "MIDDLE" "BEGIN" ]
			size 0.5
		      }
		    }
		    appearance Appearance {
		      material Material {
			diffuseColor 0 0.4 0.8
		      }
		    }
		  }
		]
	      }
	      Transform {
		translation 0 4.75 0
		children [
		  Shape {
		    geometry Text {
		      string [ "Signal PDU values" ]
		      fontStyle USE FONT2
		    }
		    appearance Appearance {
		      material Material {
			diffuseColor 0 0.8 0.4
		      }
		    }
		  }
		]
	      }
	      Transform {
		translation 0 4 0
		children [
		  Shape {
		    # This text will get updated by the script when eventOut active is set to a value
		    geometry DEF SignalOutput1 Text {
		      string [ "Signal Output1 unset" ]
		      fontStyle USE FONT2
		    }
		    appearance DEF YellowAppearance2 Appearance {
		      material Material {
			diffuseColor 0.8 0.8 0
		      }
		    }
		  }
		]
	      }
	      Transform {
		translation 0 -1 0
		children [
		  Shape {
		    geometry DEF SignalOutput2 Text {
		      string [ "Signal Output2 unset" ]
		      fontStyle USE FONT2
		    }
		    appearance USE YellowAppearance2
		  }
		]
	      }
	    ]
	  }
	  DEF SignalOutputAssembler1 Script {
	    # surprising limit on MFString: 10 strings
	    eventOut MFString messageResult
	    eventIn SFBool active
	    eventIn SFTime timestamp
	    eventIn SFBool rtpHeaderHeard
	    eventIn SFInt32 radioID
	    eventIn SFInt32 encodingScheme
	    eventIn SFInt32 tdlType
	    eventIn SFInt32 sampleRate
	    eventIn SFInt32 samples
	    eventIn SFInt32 dataLength
	    eventIn SFInt32 data00
	    url [ "javascript:
	      
	      
	      
	      
	      
	      
	      
	      
	      
	      
	      
	      function initialize ()
	      {
		value='awaiting PDU';
		messageResult [ 0 ] = 'active=' + value;
		messageResult [ 1 ] = 'timestamp=' + value;
		messageResult [ 2 ] = 'rtpHeaderHeard=' + value;
		messageResult [ 3 ] = 'radioID=' + value;
		messageResult [ 4 ] = 'encodingScheme=' + value;
		messageResult [ 5 ] = 'tdlType=' + value;
		messageResult [ 6 ] = 'sampleRate=' + value;
		messageResult [ 7 ] = 'samples=' + value;
		messageResult [ 8 ] = 'dataLength=' + value;
		messageResult [ 9 ] = 'data00=' + value;
	      }
	      function active (value, ts) { messageResult [ 0 ] = 'active=' + value; }
	      function timestamp (value, ts) { messageResult [ 1 ] = 'timestamp=' + value; }
	      function rtpHeaderHeard (value, ts) { messageResult [ 2 ] = 'rtpHeaderHeard=' + value; }
	      function radioID (value, ts) { messageResult [ 3 ] = 'radioID=' + value; }
	      function encodingScheme (value, ts) { messageResult [ 4 ] = 'encodingScheme=' + value; }
	      function tdlType (value, ts) { messageResult [ 5 ] = 'tdlType=' + value; }
	      function sampleRate (value, ts) { messageResult [ 6 ] = 'sampleRate=' + value; }
	      function samples (value, ts) { messageResult [ 7 ] = 'samples=' + value; }
	      function dataLength (value, ts) { messageResult [ 8 ] = 'dataLength=' + value; }
	      function data00 (value, ts) { messageResult [ 9 ] = 'data00=' + value; }
	      " ]
	  }
	  DEF SignalOutputAssembler2 Script {
	    eventOut MFString messageResult
	    eventIn SFInt32 data01
	    eventIn SFInt32 data02
	    eventIn SFInt32 data03
	    eventIn SFInt32 data04
	    eventIn SFInt32 data05
	    eventIn SFInt32 data06
	    eventIn SFInt32 data07
	    eventIn SFInt32 data08
	    eventIn SFInt32 data09
	    eventIn SFInt32 data10
	    url [ "javascript:
	      
	      
	      
	      
	      
	      
	      
	      
	      
	      
	      
	      
	      function initialize ()
	      {
		messageResult [ 0 ] = 'data01=' + value;
		messageResult [ 1 ] = 'data02=' + value;
		messageResult [ 2 ] = 'data03=' + value;
		messageResult [ 3 ] = 'data04=' + value;
		messageResult [ 4 ] = 'data05=' + value;
		messageResult [ 5 ] = 'data06=' + value;
		messageResult [ 6 ] = 'data07=' + value;
		messageResult [ 7 ] = 'data08=' + value;
		messageResult [ 8 ] = 'data09=' + value;
		messageResult [ 9 ] = 'data10=' + value;
	      }
	      function data01 (value, ts) { messageResult [ 0 ] = 'data01=' + value; }
	      function data02 (value, ts) { messageResult [ 1 ] = 'data02=' + value; }
	      function data03 (value, ts) { messageResult [ 2 ] = 'data03=' + value; }
	      function data04 (value, ts) { messageResult [ 3 ] = 'data04=' + value; }
	      function data05 (value, ts) { messageResult [ 4 ] = 'data05=' + value; }
	      function data06 (value, ts) { messageResult [ 5 ] = 'data06=' + value; }
	      function data07 (value, ts) { messageResult [ 6 ] = 'data07=' + value; }
	      function data08 (value, ts) { messageResult [ 7 ] = 'data08=' + value; }
	      function data09 (value, ts) { messageResult [ 8 ] = 'data09=' + value; }
	      function data10 (value, ts) { messageResult [ 9 ] = 'data10=' + value; }
	      
	      " ]
	  }
	]
      }
      # Further geometry representations go here
    ]
  }
  # The Script follows the Switch, since the first node in the file determines the node type of this prototype
  # Fields in the Script are directly mapped to the PrototypeDeclare field-tag interfaces by using the IS construct
  DEF SignalPduScriptNode Script {
    # Valid values for radioPduType are ReceiverPdu, SignalPdu and TransmitterPdu
    field SFString radioPduType "SignalPdu"
    # Initialization fields
    field SFTime readInterval IS readInterval
    field SFTime writeInterval IS writeInterval
    field SFInt32 siteID IS siteID
    field SFInt32 applicationID IS applicationID
    field SFInt32 entityID IS entityID
    field SFString address IS address
    field SFInt32 port IS port
    field SFString multicastRelayHost IS multicastRelayHost
    field SFInt32 multicastRelayPort IS multicastRelayPort
    field SFBool rtpHeaderExpected IS rtpHeaderExpected
    field SFBool traceJava IS traceJava
    # Generic events
    eventIn SFTime update
    eventOut SFBool active IS active
    eventOut SFTime timestamp IS timestamp
    eventOut SFBool rtpHeaderHeard IS rtpHeaderHeard
    # RadioCommunicationsFamily events
    eventOut SFInt32 radioID IS radioID
    # SignalPdu fields
    eventOut SFInt32 encodingScheme IS encodingScheme
    eventOut SFInt32 tdlType IS tdlType
    eventOut SFInt32 sampleRate IS sampleRate
    eventOut SFInt32 samples IS samples
    eventOut SFInt32 dataLength IS dataLength
    eventOut SFInt32 data00 IS data00
    eventOut SFInt32 data01 IS data01
    eventOut SFInt32 data02 IS data02
    eventOut SFInt32 data03 IS data03
    eventOut SFInt32 data04 IS data04
    eventOut SFInt32 data05 IS data05
    eventOut SFInt32 data06 IS data06
    eventOut SFInt32 data07 IS data07
    eventOut SFInt32 data08 IS data08
    eventOut SFInt32 data09 IS data09
    eventOut SFInt32 data10 IS data10
    directOutput TRUE
    mustEvaluate TRUE
    url [ "RadioCommunicationsPduScriptNode.class" ]
  }
  # Clocks stimulate the processEvents() method in the Script code, resulting in DIS PDU reads/writes. The 'update' eventIn is implicit (i.e. no corresponding Java method is needed).
  DEF SignalPduReadIntervalClock TimeSensor {
    loop TRUE
  }
  DEF SignalPduWriteIntervalClock TimeSensor {
    cycleInterval 0
    enabled FALSE
    loop TRUE
  }
  ROUTE SignalPduReadIntervalClock.cycleTime TO SignalPduScriptNode.update
  ROUTE SignalPduWriteIntervalClock.cycleTime TO SignalPduScriptNode.update
  # These ROUTEs connect the PDU Script node to the geometryChoice=0 text output
  ROUTE SignalPduScriptNode.active TO SignalOutputAssembler1.active
  ROUTE SignalPduScriptNode.timestamp TO SignalOutputAssembler1.timestamp
  ROUTE SignalPduScriptNode.rtpHeaderHeard TO SignalOutputAssembler1.rtpHeaderHeard
  ROUTE SignalPduScriptNode.radioID TO SignalOutputAssembler1.radioID
  ROUTE SignalPduScriptNode.encodingScheme TO SignalOutputAssembler1.encodingScheme
  ROUTE SignalPduScriptNode.tdlType TO SignalOutputAssembler1.tdlType
  ROUTE SignalPduScriptNode.sampleRate TO SignalOutputAssembler1.sampleRate
  ROUTE SignalPduScriptNode.samples TO SignalOutputAssembler1.samples
  ROUTE SignalPduScriptNode.dataLength TO SignalOutputAssembler1.dataLength
  ROUTE SignalPduScriptNode.data00 TO SignalOutputAssembler1.data00
  ROUTE SignalPduScriptNode.data01 TO SignalOutputAssembler2.data01
  ROUTE SignalPduScriptNode.data02 TO SignalOutputAssembler2.data02
  ROUTE SignalPduScriptNode.data03 TO SignalOutputAssembler2.data03
  ROUTE SignalPduScriptNode.data04 TO SignalOutputAssembler2.data04
  ROUTE SignalPduScriptNode.data05 TO SignalOutputAssembler2.data05
  ROUTE SignalPduScriptNode.data06 TO SignalOutputAssembler2.data06
  ROUTE SignalPduScriptNode.data07 TO SignalOutputAssembler2.data07
  ROUTE SignalPduScriptNode.data08 TO SignalOutputAssembler2.data08
  ROUTE SignalPduScriptNode.data09 TO SignalOutputAssembler2.data09
  ROUTE SignalPduScriptNode.data10 TO SignalOutputAssembler2.data10
  ROUTE SignalOutputAssembler1.messageResult TO SignalOutput1.string
  ROUTE SignalOutputAssembler2.messageResult TO SignalOutput2.string
  # ROUTEs for further geometry representations go here
}
# ============================================================
PROTO TransmitterPdu [
  # set whichGeometry to -1 for no geometry, 0 for text trace, 1 for default geometry
  exposedField SFInt32 whichGeometry 0 # IS TransmitterPduGeometrySwitch.whichChoice
  # Initialization fields
  field SFTime readInterval 2 # IS TransmitterPduScriptNode.readInterval
  field SFTime writeInterval 0 # IS TransmitterPduScriptNode.writeInterval
  field SFInt32 siteID 14 # IS TransmitterPduScriptNode.siteID
  field SFInt32 applicationID 17 # IS TransmitterPduScriptNode.applicationID
  field SFInt32 entityID 9 # IS TransmitterPduScriptNode.entityID
  field SFString address "224.2.181.145" # IS TransmitterPduScriptNode.address
  field SFInt32 port 62040 # IS TransmitterPduScriptNode.port
  field SFString multicastRelayHost "devo.cs.nps.navy.mil" # IS TransmitterPduScriptNode.multicastRelayHost
  field SFInt32 multicastRelayPort 8010 # IS TransmitterPduScriptNode.multicastRelayPort
  field SFBool rtpHeaderExpected FALSE # IS TransmitterPduScriptNode.rtpHeaderExpected
  field SFBool traceJava FALSE # IS TransmitterPduScriptNode.traceJava
  # Generic events
  eventOut SFBool active # IS TransmitterPduScriptNode.active
  eventOut SFTime timestamp # IS TransmitterPduScriptNode.timestamp
  eventOut SFBool rtpHeaderHeard # IS TransmitterPduScriptNode.rtpHeaderHeard
  # RadioCommunicationsFamily events
  eventOut SFInt32 radioID # IS TransmitterPduScriptNode.radioID
  # TransmitterPdu fields
  eventOut SFVec3f antennaLocation # IS TransmitterPduScriptNode.antennaLocation
  eventOut SFInt32 antennaPatternLength # IS TransmitterPduScriptNode.antennaPatternLength
  eventOut SFInt32 antennaPatternType # IS TransmitterPduScriptNode.antennaPatternType
  eventOut SFInt32 cryptoKeyId # IS TransmitterPduScriptNode.cryptoKeyId
  eventOut SFInt32 cryptoSytem # IS TransmitterPduScriptNode.cryptoSytem
  eventOut SFInt32 frequency # IS TransmitterPduScriptNode.frequency
  eventOut SFInt32 inputSource # IS TransmitterPduScriptNode.inputSource
  eventOut SFInt32 lengthOfModulationParameters # IS TransmitterPduScriptNode.lengthOfModulationParameters
  eventOut SFInt32 modulationTypeDetail # IS TransmitterPduScriptNode.modulationTypeDetail
  eventOut SFInt32 modulationTypeMajor # IS TransmitterPduScriptNode.modulationTypeMajor
  eventOut SFInt32 modulationTypeSpreadSpectrum # IS TransmitterPduScriptNode.modulationTypeSpreadSpectrum
  eventOut SFInt32 modulationTypeSystem # IS TransmitterPduScriptNode.modulationTypeSystem
  eventOut SFInt32 power # IS TransmitterPduScriptNode.power
  eventOut SFInt32 radioEntityTypeCategory # IS TransmitterPduScriptNode.radioEntityTypeCategory
  eventOut SFInt32 radioEntityTypeCountry # IS TransmitterPduScriptNode.radioEntityTypeCountry
  eventOut SFInt32 radioEntityTypeDomain # IS TransmitterPduScriptNode.radioEntityTypeDomain
  eventOut SFInt32 radioEntityTypeKind # IS TransmitterPduScriptNode.radioEntityTypeKind
  eventOut SFInt32 radioEntityTypeNomenclature # IS TransmitterPduScriptNode.radioEntityTypeNomenclature
  eventOut SFInt32 radioEntityTypeNomenclatureVersion # IS TransmitterPduScriptNode.radioEntityTypeNomenclatureVersion
  eventOut SFVec3f relativeAntennaLocation # IS TransmitterPduScriptNode.relativeAntennaLocation
  eventOut SFInt32 transmitFrequencyBandwidth # IS TransmitterPduScriptNode.transmitFrequencyBandwidth
  eventOut SFInt32 transmitState # IS TransmitterPduScriptNode.transmitState
] {
  # First node inside a PrototypeDeclaration is the node type of the ProtoInstance
  DEF TransmitterPduGeometrySwitch Switch {
    whichChoice IS whichGeometry
    choice [
      # whichGeometry 0 is trace text showing PDU values
      Group {
	children [
	  Viewpoint {
	    description "Transmitter Pdu Observer"
	    position 0 0 15
	  }
	  NavigationInfo {
	    type [ "EXAMINE" "ANY" ]
	  }
	  Group {
	    children [
	      Transform {
		translation 0 6 0
		children [
		  Shape {
		    geometry Text {
		      string [ "Open Java Console to see PDU trace messages"
			"Netscape..Communicator..Tools..Java Console" ]
		      fontStyle DEF FONT3 FontStyle {
			justify [ "MIDDLE" "BEGIN" ]
			size 0.5
		      }
		    }
		    appearance Appearance {
		      material Material {
			diffuseColor 0 0.4 0.8
		      }
		    }
		  }
		]
	      }
	      Transform {
		translation 0 4.75 0
		children [
		  Shape {
		    geometry Text {
		      string [ "Transmitter PDU values" ]
		      fontStyle USE FONT3
		    }
		    appearance Appearance {
		      material Material {
			diffuseColor 0 0.8 0.4
		      }
		    }
		  }
		]
	      }
	      Transform {
		translation 0 4 0
		children [
		  Shape {
		    # This text will get updated by the script when eventOut active is set to a value
		    geometry DEF TransmitterOutput1 Text {
		      string [ "Transmitter Output1 unset" ]
		      fontStyle USE FONT3
		    }
		    appearance DEF YellowAppearance3 Appearance {
		      material Material {
			diffuseColor 0.8 0.8 0
		      }
		    }
		  }
		]
	      }
	      Transform {
		translation 0 -1 0
		children [
		  Shape {
		    geometry DEF TransmitterOutput2 Text {
		      string [ "Transmitter Output2 unset" ]
		      fontStyle USE FONT3
		    }
		    appearance USE YellowAppearance3
		  }
		]
	      }
	      Transform {
		translation 0 -6 0
		children [
		  Shape {
		    geometry DEF TransmitterOutput3 Text {
		      string [ "Transmitter Output2 unset" ]
		      fontStyle USE FONT3
		    }
		    appearance USE YellowAppearance3
		  }
		]
	      }
	    ]
	  }
	  DEF TransmitterOutputAssembler1 Script {
	    # surprising limit on MFString: 10 strings
	    eventOut MFString messageResult
	    eventIn SFBool active
	    eventIn SFTime timestamp
	    eventIn SFBool rtpHeaderHeard
	    eventIn SFInt32 radioID
	    eventIn SFVec3f antennaLocation
	    eventIn SFInt32 antennaPatternLength
	    eventIn SFInt32 antennaPatternType
	    eventIn SFInt32 cryptoKeyId
	    eventIn SFInt32 cryptoSytem
	    eventIn SFInt32 frequency
	    url [ "javascript:
	      
	      
	      
	      
	      
	      
	      
	      
	      
	      
	      
	      function initialize ()
	      {
		value='awaiting PDU';
		messageResult [ 0 ] = 'active=' + value;
		messageResult [ 1 ] = 'timestamp=' + value;
		messageResult [ 2 ] = 'rtpHeaderHeard=' + value;
		messageResult [ 3 ] = 'radioID=' + value;
		messageResult [ 4 ] = 'antennaLocation=' + value;
		messageResult [ 5 ] = 'antennaPatternLength=' + value;
		messageResult [ 6 ] = 'antennaPatternType=' + value;
		messageResult [ 7 ] = 'cryptoKeyId=' + value;
		messageResult [ 8 ] = 'cryptoSytem=' + value;
		messageResult [ 9 ] = 'frequency=' + value;
	      }
	      function active (value, ts) { messageResult [ 0 ] = 'active=' + value; }
	      function timestamp (value, ts) { messageResult [ 1 ] = 'timestamp=' + value; }
	      function rtpHeaderHeard (value, ts) { messageResult [ 2 ] = 'rtpHeaderHeard=' + value; }
	      function radioID (value, ts) { messageResult [ 3 ] = 'radioID=' + value; }
	      function antennaLocation (value, ts) { messageResult [ 4 ] = 'antennaLocation=' + value; }
	      function antennaPatternLength (value, ts) { messageResult [ 5 ] = 'antennaPatternLength=' + value; }
	      function antennaPatternType (value, ts) { messageResult [ 6 ] = 'antennaPatternType=' + value; }
	      function cryptoKeyId (value, ts) { messageResult [ 7 ] = 'cryptoKeyId=' + value; }
	      function cryptoSytem (value, ts) { messageResult [ 8 ] = 'cryptoSytem=' + value; }
	      function frequency (value, ts) { messageResult [ 9 ] = 'frequency=' + value; }
	      " ]
	  }
	  DEF TransmitterOutputAssembler2 Script {
	    eventOut MFString messageResult
	    eventIn SFInt32 inputSource
	    eventIn SFInt32 lengthOfModulationParameters
	    eventIn SFInt32 modulationTypeDetail
	    eventIn SFInt32 modulationTypeMajor
	    eventIn SFInt32 modulationTypeSpreadSpectrum
	    eventIn SFInt32 modulationTypeSystem
	    eventIn SFInt32 power
	    eventIn SFInt32 radioEntityTypeCategory
	    eventIn SFInt32 radioEntityTypeCountry
	    eventIn SFInt32 radioEntityTypeDomain
	    url [ "javascript:
	      
	      
	      
	      
	      
	      
	      
	      
	      
	      
	      
	      
	      function initialize ()
	      {
		messageResult [ 0 ] = 'inputSource=' + value;
		messageResult [ 1 ] = 'lengthOfModulationParameters=' + value;
		messageResult [ 2 ] = 'modulationTypeDetail=' + value;
		messageResult [ 3 ] = 'modulationTypeMajor=' + value;
		messageResult [ 4 ] = 'modulationTypeSpreadSpectrum=' + value;
		messageResult [ 5 ] = 'modulationTypeSystem=' + value;
		messageResult [ 6 ] = 'power=' + value;
		messageResult [ 7 ] = 'radioEntityTypeCategory=' + value;
		messageResult [ 8 ] = 'radioEntityTypeCountry=' + value;
		messageResult [ 9 ] = 'radioEntityTypeDomain=' + value;
	      }
	      function inputSource (value, ts) { messageResult [ 0 ] = 'inputSource=' + value; }
	      function lengthOfModulationParameters (value, ts) { messageResult [ 1 ] = 'lengthOfModulationParameters=' + value; }
	      function modulationTypeDetail (value, ts) { messageResult [ 2 ] = 'modulationTypeDetail=' + value; }
	      function modulationTypeMajor (value, ts) { messageResult [ 3 ] = 'modulationTypeMajor=' + value; }
	      function modulationTypeSpreadSpectrum (value, ts) { messageResult [ 4 ] = 'modulationTypeSpreadSpectrum=' + value; }
	      function modulationTypeSystem (value, ts) { messageResult [ 5 ] = 'modulationTypeSystem=' + value; }
	      function power (value, ts) { messageResult [ 6 ] = 'power=' + value; }
	      function radioEntityTypeCategory (value, ts) { messageResult [ 7 ] = 'radioEntityTypeCategory=' + value; }
	      function radioEntityTypeCountry (value, ts) { messageResult [ 8 ] = 'radioEntityTypeCountry=' + value; }
	      function radioEntityTypeDomain (value, ts) { messageResult [ 9 ] = 'radioEntityTypeDomain=' + value; }
	      
	      " ]
	  }
	  DEF TransmitterOutputAssembler3 Script {
	    eventOut MFString messageResult
	    eventIn SFInt32 radioEntityTypeKind
	    eventIn SFInt32 radioEntityTypeNomenclature
	    eventIn SFInt32 radioEntityTypeNomenclatureVersion
	    eventIn SFVec3f relativeAntennaLocation
	    eventIn SFInt32 transmitFrequencyBandwidth
	    eventIn SFInt32 transmitState
	    url [ "javascript:
	      
	      
	      
	      
	      
	      
	      
	      
	      function initialize ()
	      {
		messageResult [ 0 ] = 'radioEntityTypeKind=' + value;
		messageResult [ 1 ] = 'radioEntityTypeNomenclature=' + value;
		messageResult [ 2 ] = 'radioEntityTypeNomenclatureVersion=' + value;
		messageResult [ 3 ] = 'relativeAntennaLocation=' + value;
		messageResult [ 4 ] = 'transmitFrequencyBandwidth=' + value;
		messageResult [ 5 ] = 'transmitState=' + value;
	      }
	      function radioEntityTypeKind (value, ts) { messageResult [ 0 ] = 'radioEntityTypeKind=' + value; }
	      function radioEntityTypeNomenclature (value, ts) { messageResult [ 1 ] = 'radioEntityTypeNomenclature=' + value; }
	      function radioEntityTypeNomenclatureVersion (value, ts) { messageResult [ 2 ] = 'radioEntityTypeNomenclatureVersion=' + value; }
	      function relativeAntennaLocation (value, ts) { messageResult [ 3 ] = 'relativeAntennaLocation=' + value; }
	      function transmitFrequencyBandwidth (value, ts) { messageResult [ 4 ] = 'transmitFrequencyBandwidth=' + value; }
	      function transmitState (value, ts) { messageResult [ 5 ] = 'transmitState=' + value; }
	      
	      " ]
	  }
	]
      }
      # Further geometry representations go here
    ]
  }
  # The Script follows the Switch, since the first node in the file determines the node type of this prototype
  # Fields in the Script are directly mapped to the PrototypeDeclare field-tag interfaces by using the IS construct
  DEF TransmitterPduScriptNode Script {
    # Valid values for radioPduType are ReceiverPdu, SignalPdu and TransmitterPdu
    field SFString radioPduType "TransmitterPdu"
    # Initialization fields
    field SFTime readInterval IS readInterval
    field SFTime writeInterval IS writeInterval
    field SFInt32 siteID IS siteID
    field SFInt32 applicationID IS applicationID
    field SFInt32 entityID IS entityID
    field SFString address IS address
    field SFInt32 port IS port
    field SFString multicastRelayHost IS multicastRelayHost
    field SFInt32 multicastRelayPort IS multicastRelayPort
    field SFBool rtpHeaderExpected IS rtpHeaderExpected
    field SFBool traceJava IS traceJava
    # Generic events
    eventIn SFTime update
    eventOut SFBool active IS active
    eventOut SFTime timestamp IS timestamp
    eventOut SFBool rtpHeaderHeard IS rtpHeaderHeard
    # RadioCommunicationsFamily events
    eventOut SFInt32 radioID IS radioID
    # SignalPdu fields
    eventOut SFVec3f antennaLocation IS antennaLocation
    eventOut SFInt32 antennaPatternLength IS antennaPatternLength
    eventOut SFInt32 antennaPatternType IS antennaPatternType
    eventOut SFInt32 cryptoKeyId IS cryptoKeyId
    eventOut SFInt32 cryptoSytem IS cryptoSytem
    eventOut SFInt32 frequency IS frequency
    eventOut SFInt32 inputSource IS inputSource
    eventOut SFInt32 lengthOfModulationParameters IS lengthOfModulationParameters
    eventOut SFInt32 modulationTypeDetail IS modulationTypeDetail
    eventOut SFInt32 modulationTypeMajor IS modulationTypeMajor
    eventOut SFInt32 modulationTypeSpreadSpectrum IS modulationTypeSpreadSpectrum
    eventOut SFInt32 modulationTypeSystem IS modulationTypeSystem
    eventOut SFInt32 power IS power
    eventOut SFInt32 radioEntityTypeCategory IS radioEntityTypeCategory
    eventOut SFInt32 radioEntityTypeCountry IS radioEntityTypeCountry
    eventOut SFInt32 radioEntityTypeDomain IS radioEntityTypeDomain
    eventOut SFInt32 radioEntityTypeKind IS radioEntityTypeKind
    eventOut SFInt32 radioEntityTypeNomenclature IS radioEntityTypeNomenclature
    eventOut SFInt32 radioEntityTypeNomenclatureVersion IS radioEntityTypeNomenclatureVersion
    eventOut SFVec3f relativeAntennaLocation IS relativeAntennaLocation
    eventOut SFInt32 transmitFrequencyBandwidth IS transmitFrequencyBandwidth
    eventOut SFInt32 transmitState IS transmitState
    directOutput TRUE
    mustEvaluate TRUE
    url [ "RadioCommunicationsPduScriptNode.class" ]
  }
  # Clocks stimulate the processEvents() method in the Script code, resulting in DIS PDU reads/writes. The 'update' eventIn is implicit (i.e. no corresponding Java method is needed).
  DEF TransmitterPduReadIntervalClock TimeSensor {
    loop TRUE
  }
  DEF TransmitterPduWriteIntervalClock TimeSensor {
    cycleInterval 0
    enabled FALSE
    loop TRUE
  }
  ROUTE TransmitterPduReadIntervalClock.cycleTime TO TransmitterPduScriptNode.update
  ROUTE TransmitterPduWriteIntervalClock.cycleTime TO TransmitterPduScriptNode.update
  # These ROUTEs connect the PDU Script node to the geometryChoice=0 text output
  ROUTE TransmitterPduScriptNode.active TO TransmitterOutputAssembler1.active
  ROUTE TransmitterPduScriptNode.timestamp TO TransmitterOutputAssembler1.timestamp
  ROUTE TransmitterPduScriptNode.rtpHeaderHeard TO TransmitterOutputAssembler1.rtpHeaderHeard
  ROUTE TransmitterPduScriptNode.radioID TO TransmitterOutputAssembler1.radioID
  ROUTE TransmitterPduScriptNode.antennaLocation TO TransmitterOutputAssembler1.antennaLocation
  ROUTE TransmitterPduScriptNode.antennaPatternLength TO TransmitterOutputAssembler1.antennaPatternLength
  ROUTE TransmitterPduScriptNode.antennaPatternType TO TransmitterOutputAssembler1.antennaPatternType
  ROUTE TransmitterPduScriptNode.cryptoKeyId TO TransmitterOutputAssembler1.cryptoKeyId
  ROUTE TransmitterPduScriptNode.cryptoSytem TO TransmitterOutputAssembler1.cryptoSytem
  ROUTE TransmitterPduScriptNode.frequency TO TransmitterOutputAssembler1.frequency
  ROUTE TransmitterPduScriptNode.inputSource TO TransmitterOutputAssembler2.inputSource
  ROUTE TransmitterPduScriptNode.lengthOfModulationParameters TO TransmitterOutputAssembler2.lengthOfModulationParameters
  ROUTE TransmitterPduScriptNode.modulationTypeDetail TO TransmitterOutputAssembler2.modulationTypeDetail
  ROUTE TransmitterPduScriptNode.modulationTypeMajor TO TransmitterOutputAssembler2.modulationTypeMajor
  ROUTE TransmitterPduScriptNode.modulationTypeSpreadSpectrum TO TransmitterOutputAssembler2.modulationTypeSpreadSpectrum
  ROUTE TransmitterPduScriptNode.modulationTypeSystem TO TransmitterOutputAssembler2.modulationTypeSystem
  ROUTE TransmitterPduScriptNode.power TO TransmitterOutputAssembler2.power
  ROUTE TransmitterPduScriptNode.radioEntityTypeCategory TO TransmitterOutputAssembler2.radioEntityTypeCategory
  ROUTE TransmitterPduScriptNode.radioEntityTypeCountry TO TransmitterOutputAssembler2.radioEntityTypeCountry
  ROUTE TransmitterPduScriptNode.radioEntityTypeDomain TO TransmitterOutputAssembler2.radioEntityTypeDomain
  ROUTE TransmitterPduScriptNode.radioEntityTypeKind TO TransmitterOutputAssembler3.radioEntityTypeKind
  ROUTE TransmitterPduScriptNode.radioEntityTypeNomenclature TO TransmitterOutputAssembler3.radioEntityTypeNomenclature
  ROUTE TransmitterPduScriptNode.radioEntityTypeNomenclatureVersion TO TransmitterOutputAssembler3.radioEntityTypeNomenclatureVersion
  ROUTE TransmitterPduScriptNode.relativeAntennaLocation TO TransmitterOutputAssembler3.relativeAntennaLocation
  ROUTE TransmitterPduScriptNode.transmitFrequencyBandwidth TO TransmitterOutputAssembler3.transmitFrequencyBandwidth
  ROUTE TransmitterPduScriptNode.transmitState TO TransmitterOutputAssembler3.transmitState
  ROUTE TransmitterOutputAssembler1.messageResult TO TransmitterOutput1.string
  ROUTE TransmitterOutputAssembler2.messageResult TO TransmitterOutput2.string
  ROUTE TransmitterOutputAssembler3.messageResult TO TransmitterOutput3.string
  # ROUTEs for further geometry representations go here
}
# ============================================================
# Default content
Group {
  children [
    Transform {
      translation -15 15 0
      children [
	ReceiverPdu {
	}
      ]
    }
    Transform {
      translation -15 -15 0
      children [
	ReceiverPdu {
	  active FALSE
	  writeInterval 0
	  readInterval 1
	  rtpHeaderExpected FALSE
	  traceJava FALSE
	}
      ]
    }
    Transform {
      translation 0 15 0
      children [
	SignalPdu {
	}
      ]
    }
    Transform {
      translation 0 -15 0
      children [
	SignalPdu {
	  active FALSE
	  writeInterval 0
	  readInterval 1
	  rtpHeaderExpected FALSE
	  traceJava FALSE
	}
      ]
    }
    Transform {
      translation 15 15 0
      children [
	TransmitterPdu {
	}
      ]
    }
    Transform {
      translation 15 -15 0
      children [
	TransmitterPdu {
	  writeInterval 0
	  active FALSE
	  traceJava FALSE
	  readInterval 1
	  rtpHeaderExpected FALSE
	}
      ]
    }
  ]
}
