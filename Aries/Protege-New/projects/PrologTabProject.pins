; Wed May 08 13:35:56 PDT 2002
; 
;+ (version "1.8")
;+ (build "Build 937")

([:PROLOG-BUILTINS-MODULE] of :PROLOG-MODULE
	(:PROLOG-CODE "/* GNU Prolog for Java\n * Copyright (C) 1997-1999  Constantine Plotnikov\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Library General Public\n * License as published by the Free Software Foundation; either\n * version 2 of the License, or (at your option) any later version.\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Library General Public License for more details.\n *\n * You should have received a copy of the GNU Library General Public\n * License along with this library; if not, write to the\n * Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n * Boston, MA  02111-1307, USA. The text ol license can be also found \n * at http://www.gnu.org/copyleft/lgpl.html\n */\n% build in predicates\n% Numbers before section descriptions correspond to parts of ISO Prolog \n% standard\n% 7.8 control constructs rules for control constructs are not the same as for\n% predicates, as result following declarations are not needed, but they are \n% left for some future reason.\n:-control(true/0,  'gnu.prolog.vm.buildin.control.Control_true'). \n:-control(fail/0,  'gnu.prolog.vm.buildin.control.Control_fail'). \n:-control(!/0,     'gnu.prolog.vm.buildin.control.Control_cut'). \n:-control((',')/2, 'gnu.prolog.vm.buildin.control.Control_and'). \n:-control((';')/2, 'gnu.prolog.vm.buildin.control.Control_or'). \n:-control(('->')/2,'gnu.prolog.vm.buildin.control.Control_if_then'). \n:-control(catch/3, 'gnu.prolog.vm.buildin.control.Control_catch'). \n:-control(throw/1, 'gnu.prolog.vm.buildin.control.Control_throw'). \n% the only used is call/1\n%:-control(call/1, 'gnu.prolog.vm.interpreter.Predicate_call'). \n:-build_in(call/1, 'gnu.prolog.vm.interpreter.Predicate_call'). \n\n% 8.2 term unification\n% I'm really considering making this control constructs \n:-build_in((=)/2,  'gnu.prolog.vm.buildins.unification.Predicate_unify'). \n:-build_in((unify_with_occurs_check)/2, 'gnu.prolog.vm.buildins.unification.Predicate_unify_with_occurs_check'). \n:-build_in((\\=)/2, 'gnu.prolog.vm.buildins.unification.Predicate_not_unifiable'). \n\n% 8.3 type testing\n:-build_in(var/1,     'gnu.prolog.vm.buildins.typetesting.Predicate_var'). \n:-build_in(atom/1,    'gnu.prolog.vm.buildins.typetesting.Predicate_atom'). \n:-build_in(integer/1, 'gnu.prolog.vm.buildins.typetesting.Predicate_integer'). \n%:-build_in(real/1,    'gnu.prolog.vm.buildins.typetesting.Predicate_real'). \n:-build_in(float/1,   'gnu.prolog.vm.buildins.typetesting.Predicate_float'). \n:-build_in(atomic/1,  'gnu.prolog.vm.buildins.typetesting.Predicate_atomic'). \n:-build_in(compound/1,'gnu.prolog.vm.buildins.typetesting.Predicate_compound'). \n:-build_in(nonvar/1,  'gnu.prolog.vm.buildins.typetesting.Predicate_nonvar'). \n:-build_in(number/1,  'gnu.prolog.vm.buildins.typetesting.Predicate_number'). \n:-build_in(java_object/1, 'gnu.prolog.vm.buildins.typetesting.Predicate_java_object'). \n                                     \n% 8.4 term comparsion\n:-build_in((==)/2,  'gnu.prolog.vm.buildins.termcomparsion.Predicate_term_identical'). \n:-build_in((\\==)/2, 'gnu.prolog.vm.buildins.termcomparsion.Predicate_term_not_identical'). \n:-build_in((@<)/2,  'gnu.prolog.vm.buildins.termcomparsion.Predicate_term_less_then'). \n:-build_in((@=<)/2, 'gnu.prolog.vm.buildins.termcomparsion.Predicate_term_less_then_or_equal'). \n:-build_in((@>)/2,  'gnu.prolog.vm.buildins.termcomparsion.Predicate_term_greater_then'). \n:-build_in((@>=)/2, 'gnu.prolog.vm.buildins.termcomparsion.Predicate_term_greater_then_or_equal'). \n\n% 8.5 term creation and decomposition\n:-build_in(functor/3,  'gnu.prolog.vm.buildins.termcreation.Predicate_functor'). \n:-build_in(arg/3,      'gnu.prolog.vm.buildins.termcreation.Predicate_arg'). \n:-build_in((=..)/2,    'gnu.prolog.vm.buildins.termcreation.Predicate_univ'). \n:-build_in(copy_term/2,'gnu.prolog.vm.buildins.termcreation.Predicate_copy_term'). \n\n% 8.6 arithmetics evaluation\n:-build_in((is)/2,'gnu.prolog.vm.buildins.arithmetics.Predicate_is'). \n\n% 8.7 arithmetic comparsion\n:-build_in((=:=)/2,'gnu.prolog.vm.buildins.arithmetics.Predicate_equal'). \n:-build_in((=\\=)/2,'gnu.prolog.vm.buildins.arithmetics.Predicate_not_equal'). \n:-build_in((<)/2,  'gnu.prolog.vm.buildins.arithmetics.Predicate_less_than'). \n:-build_in((=<)/2, 'gnu.prolog.vm.buildins.arithmetics.Predicate_less_than_or_equal'). \n:-build_in((>)/2,  'gnu.prolog.vm.buildins.arithmetics.Predicate_greater_than'). \n:-build_in((>=)/2, 'gnu.prolog.vm.buildins.arithmetics.Predicate_greater_than_or_equal'). \n\n% 8.8 clause retrieval and information\n:-build_in(clause/2,  'gnu.prolog.vm.buildins.database.Predicate_clause'). \n:-build_in(current_predicate/1, 'gnu.prolog.vm.buildins.database.Predicate_current_predicate'). \n\n% 8.9 clause creation and destruction\n:-build_in(asserta/1,  'gnu.prolog.vm.buildins.database.Predicate_asserta'). \n:-build_in(assertz/1,  'gnu.prolog.vm.buildins.database.Predicate_assertz'). \n:-build_in(retract/1,  'gnu.prolog.vm.buildins.database.Predicate_retract'). \n:-build_in(abolish/1,  'gnu.prolog.vm.buildins.database.Predicate_abolish'). \n\n% 8.10 All solusions\n:-build_in(findall/3, 'gnu.prolog.vm.buildins.allsolutions.Predicate_findall'). \n:-build_in(bagof/3,   'gnu.prolog.vm.buildins.allsolutions.Predicate_bagof'). \n:-build_in(setof/3,   'gnu.prolog.vm.buildins.allsolutions.Predicate_setof'). \n\n% 8.11 stream slection and control\n:-build_in(current_input/1,  'gnu.prolog.vm.buildins.io.Predicate_current_input'). \n:-build_in(current_output/1, 'gnu.prolog.vm.buildins.io.Predicate_current_output'). \n:-build_in(set_input/1,      'gnu.prolog.vm.buildins.io.Predicate_set_input'). \n:-build_in(set_output/1,     'gnu.prolog.vm.buildins.io.Predicate_set_output'). \n:-build_in(open/4,           'gnu.prolog.vm.buildins.io.Predicate_open'). \nopen(Source_sink, Mode, Stream):- open(Source_sink, Mode, Stream, []).\n:-build_in(close/2,           'gnu.prolog.vm.buildins.io.Predicate_close'). \nclose(S_or_a) :- close(S_or_a, []).\n:-build_in(flush_output/1, 'gnu.prolog.vm.buildins.io.Predicate_flush_output'). \nflush_output:-current_output(Stream), flush_output(Stream).\n:-build_in(stream_property/2, 'gnu.prolog.vm.buildins.io.Predicate_stream_property'). \n:-build_in(at_end_of_stream/1, 'gnu.prolog.vm.buildins.io.Predicate_at_end_of_stream'). \nat_end_of_stream:- current_input(S), at_end_of_stream(S).\n:-build_in(set_stream_position/2, 'gnu.prolog.vm.buildins.io.Predicate_set_stream_position'). \n\n% 8.12 character input/output\n:-build_in(get_char/2, 'gnu.prolog.vm.buildins.io.Predicate_get_char').\nget_char(Char):-\n   current_input(S),get_char(S,Char). \nget_code(Code):-\n   current_input(S),\n   get_char(S,Char),\n   ( Char = end_of_file ->\n     code = -1\n   ; char_code(Char,Code)\n   ). \nget_code(S, Code):-\n   get_char(S,Char),\n   ( Char = end_of_file ->\n     code = -1\n   ; char_code(Char,Code)\n   ). \n:-build_in(peek_char/2, 'gnu.prolog.vm.buildins.io.Predicate_peek_char').\npeek_char(Char):-\n   current_input(S),peek_char(S,Char). \npeek_code(Code):-\n   current_input(S),\n   peek_char(S,Char),\n   ( Char = end_of_file ->\n     code = -1\n   ; char_code(Char,Code)\n   ). \npeek_code(S, Code):-\n   peek_char(S,Char),\n   ( Char = end_of_file ->\n     code = -1\n   ; char_code(Char,Code)\n   ). \n:-build_in(put_char/2, 'gnu.prolog.vm.buildins.io.Predicate_put_char').\nput_char(Char):- current_output(S),put_char(S,Char). \nput_code(Code):- current_output(S), char_code(Char,Code), put_char(S,Char).\nput_code(S, Code):- char_code(Char,Code), put_char(S,Char).\nnl(S):- put_char(S,'\\n'). \nnl:- current_output(S),put_char(S,'\\n'). \n  \n% 8.13 byte input/output\n\n:-build_in(get_byte/2, 'gnu.prolog.vm.buildins.io.Predicate_get_byte').\nget_byte(Char):- current_input(S),get_byte(S,Char). \n:-build_in(peek_byte/2, 'gnu.prolog.vm.buildins.io.Predicate_peek_byte').\npeek_byte(Char):- current_input(S),peek_byte(S,Char). \n:-build_in(put_byte/2, 'gnu.prolog.vm.buildins.io.Predicate_put_byte').\nput_byte(Char):- current_output(S),put_byte(S,Char). \n\n\n% 8.14 Term input/output\n\n:-build_in(read_term/3, 'gnu.prolog.vm.buildins.io.Predicate_read_term').\nread_term(Term,Options):-current_input(S),read_term(S,Term,Options).\nread(S, Term):-read_term(S, Term,[]).\nread(Term):-current_input(S),read_term(S,Term,[]).\n:-build_in(write_term/3, 'gnu.prolog.vm.buildins.io.Predicate_write_term').\nwrite_term(Term,Options):-current_output(S),write_term(S,Term,Options).\nwrite(Term):-current_output(S),write_term(S,Term,[numbervars(true)]).\nwrite(S,Term):-write_term(S,Term,[numbervars(true)]).\nwriteq(Term):-current_output(S),write_term(S,Term,[quoted(true),numbervars(true)]).\nwriteq(S,Term):-write_term(S,Term,[quoted(true),numbervars(true)]).\nwrite_canonical(Term):-current_output(S),write_term(S,Term,[quoted(true),ignore_ops(true)]).\nwrite_canonical(S,Term):-write_term(S,Term,[quoted(true),ignore_ops(true)]).\n:-build_in(op/3, 'gnu.prolog.vm.buildins.io.Predicate_op').\n:-build_in(current_op/3, 'gnu.prolog.vm.buildins.io.Predicate_current_op').\n\n% char conversions are not yet supported\n%:-build_in(char_conversion/2, 'gnu.prolog.vm.buildins.io.Predicate_char_conversion').\n%:-build_in(current_char_conversion/2, 'gnu.prolog.vm.buildins.io.Predicate_current_char_conversion').\n\n% 8.15 logic and cotrol\n\n'\\\\+'(Goal) :- call(Goal),!,fail.\n'\\\\+'(Goal).\n\nonce(Goal) :- call(Goal),!.\n\nrepeat.\nrepeat:-repeat.\n\n% 8.16 Atomic term processing\n:-build_in(atom_length/2,'gnu.prolog.vm.buildins.atomicterms.Predicate_atom_length'). \n:-build_in(atom_concat/3,'gnu.prolog.vm.buildins.atomicterms.Predicate_atom_concat'). \n:-build_in(sub_atom/5,'gnu.prolog.vm.buildins.atomicterms.Predicate_sub_atom'). \n:-build_in(atom_chars/2,'gnu.prolog.vm.buildins.atomicterms.Predicate_atom_chars'). \n:-build_in(atom_codes/2,'gnu.prolog.vm.buildins.atomicterms.Predicate_atom_codes'). \n:-build_in(char_code/2,'gnu.prolog.vm.buildins.atomicterms.Predicate_char_code'). \n:-build_in(number_chars/2,'gnu.prolog.vm.buildins.atomicterms.Predicate_number_chars'). \n:-build_in(number_codes/2,'gnu.prolog.vm.buildins.atomicterms.Predicate_number_codes').\n\n% 8.17 Implementation defined hooks\n:-build_in(set_prolog_flag/2,'gnu.prolog.vm.buildins.imphooks.Predicate_set_prolog_flag'). \n:-build_in(current_prolog_flag/2,'gnu.prolog.vm.buildins.imphooks.Predicate_current_prolog_flag'). \n:-build_in(halt/1,'gnu.prolog.vm.buildins.imphooks.Predicate_halt'). \nhalt:-halt(0).\n?")
	(:PROLOG-MODULE-NAME "BUILT-INS"))

([KB_5776_00000] of :PROLOG-MODULE
	(:PROLOG-CODE "% LIST PROCESSING\n\nappend([],Ys,Ys).\nappend([X|Xs],Ys,[X|Zs]):-append(Xs,Ys,Zs).\n\nselect(X,[X|S],S).\nselect(X,[Y|S1],[Y|S2]):-\n  select(X,S1,S2).\n\nmember(X,[X|_]).\nmember(X,[_|Xs]):-member(X,Xs).\n\n")
	(:PROLOG-MODULE-NAME "LIST PROCESSING"))

([KB_5776_00001] of :PROLOG-MODULE
	(:PROLOG-DEPENDENTS [KB_5776_00000])
	(:PROLOG-CODE "%Java invocation -- invoke(+Receiver,+MethodName,+Parameters,-Result)\n:-build_in(invoke/4, 'protegex.prologtab.gnuprolog.InvokeJava'). \n% Java construct --  construct(+ClassName,+Parameters,-Result)\n:-build_in(construct/3,'protegex.prologtab.gnuprolog.ConstructJava').\n\n%Get reference to PrologTab -- get_tab(-PrologTab)\n:-build_in(get_tab/1, 'protegex.prologtab.gnuprolog.GetTab').  \n\n%VisualAge inspect -- inspect(+Object)\ninspect(Object) :- invoke('com.ibm.uvm.tools.DebugSupport',inspect,[Object],_).")
	(:PROLOG-MODULE-NAME "PrologTab Built-ins"))

([PrologTabProject_00004] of :PROLOG-MODULE
	(:PROLOG-DEPENDENTS
		[prologTest_00003]
		[PrologTabProject_00006])
	(:PROLOG-CODE "testCase1 :-\n	createSlot(testSlot,Slot),\n	createCls('TestClass',[frame(':THING')],[Slot],Cls),\n	createInstance(Cls,Instance),\n	slotSet(Instance,Slot,helloWorld),\n	showFrame(Instance),!.\n\ntestCase2 :-\n	directInstances(frame('TestClass'),Instances),\n	deleteFrames(Instances),\n	deleteFrame(frame('TestClass')),\n	deleteFrame(frame(testSlot)),!.")
	(:PROLOG-MODULE-NAME "TestCases"))

([PrologTabProject_00006] of :PROLOG-MODULE
	(:PROLOG-DEPENDENTS [KB_5776_00001])
	(:PROLOG-CODE "%Get reference to the KnowledgeBase\nknowledgeBase(KB) :- get_tab(Tab),invoke(Tab,getKnowledgeBase,[],KB).\n\n%Get reference to Protege Project\nprotegeProject(Project) :- knowledgeBase(KB),invoke(KB,getProject,[],Project).\n\n%Open view browser on Instance\nshowFrame(frame(Instance)) :- protegeProject(Project),invoke(Project,show,[frame(Instance)],_).\n\n%Get browserSlot for class\nbrowserSlot(frame(Class),BrowserSlot) :- protegeProject(Project),invoke(Project,getBrowserSlot,[frame(Class)],BrowserSlot).\n\n%ValueType predicates\nvalueType(ValueTypeLabel,ValueType) :- invoke('edu.stanford.smi.protege.model.ValueType',valueOf,[ValueTypeLabel],ValueType).\n\nanyValueType(ValueType) :- valueType('Any',ValueType).\nbooleanValueType(ValueType) :- valueType('Boolean',ValueType).\nclassValueType(ValueType) :- valueType('Class',ValueType).\nfloatValueType(ValueType) :- valueType('Float',ValueType).\ninstanceValueType(ValueType) :- valueType('Instance',ValueType).\nintegerValueType(ValueType) :- valueType('Integer',ValueType).\nstringValueType(ValueType) :- valueType('String',ValueType).\nsymbolValueType(ValueType) :- valueType('Symbol',ValueType).\n\n%Create Cls\ncreateCls(ClassName,SuperClasses,Cls) :- ':name'(Cls,ClassName),class(Cls),!.\ncreateCls(ClassName,SuperClasses,Cls) :-\n	knowledgeBase(KB),\n	invoke(KB,createCls,[ClassName,SuperClasses],Cls).\n\ncreateCls(ClassName,SuperClasses,TemplateSlots,Cls) :- !,\n	createCls(ClassName,SuperClasses,Cls),\n	addDirectTemplateSlots(Cls,TemplateSlots).\n\naddDirectTemplateSlots(Cls,[]).\naddDirectTemplateSlots(Cls,[TemplateSlot | TemplateSlots]) :-\n	invoke(Cls,addDirectTemplateSlot,[TemplateSlot],_),\n	addDirectTemplateSlots(Cls,TemplateSlots).\n\n%Create Slot\ncreateSlot(SlotName,Slot) :- ':name'(Slot,SlotName),slot(Slot),!.\ncreateSlot(SlotName,Slot) :-\n	knowledgeBase(KB),\n	invoke(KB,createSlot,[SlotName],Slot).\n\n%Create Instance\ncreateInstance(frame(Class),Instance) :-\n	knowledgeBase(KB),\n	invoke(KB,createInstance,[null,frame(Class)],Instance).\n%Set slot value\nslotSet(frame(Instance),frame(Slot),Value) :- invoke(frame(Instance),setOwnSlotValue,[frame(Slot),Value],_).\n\ndeleteFrame(frame(Frame)) :-\n	knowledgeBase(KB),\n	invoke(KB,deleteFrame,[frame(Frame)],_).\ndeleteFrames([]).\ndeleteFrames([frame(Frame) | Frames]) :- deleteFrame(frame(Frame)),deleteFrames(Frames).\n\n")
	(:PROLOG-MODULE-NAME "Protege-API"))

([prologTest_00003] of :PROLOG-MODULE
	(:PROLOG-DEPENDENTS [KB_5776_00000])
	(:PROLOG-CODE "directSuperclass(Class,SuperClass) :- ':DIRECT-SUPERCLASSES'(Class,SuperClasses),member(SuperClass,SuperClasses).\ndirectInstances(Class,Instances) :- ':DIRECT-INSTANCES'(Class,Instances).\n\nsuperclass(Class,SuperClass) :- directSuperclass(Class,SuperClass).\nsuperclass(Class,SuperClass) :- directSuperclass(Class,IntermediateClass),superclass(IntermediateClass,SuperClass).\n\ninstanceof(Instance,Cls) :- ':direct-type'(Instance,Cls).\ninstanceof(Instance,Cls) :- ':direct-type'(Instance,DirectType),superclass(DirectType,Cls).\n\n%Type predicates\nclass(Class) :- instanceof(Class,frame(':CLASS')),!.\nslot(Slot) :- instanceof(Slot,frame(':SLOT')),!.\n\n\n")
	(:PROLOG-MODULE-NAME "KnowledgeBase Predicates"))
