/*
 * JFrame.java
 *
 * Created on August 12, 2002, 2:58 PM
 */

/**
 *
 * @author  s824685
 *
 */
//package AssistRQ;

//import
import javax.swing.*;
import javax.swing.tree.*;
import javax.swing.event.*;
import java.net.*;
import javax.swing.text.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.dnd.*;
import java.awt.datatransfer.*;
import java.io.*;
import java.util.*;

import gate.*;
import gate.creole.*;
import gate.util.*;
import gate.gui.*;
import gate.corpora.RepositioningInfo;

import DynTree.DynamicTree;
import SAA.StandAloneAnnie;
import SAA.StandAloneAnnie;

public class AssistRQ extends javax.swing.JFrame
{

    /** Debug variable. */
    public static boolean debug = false;//true;//

    /** Directory of the Mission files. */
    String WorkingDir = "/home/jeffmac";
    String MissionDir = "/AssistRQ/Mission/";
    String sRemoteHost = "localhost";//"158.114.52.140";
    String CurrentTxtFile = "";
    StandAloneAnnie Saa = null;
    public String RulesWordlistDir = "Test";

    /** Root Node Name. */
    String RootNode = "Mission";
    String TaggedValuesFile = " ";
    /** Tree to generate. */
    DefaultMutableTreeNode dynamicTree;

    /** Tree to allow modification.  */
    DynamicTree TaggedTreeModel = new DynamicTree("Gate Values");
    DynamicTree RQ_Slots_TreeModel = new DynamicTree("Reporter's Questions");

    /** Creates new form JFrame */
    public AssistRQ() {
        initComponents();
        TaggedValuesTree.setModel(TaggedTreeModel.getTreeModel());
        RQ_Slots_Tree.setModel(RQ_Slots_TreeModel.getTreeModel());
        RQ_Slots_Tree.setEditable(true);
        RQ_Slots_Tree.setDropTarget(new DropTarget(RQ_Slots_Tree, new MyDropTargetLister()));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jDiagStatus = new javax.swing.JDialog();
        jLStatus = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jdNewNodeDiag = new javax.swing.JDialog();
        jTextField1 = new javax.swing.JTextField();
        OKBTN_NewNode = new javax.swing.JButton();
        CancelBTN_NewNode = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jFileChooser1 = new javax.swing.JFileChooser();
        ExportToDiag = new javax.swing.JDialog();
        Sodi1RadioBtn = new javax.swing.JRadioButton();
        Sodi2RadioBtn = new javax.swing.JRadioButton();
        ExportDiag_OkBtn = new javax.swing.JButton();
        ExportDiag_CancelBtn = new javax.swing.JButton();
        jDiagConfigHost = new javax.swing.JDialog();
        jTextField2 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        ConfigHost_OKBTN = new javax.swing.JButton();
        ConfigHost_CancelBTN = new javax.swing.JButton();
        jDiag_RulesWordlist = new javax.swing.JDialog();
        jList_RulesWords = new javax.swing.JList();
        jLabel4 = new javax.swing.JLabel();
        LRW_OKBTN = new javax.swing.JButton();
        LRW_CancelBTN = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        TaggedValuesTree = new javax.swing.JTree();
        jScrollPane1 = new javax.swing.JScrollPane();
        OrgFileTxtBox = new javax.swing.JTextPane();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        RQ_Slots_Tree = new javax.swing.JTree();
        RemoveNodeBTN = new javax.swing.JButton();
        MoveToBTN = new javax.swing.JButton();
        NewNodeBTN = new javax.swing.JButton();
        MoveAllBTN = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        MenuFile = new javax.swing.JMenu();
        File_Open = new javax.swing.JMenuItem();
        File_Save = new javax.swing.JMenuItem();
        File_ProcessTxt = new javax.swing.JMenuItem();
        File_Export = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        File_Exit = new javax.swing.JMenuItem();
        MenuMission = new javax.swing.JMenu();
        CBMenuCND = new javax.swing.JCheckBoxMenuItem();
        CBMenuIWDCI = new javax.swing.JCheckBoxMenuItem();
        MenuEdit = new javax.swing.JMenu();
        Edit_ConfigHost = new javax.swing.JMenuItem();
        Edit_RulesWordLists = new javax.swing.JMenuItem();

        jDiagStatus.getContentPane().setLayout(null);

        jDiagStatus.setTitle("Status of Gate");
        jLStatus.setText("jLabel1");
        jLStatus.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jLStatusPropertyChange(evt);
            }
        });

        jDiagStatus.getContentPane().add(jLStatus);
        jLStatus.setBounds(20, 40, 220, 16);

        jDiagStatus.getContentPane().add(jProgressBar1);
        jProgressBar1.setBounds(18, 80, 230, 14);

        jdNewNodeDiag.getContentPane().setLayout(null);

        jdNewNodeDiag.setTitle("New Value");
        jdNewNodeDiag.getContentPane().add(jTextField1);
        jTextField1.setBounds(20, 40, 150, 20);

        OKBTN_NewNode.setText("OK");
        OKBTN_NewNode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OKBTN_NewNodeActionPerformed(evt);
            }
        });

        jdNewNodeDiag.getContentPane().add(OKBTN_NewNode);
        OKBTN_NewNode.setBounds(20, 70, 53, 26);

        CancelBTN_NewNode.setText("Cancel");
        CancelBTN_NewNode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelBTN_NewNodeActionPerformed(evt);
            }
        });

        jdNewNodeDiag.getContentPane().add(CancelBTN_NewNode);
        CancelBTN_NewNode.setBounds(90, 70, 80, 26);

        jLabel1.setText("Enter Value:");
        jdNewNodeDiag.getContentPane().add(jLabel1);
        jLabel1.setBounds(20, 20, 73, 16);

        ExportToDiag.getContentPane().setLayout(null);

        ExportToDiag.setName("Export To");
        Sodi1RadioBtn.setText("Local Host");
        ExportToDiag.getContentPane().add(Sodi1RadioBtn);
        Sodi1RadioBtn.setBounds(50, 30, 90, 24);

        Sodi2RadioBtn.setText("Remote Host");
        ExportToDiag.getContentPane().add(Sodi2RadioBtn);
        Sodi2RadioBtn.setBounds(50, 60, 105, 24);

        ExportDiag_OkBtn.setText("Ok");
        ExportDiag_OkBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExportDiag_OkBtnActionPerformed(evt);
            }
        });

        ExportToDiag.getContentPane().add(ExportDiag_OkBtn);
        ExportDiag_OkBtn.setBounds(20, 130, 52, 26);

        ExportDiag_CancelBtn.setText("Cancel");
        ExportDiag_CancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExportDiag_CancelBtnActionPerformed(evt);
            }
        });

        ExportToDiag.getContentPane().add(ExportDiag_CancelBtn);
        ExportDiag_CancelBtn.setBounds(100, 130, 75, 26);

        jDiagConfigHost.getContentPane().setLayout(null);

        jDiagConfigHost.setTitle("Configure Host");
        jDiagConfigHost.getContentPane().add(jTextField2);
        jTextField2.setBounds(30, 40, 190, 20);

        jLabel3.setText("IP Address or Computer Name:");
        jDiagConfigHost.getContentPane().add(jLabel3);
        jLabel3.setBounds(30, 20, 200, 16);

        ConfigHost_OKBTN.setText("OK");
        ConfigHost_OKBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConfigHost_OKBTNActionPerformed(evt);
            }
        });

        jDiagConfigHost.getContentPane().add(ConfigHost_OKBTN);
        ConfigHost_OKBTN.setBounds(30, 80, 70, 20);

        ConfigHost_CancelBTN.setText("Cancel");
        ConfigHost_CancelBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConfigHost_CancelBTNActionPerformed(evt);
            }
        });

        jDiagConfigHost.getContentPane().add(ConfigHost_CancelBTN);
        ConfigHost_CancelBTN.setBounds(140, 80, 75, 20);

        jDiag_RulesWordlist.getContentPane().setLayout(null);

        jDiag_RulesWordlist.setTitle("Rules & WordLists");
        jDiag_RulesWordlist.getContentPane().add(jList_RulesWords);
        jList_RulesWords.setBounds(50, 30, 180, 230);

        jLabel4.setText("Select the Rules and wordlist group:");
        jDiag_RulesWordlist.getContentPane().add(jLabel4);
        jLabel4.setBounds(30, 10, 230, 20);

        LRW_OKBTN.setText("OK");
        LRW_OKBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LRW_OKBTNActionPerformed(evt);
            }
        });

        jDiag_RulesWordlist.getContentPane().add(LRW_OKBTN);
        LRW_OKBTN.setBounds(50, 280, 80, 26);

        LRW_CancelBTN.setText("Cancel");
        LRW_CancelBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LRW_CancelBTNActionPerformed(evt);
            }
        });

        jDiag_RulesWordlist.getContentPane().add(LRW_CancelBTN);
        LRW_CancelBTN.setBounds(150, 280, 80, 26);

        getContentPane().setLayout(null);

        setTitle("Assisted Reporter's Questions");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        TaggedValuesTree.setDragEnabled(true);
        jScrollPane2.setViewportView(TaggedValuesTree);

        jTabbedPane1.addTab("Tagged Values", null, jScrollPane2, "");

        jScrollPane1.setPreferredSize(new java.awt.Dimension(42, 36));
        OrgFileTxtBox.setEditable(false);
        OrgFileTxtBox.setAutoscrolls(false);
        jScrollPane1.setViewportView(OrgFileTxtBox);

        jTabbedPane1.addTab("Original Text", jScrollPane1);

        getContentPane().add(jTabbedPane1);
        jTabbedPane1.setBounds(20, 10, 280, 680);

        jLabel2.setText("Reporter's Questions");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(480, 20, 140, 16);

        RQ_Slots_Tree.setDragEnabled(true);
        RQ_Slots_Tree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                RQ_Slots_TreeMouseReleased(evt);
            }
        });

        jScrollPane3.setViewportView(RQ_Slots_Tree);

        getContentPane().add(jScrollPane3);
        jScrollPane3.setBounds(480, 40, 280, 640);

        RemoveNodeBTN.setText("Remove Value");
        RemoveNodeBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveNodeBTNActionPerformed(evt);
            }
        });

        getContentPane().add(RemoveNodeBTN);
        RemoveNodeBTN.setBounds(330, 200, 130, 26);

        MoveToBTN.setText("Move   --->");
        MoveToBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoveToBTNActionPerformed(evt);
            }
        });

        getContentPane().add(MoveToBTN);
        MoveToBTN.setBounds(330, 120, 130, 26);

        NewNodeBTN.setText("New Value");
        NewNodeBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewNodeBTNActionPerformed(evt);
            }
        });

        getContentPane().add(NewNodeBTN);
        NewNodeBTN.setBounds(330, 160, 130, 26);

        MoveAllBTN.setText("Move All ->");
        MoveAllBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoveAllBTNActionPerformed(evt);
            }
        });

        getContentPane().add(MoveAllBTN);
        MoveAllBTN.setBounds(330, 80, 130, 26);

        MenuFile.setText("File");
        File_Open.setText("Open...");
        File_Open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                File_OpenActionPerformed(evt);
            }
        });

        MenuFile.add(File_Open);
        File_Save.setText("Save");
        File_Save.setEnabled(false);
        File_Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                File_SaveActionPerformed(evt);
            }
        });

        MenuFile.add(File_Save);
        File_ProcessTxt.setText("Process Text File...");
        File_ProcessTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                File_ProcessTxtActionPerformed(evt);
            }
        });

        MenuFile.add(File_ProcessTxt);
        File_Export.setText("Export R.Q.");
        File_Export.setEnabled(false);
        File_Export.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                File_ExportActionPerformed(evt);
            }
        });

        MenuFile.add(File_Export);
        MenuFile.add(jSeparator1);
        File_Exit.setText("Exit");
        File_Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                File_ExitActionPerformed(evt);
            }
        });

        MenuFile.add(File_Exit);
        jMenuBar1.add(MenuFile);
        MenuMission.setText("Mission");
        CBMenuCND.setText("Computer Network Defense");
        CBMenuCND.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CBMenuCNDActionPerformed(evt);
            }
        });

        MenuMission.add(CBMenuCND);
        CBMenuIWDCI.setText("IW-DCI");
        CBMenuIWDCI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CBMenuIWDCIActionPerformed(evt);
            }
        });

        MenuMission.add(CBMenuIWDCI);
        jMenuBar1.add(MenuMission);
        MenuEdit.setText("Edit");
        MenuEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuEditActionPerformed(evt);
            }
        });

        Edit_ConfigHost.setText("Configure Remote Host");
        Edit_ConfigHost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Edit_ConfigHostActionPerformed(evt);
            }
        });

        MenuEdit.add(Edit_ConfigHost);
        Edit_RulesWordLists.setText("Rules & Wordlists...");
        Edit_RulesWordLists.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Edit_RulesWordListsActionPerformed(evt);
            }
        });

        MenuEdit.add(Edit_RulesWordLists);
        jMenuBar1.add(MenuEdit);
        setJMenuBar(jMenuBar1);

        pack();
    }//GEN-END:initComponents

    private void LRW_CancelBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LRW_CancelBTNActionPerformed
        // Add your handling code here:
        jDiag_RulesWordlist.hide();
    }//GEN-LAST:event_LRW_CancelBTNActionPerformed

    private void LRW_OKBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LRW_OKBTNActionPerformed
        // Add your handling code here:
        RulesWordlistDir = jList_RulesWords.getSelectedValue().toString();
        if (debug) System.out.println("Rules & Wordlist directory: " + RulesWordlistDir);
        jDiag_RulesWordlist.hide();
    }//GEN-LAST:event_LRW_OKBTNActionPerformed

    private void Edit_RulesWordListsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Edit_RulesWordListsActionPerformed
        // Add your handling code here:
        /* first load  the list of the directory names and put them into
         * a list box.  Then allow the user to select the one they want and
         * set that as the working dir for the template module.
         */
        String listData[] = new String[100];
        String sLine = "";
        int x = 0;
        FileInputStream fis = null;
        BufferedReader br = null;

        // check if file exists
        File f = new File(WorkingDir + "/AssistRQ/RulesWords.dir");
        if (f.exists())
        {
            try{
            if (debug) System.out.println("The file in .rq : ");
                fis = new FileInputStream(WorkingDir + "/AssistRQ/RulesWords.dir");
            }catch(IOException io_e)
            {
                System.out.print(" does not exist.");
            }
        }else
            return;

        br = new BufferedReader(new InputStreamReader(fis));
            if (debug) System.out.println("after br in export");
        //Extract the values in the slots and output to a file
        while(sLine != null)
        {
            try
            {
               sLine = br.readLine();
               if (debug) System.out.println("after readline in export");
            }catch(IOException io_e)
            {
                System.out.print(" does not exist.");
            }
            if(sLine == null)break;
            sLine = sLine.trim();
            if (debug) System.out.println("after node in export: " + sLine);
            listData[x] = sLine;
            x++;
        }//end of while
        jList_RulesWords.setListData(listData);
        jDiag_RulesWordlist.setSize(290, 350);
        jDiag_RulesWordlist.show();
    }//GEN-LAST:event_Edit_RulesWordListsActionPerformed

    private void File_SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_File_SaveActionPerformed
        // Add your handling code here:
        //This asks whether or
        // not the data should be saved to disk.  If the data is to be saved
        // to disk then the data is saved to the filename of which the OrgFileName is.
        FileWriter m_Output = null;
        DataOutputStream OutputURL = null;
        Object child, sd_child, th_child, fr_RootNode;
        DefaultTreeModel dtm = RQ_Slots_TreeModel.getTreeModel();
        String sMission = "CND", sRecord = "";
        FileInputStream fis = null;
        BufferedReader br = null;
        if (CBMenuCND.isSelected())
            sMission = "CND";
        if (CBMenuIWDCI.isSelected())
            sMission = "IW-DCI";
        String RQ_Slots_File = WorkingDir + MissionDir + sMission + ".rq";
        /* Write loop to read file */
        if (debug) System.out.println("Writing this to file: " + sRecord);
        sRecord = "";

        //create or open the .tab file to write the RQ's to a file.
        try
        {
            int length = TaggedValuesFile.length();
            if (debug) System.out.println("before the for loop: " + TaggedValuesFile + "\n");
              TaggedValuesFile = TaggedValuesFile.substring(0, (length-5));
            if (debug) System.out.println("The file out .tab : " + TaggedValuesFile);
            m_Output = new FileWriter(TaggedValuesFile + ".tab", false);
            if (debug) System.out.println("The file out .tab : " + TaggedValuesFile);

            /* Extracting the RQ_Tree to a file by
             * starting at the root node and working down to
             * each leaf.
             */
            fr_RootNode = dtm.getRoot();
            for (int x = 0; x < dtm.getChildCount(fr_RootNode); x++)
            {
                if (debug) System.out.println("Writing to file.");
                child = dtm.getChild(fr_RootNode, x);
                sRecord += "+ " + child.toString() + "\n";
                for (int y = 0; y < dtm.getChildCount(child); y++)
                {
                    sd_child = dtm.getChild(child, y);
                    sRecord += "> " + sd_child.toString() + "\n";
                    for (int z = 0; z < dtm.getChildCount(sd_child); z++)
                    {
                        th_child = dtm.getChild(sd_child, z);
                        sRecord += "^ " + th_child.toString() + "\n";
                    }
                }
            }
            m_Output.write(sRecord);
            if (debug) System.out.println("Wrote this to file:" + sRecord);
            m_Output.close();
        }catch (IOException ioe)
        {
            Out.prln("IO error:" + ioe);
        }
    }//GEN-LAST:event_File_SaveActionPerformed

    private void jLStatusPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jLStatusPropertyChange
        // Add your handling code here:
        if(debug) System.out.println("JLabel Changed.");
        if(jLStatus.getText() == "Done!")
            loadFiles(CurrentTxtFile);
    }//GEN-LAST:event_jLStatusPropertyChange

    private void RQ_Slots_TreeMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RQ_Slots_TreeMouseReleased
        // Add your handling code here:
    }//GEN-LAST:event_RQ_Slots_TreeMouseReleased

    private void MoveAllBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoveAllBTNActionPerformed
        // Add your handling code here:
        Object parent, value = null, th_child, fr_RootNode, rq_Root, rq_child = null, rq_parent = null;
        DefaultTreeModel RQ_Tree = RQ_Slots_TreeModel.getTreeModel(),
            Tags_Tree = TaggedTreeModel.getTreeModel();
        fr_RootNode = Tags_Tree.getRoot();
        rq_Root = RQ_Tree.getRoot();
        for (int x = 0; x < Tags_Tree.getChildCount(fr_RootNode); x++)
        {
            if (debug) System.out.println("before set value of parent.");
            parent = Tags_Tree.getChild(fr_RootNode, x);
            for (int y = 0; y < Tags_Tree.getChildCount(parent); y++)
            {
                value = Tags_Tree.getChild(parent, y);
                if (debug) System.out.println("After set value.");
            }
            if(value != null)
            {
                int pos = -1;
                for(int q = 0; q < RQ_Tree.getChildCount(rq_Root); q++)
                {
                    rq_parent = RQ_Tree.getChild(rq_Root, q);
                    for(int r = 0; r < RQ_Tree.getChildCount(rq_parent); r++)
                    {
                        rq_child = RQ_Tree.getChild(rq_parent, r);
                        if(rq_child.toString().equalsIgnoreCase(parent.toString()))
                            parent = rq_child;
                    }
                    pos = RQ_Tree.getIndexOfChild(rq_parent, parent);
                    if (debug) System.out.println("rq_parent value:" + rq_parent.toString());
                    if(pos != -1) break;
                }
                if (debug) System.out.println("pos value:" + pos);
                if (debug) System.out.println("before setting value in RQ Tree." + parent + "|" + value.toString());
                RQ_Tree.insertNodeInto((MutableTreeNode)value, (MutableTreeNode)parent, 0);
                parent = value = null;
            }
        }
    }//GEN-LAST:event_MoveAllBTNActionPerformed

    private void Edit_ConfigHostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Edit_ConfigHostActionPerformed
        // Add your handling code here:
        jTextField2.setText(sRemoteHost);
        jDiagConfigHost.setSize(240, 140);
        jDiagConfigHost.show();
    }//GEN-LAST:event_Edit_ConfigHostActionPerformed

    private void ConfigHost_CancelBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConfigHost_CancelBTNActionPerformed
        // Add your handling code here:
        jDiagConfigHost.hide();
    }//GEN-LAST:event_ConfigHost_CancelBTNActionPerformed

    private void ConfigHost_OKBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConfigHost_OKBTNActionPerformed
        // Add your handling code here:
        sRemoteHost = jTextField2.getText();
        jTextField2.grabFocus();
        jDiagConfigHost.hide();
    }//GEN-LAST:event_ConfigHost_OKBTNActionPerformed

    private void MenuEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuEditActionPerformed
        // Add your handling code here:
    }//GEN-LAST:event_MenuEditActionPerformed

    private void ExportDiag_CancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExportDiag_CancelBtnActionPerformed
        // Add your handling code here:
        ExportToDiag.hide();
    }//GEN-LAST:event_ExportDiag_CancelBtnActionPerformed

    private void ExportDiag_OkBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExportDiag_OkBtnActionPerformed
        // Add your handling code here:
        //this preforms to things, the first is to save the file to a .tab then
        //to send the file to the port 8127 on 158.114.52.(140 or 130)
        FileWriter m_Output = null;
        DataOutputStream OutputURL = null;
        Object child, sd_child, th_child, fr_RootNode;
        DefaultTreeModel dtm = RQ_Slots_TreeModel.getTreeModel();
        String sMission = "CND", sLine = "", sRecord = "";
        FileInputStream fis = null;
        BufferedReader br = null;
        if (CBMenuCND.isSelected())
            sMission = "CND";
        if (CBMenuIWDCI.isSelected())
            sMission = "IW-DCI";
        String RQ_Slots_File = WorkingDir + MissionDir + sMission + ".rq";

        //create or open the .tab file to write the RQ's to a file.
        try
        {
            int length = TaggedValuesFile.length();
            if (debug) System.out.println("before the for loop: " + TaggedValuesFile + "\n");
              TaggedValuesFile = TaggedValuesFile.substring(0, (length-5));
            if (debug) System.out.println("The file out .tab : " + TaggedValuesFile);
            m_Output = new FileWriter(TaggedValuesFile + ".tab", false);
            if (debug) System.out.println("The file out .tab : " + TaggedValuesFile);
        }catch (IOException ioe)
        {
            Out.prln("IO error:" + ioe);
        }
        // check if file exists
        File f = new File(RQ_Slots_File);
        if (f.exists())
        {
            try{
                if (debug) System.out.println("The file in .rq : " + RQ_Slots_File);
                fis = new FileInputStream(RQ_Slots_File);
            }catch(IOException io_e)
            {
                System.out.print(RQ_Slots_File + " does not exist.");
            }
        }else
            return;

        br = new BufferedReader(new InputStreamReader(fis));
        if (debug) System.out.println("after br in export");

        //Extract the values in the slots and output to a file
        if (debug) System.out.println("In ExportDiag, RQ_Slots_Tree: ");
        while(sLine != null)
        {
            try
            {
               sLine = br.readLine();
               if (debug) System.out.println("after readline in export");
            }catch(IOException io_e)
            {
                System.out.print(RQ_Slots_File + " does not exist.");
            }
            if(sLine == null)break;
            char oldChar = ' ';
            if(sLine.charAt(0) == '-') oldChar = '-';
            if(sLine.charAt(0) == '>') oldChar = '>';
            if(sLine.charAt(0) == '+') continue;
            sLine = sLine.replace('_', ' ');
            sLine = sLine.replace(oldChar, ' ');
            sLine = sLine.trim();
            if (debug) System.out.println("after node in export: " + sLine);

            Object parent = findNode(sLine, (DefaultMutableTreeNode)dtm.getRoot());
            if (parent != null && dtm.getChildCount(parent) > 0)
            {
                child = dtm.getChild(parent, 0);
                sRecord += child.toString().replace(' ', '_') + " ";
                if (debug) System.out.println("after findNode in export: " + child.toString());
            }
            else
            {
                sRecord += "? ";
                if (debug) System.out.println("after findNode in export: N/A (?)");
            }
        }//end of while

        sRecord += "\n";
        String byteStream = "";
        try
        {
            //Dialog box asks which IP should the data be sent to.
            byteStream = "Gate Sodi 2 " + sRecord.length() + " 0 " + sRecord;

            if (debug) System.out.println("Checking to see if selected.");

            if(Sodi1RadioBtn.isSelected())
            {
                if (debug) System.out.println("Sending this to Local Host: " + sRecord);
                InetAddress host = null;
                host = host.getByName("localhost");
                int port = 8127;
                if (debug) System.out.println("DataGram before");
                DatagramSocket outSocket = new DatagramSocket();
                byte buf[] = byteStream.getBytes();

                DatagramPacket datagram = new DatagramPacket(buf, byteStream.length());
                datagram.setPort(port);
                datagram.setAddress(host);
                datagram.setLength(byteStream.length());
                outSocket.send(datagram);
                if (debug) System.out.println("Data sent to " + host.toString());
            }
            else if(Sodi2RadioBtn.isSelected())
            {
                if (debug) System.out.println("Sending this to Remote Host: " + sRecord);
                InetAddress host = null;
                host = host.getByName(sRemoteHost);
                int port = 8127;
                if (debug) System.out.println("DataGram before");
                DatagramSocket outSocket = new DatagramSocket();
                byte buf[] = byteStream.getBytes();

                DatagramPacket datagram = new DatagramPacket(buf, byteStream.length());
                datagram.setPort(port);
                datagram.setAddress(host);
                datagram.setLength(byteStream.length());
                outSocket.send(datagram);
                if (debug) System.out.println("Data sent to " + host.toString());
            }
        }catch(IOException ioe)
        {
            System.out.println("IO error:" + ioe);
        }

        try
        {
            fis.close();
        }
        catch(IOException io_e)
        {
            System.out.print(RQ_Slots_File + " does not exist.");
        }
        ExportToDiag.hide();
    }//GEN-LAST:event_ExportDiag_OkBtnActionPerformed

    private void File_ExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_File_ExportActionPerformed
        // Add your handling code here:
        ExportToDiag.setTitle("Export To");
        ExportToDiag.setSize(200,200);
        ButtonGroup group = new ButtonGroup();
        group.add(Sodi1RadioBtn);
        group.add(Sodi2RadioBtn);
        ExportToDiag.show();
    }//GEN-LAST:event_File_ExportActionPerformed

    private void OKBTN_NewNodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OKBTN_NewNodeActionPerformed
        // Add your handling code here:
        String NodeName = jTextField1.getText();
        TreePath RQ_Slots_Selection = RQ_Slots_Tree.getSelectionPath();

        if (debug) System.out.println("The path of the RQ : " + RQ_Slots_Selection.toString());

        if(RQ_Slots_Selection.getPathCount() == 3)
            RQ_Slots_TreeModel.addObject(NodeName, RQ_Slots_Selection);
        jTextField1.setText("");
        jTextField1.grabFocus();
        jdNewNodeDiag.hide();
    }//GEN-LAST:event_OKBTN_NewNodeActionPerformed

    private void CancelBTN_NewNodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelBTN_NewNodeActionPerformed
        // Add your handling code here:
        jdNewNodeDiag.hide();
    }//GEN-LAST:event_CancelBTN_NewNodeActionPerformed

    private void File_ProcessTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_File_ProcessTxtActionPerformed
        // Add your handling code here:
        jLStatus.setText("Ready");
        jDiagStatus.setSize(300, 200);
        File_Save.setEnabled(true);
        File_Export.setEnabled(true);
        CurrentTxtFile = "";

/////////////////////////////////////////////////////////////////////////////
        Frame f = new Frame("Junk");
        final FileDialog fileOpen = new FileDialog(f, "Get text File");

        fileOpen.show();

        CurrentTxtFile = fileOpen.getDirectory() + fileOpen.getFile();
        if (debug) System.out.println("The file to open: " + fileOpen.getFile());

        if(fileOpen.getFile() == null) return;
/////////////////////////////////////////////////////////////////////////////

        Saa = new StandAloneAnnie("file:" + CurrentTxtFile);
        try
        {
            // initialise the GATE library
            jLStatus.setText("Initialising GATE...");
            gate.Gate.init();
            jLStatus.setText("...GATE initialised");

            pThread StartGate = new pThread("file:" + CurrentTxtFile);
            StartGate.start();
        }
        catch(Exception e)
        {
            System.out.print("Error in processing text.");
        }
        jDiagStatus.show();
    }//GEN-LAST:event_File_ProcessTxtActionPerformed

    private void CBMenuIWDCIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CBMenuIWDCIActionPerformed
        // Add your handling code here:
        SetMission("IW-DCI");
        CheckMission("IW-DCI");
    }//GEN-LAST:event_CBMenuIWDCIActionPerformed

    private void CBMenuCNDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CBMenuCNDActionPerformed
        // Add your handling code here:
        SetMission("CND");
        CheckMission("CND");
    }//GEN-LAST:event_CBMenuCNDActionPerformed

    private void NewNodeBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewNodeBTNActionPerformed
        // Add your handling code here:
        TreePath RQ_Slots_Selection = RQ_Slots_Tree.getSelectionPath();

        if (RQ_Slots_Selection == null) {
            return;
        }

        jdNewNodeDiag.setSize(200, 140);
        jdNewNodeDiag.show();

    }//GEN-LAST:event_NewNodeBTNActionPerformed

    private void MoveToBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoveToBTNActionPerformed
        // Add your handling code here:
        TreePath TaggedSelection = TaggedValuesTree.getSelectionPath();
        TreePath RQ_Slots_Selection = RQ_Slots_Tree.getSelectionPath();

        if (RQ_Slots_Selection == null || TaggedSelection == null) {
            return;
        }

        if (debug) System.out.println("The path of the RQ : " + RQ_Slots_Selection.toString());

        if(RQ_Slots_Selection.getPathCount() == 3 && TaggedSelection.getPathCount() == 3)
            RQ_Slots_TreeModel.addObject(TaggedSelection.getLastPathComponent(), RQ_Slots_Selection);
    }//GEN-LAST:event_MoveToBTNActionPerformed

    private void RemoveNodeBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveNodeBTNActionPerformed
        // Add your handling code here:
        TreePath RQ_Slots_Selection = RQ_Slots_Tree.getSelectionPath();
        if (debug) System.out.println("The selected Path is: " + RQ_Slots_Selection.toString());
        if (RQ_Slots_Selection != null && RQ_Slots_Selection.getPathCount() > 3) {
            DefaultMutableTreeNode currentNode = (DefaultMutableTreeNode)
                         (RQ_Slots_Selection.getLastPathComponent());
            if (debug) System.out.println("after node in RemoveBTN: " + currentNode.toString());
            if (debug) System.out.println("In First, if, of remove btn");
            MutableTreeNode parent = (MutableTreeNode)(currentNode.getParent());
            if (parent != null) {
                if (debug) System.out.println("In Second, if, of remove btn");
                if(RQ_Slots_TreeModel != null);
                    RQ_Slots_TreeModel.removeCurrentNode(RQ_Slots_Selection);
            }
        }
    }//GEN-LAST:event_RemoveNodeBTNActionPerformed

    private void File_ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_File_ExitActionPerformed
        // Add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_File_ExitActionPerformed

    private void File_OpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_File_OpenActionPerformed
        // Add your handling code here:
        File_Save.setEnabled(true);
        File_Export.setEnabled(true);
        Frame f = new Frame("Junk");
        String NameFile;
        final FileDialog fileOpen = new FileDialog(f, "Get Tagged File");

        fileOpen.setTitle("Get Tagged File");
        fileOpen.setFilenameFilter(new Cfilter(".tags"));
        fileOpen.show();
        TaggedValuesFile = fileOpen.getDirectory() + fileOpen.getFile();
        if (debug) System.out.println("In File Open, TaggedValuesFile:" + TaggedValuesFile);
        loadFiles(TaggedValuesFile);

    }//GEN-LAST:event_File_OpenActionPerformed

    private void loadFiles(String NameFile){
        String temp = "";
        for (int i = 0; i < NameFile.length(); i++)
        {
            if(NameFile.charAt(i) == '.')
            {
                for(int x = 0; x  < i; x++)
                {
                    temp += NameFile.charAt(x);
                }
            }
        }
        NameFile = temp;
        TaggedValuesFile = NameFile + ".tags";
        String OrgTxtFile = NameFile + ".HTML";
        FileInputStream fis = null;
        if (debug) System.out.println("In loadFiles, TaggedValuesFile:" + TaggedValuesFile);

        try{
            if (debug) System.out.println("The file in .rq : " + OrgTxtFile);
            fis = new FileInputStream(OrgTxtFile);
        }catch(IOException io_e)
        {
            System.out.print(OrgTxtFile + " does not exist.");
        }
        BufferedReader FileRead = new BufferedReader(new InputStreamReader(fis));
        try
        {
            File f = new File(OrgTxtFile);
            URL url = new URL("file:" + OrgTxtFile);
            OrgFileTxtBox.setPage("file:" + OrgTxtFile);
            //OrgFileTxtBox.read(FileRead, f);
        }
        catch(IOException ioe)
        {
            ioe.printStackTrace();
        }

        try
        {
            TaggedTreeModel.setTreeModel(FillTree(TaggedValuesFile, TaggedValuesTree));
        } catch (IOException ioe)
          {
            ioe.printStackTrace();
          }

        String RQ_Slots_File = NameFile + ".tab";
        if (debug) System.out.println("In loadFiles, RQ_Slots_File: " + RQ_Slots_File);
        try
        {
            File f = new File(RQ_Slots_File);
            if (f.exists())
            {
                RQ_Slots_TreeModel.setTreeModel(FillTree(RQ_Slots_File, RQ_Slots_Tree));
            }
        } catch (IOException ioe)
          {
            ioe.printStackTrace();
          }
    }


    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        AssistRQ Temp = new AssistRQ();
        if(args[0] != "")
            Temp.WorkingDir = args[0];
        Temp.setSize(780, 740);
        Temp.show();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JDialog ExportToDiag;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton MoveToBTN;
    private javax.swing.JButton ExportDiag_OkBtn;
    private javax.swing.JMenuItem File_Save;
    private javax.swing.JDialog jDiagConfigHost;
    private javax.swing.JMenuItem Edit_ConfigHost;
    private javax.swing.JButton NewNodeBTN;
    private javax.swing.JMenuItem File_Export;
    private javax.swing.JDialog jDiag_RulesWordlist;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JRadioButton Sodi2RadioBtn;
    private javax.swing.JRadioButton Sodi1RadioBtn;
    private javax.swing.JButton MoveAllBTN;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenuItem Edit_RulesWordLists;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JDialog jDiagStatus;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton CancelBTN_NewNode;
    private javax.swing.JButton OKBTN_NewNode;
    private javax.swing.JTextPane OrgFileTxtBox;
    private javax.swing.JButton RemoveNodeBTN;
    private javax.swing.JButton LRW_CancelBTN;
    public javax.swing.JLabel jLStatus;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JDialog jdNewNodeDiag;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton LRW_OKBTN;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem File_Open;
    private javax.swing.JMenu MenuEdit;
    private javax.swing.JTree RQ_Slots_Tree;
    private javax.swing.JMenuItem File_ProcessTxt;
    private javax.swing.JCheckBoxMenuItem CBMenuIWDCI;
    private javax.swing.JMenu MenuFile;
    private javax.swing.JCheckBoxMenuItem CBMenuCND;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JButton ConfigHost_CancelBTN;
    private javax.swing.JMenu MenuMission;
    private javax.swing.JTree TaggedValuesTree;
    private javax.swing.JButton ConfigHost_OKBTN;
    private javax.swing.JList jList_RulesWords;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JButton ExportDiag_CancelBtn;
    private javax.swing.JMenuItem File_Exit;
    // End of variables declaration//GEN-END:variables

    /*Find a specified node from a string and the tree.  It then passes back the
     * node.
     */
    public Object findNode(String field, DefaultMutableTreeNode node)
    {
        Enumeration e = node.depthFirstEnumeration();
        Object currNode;
        while(e.hasMoreElements())
        {
            currNode = e.nextElement();
            if (debug) System.out.println("before if equal in findNode: " + currNode.toString());
            if(currNode.toString().equals(field))
            {
                if (debug) System.out.println("after if equal in findNode: " + currNode.toString());
                return currNode;
            }
        }
        return null;
    }
    /* Set the tree based on the Mission selection. */
    private void SetMission(String inString)
    {
        String RQ_Slots_File = WorkingDir + MissionDir + inString + ".rq";
        RootNode = inString;

        try
        {
            RQ_Slots_TreeModel.setTreeModel(FillTree(RQ_Slots_File, RQ_Slots_Tree));
        } catch (IOException ioe)
          {
            ioe.printStackTrace();
          }
    }

    /* Changes which mission is selected */
    private void CheckMission(String sMission)
    {
        if (sMission == "CND")
            CBMenuCND.setSelected(true);
        else
            CBMenuCND.setSelected(false);
        if (sMission == "IW-DCI")
            CBMenuIWDCI.setSelected(true);
        else
            CBMenuIWDCI.setSelected(false);
    }
////////////////////////////////////////////////////////////////////////////////
////////////   Start of the functionality to import a tree from a file /////////
////////////////////////////////////////////////////////////////////////////////
    /** Utility method to parse a file.  File where each new
        level is indicated by a char(-,+,>) by that word.  One word per line. */
    private DefaultMutableTreeNode parseTableOfContents(FileInputStream fis)
        throws IOException
    {
        DefaultMutableTreeNode outNode = new DefaultMutableTreeNode(RootNode);
        ArrayList sAl_Temp = new ArrayList();
        BufferedReader br = new BufferedReader(
                            new InputStreamReader(fis));
        String sLine = null;
        DefaultMutableTreeNode parent = null, childparent = null;
        DefaultMutableTreeNode other = new DefaultMutableTreeNode("Other");
        int check = 0;

        while ( (sLine = br.readLine()) != null)
        {
            if (debug) System.out.println("Line: " + sLine);

            sLine = sLine.replace('_', ' ');
            if (debug) System.out.println("Line(_): " + sLine);

            if(sLine.charAt(0) == '+')
            {
                sLine = sLine.replace('+', ' ');
                if (debug) System.out.println("Line(+): " + sLine);
                DefaultMutableTreeNode aNode = new DefaultMutableTreeNode(sLine.trim());
                parent = aNode;
                outNode.add(aNode);
            }

            if(sLine.charAt(0) == '-')
            {
                if(check == 0){
                    outNode.add(other);
                    check = 999;
                }
                sLine = sLine.replace('-', ' ');
                if (debug) System.out.println("Line(-): " + sLine);
                DefaultMutableTreeNode aNode = new DefaultMutableTreeNode(sLine.trim());
                other.add(aNode);
            }

            if(sLine.charAt(0) == '>')
            {
                sLine = sLine.replace('>', ' ');
                if (debug) System.out.println("Line(>): " + sLine);
                DefaultMutableTreeNode aNode = new DefaultMutableTreeNode(sLine.trim());
                childparent = aNode;
                parent.add(aNode);
            }

            if(sLine.charAt(0) == '^')
            {
                sLine = sLine.replace('^', ' ');
                if (debug) System.out.println("Line(^): " + sLine);
                DefaultMutableTreeNode aNode = new DefaultMutableTreeNode(sLine.trim());
                childparent.add(aNode);
            }
        }
        if (debug) System.out.println(outNode.toString());
        return outNode;
    }
////////////////////////////////////////////////////////////////////////////////
////////////  End of File import  //////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

    /** takes in the file to which to create the tree from and the tree to store it
      * in.
      */
    public DefaultTreeModel FillTree(String sTocFile, JTree inTree)
                        throws IOException
    {
        /** Graphical Tree Outline. */
        JTree jt;
        DefaultTreeModel DynamicTreeModel;

        // check if file exists
        if (debug) System.out.println("In FillTree:" + sTocFile);
        File f = new File(sTocFile);
//        if (f.exists())
        {
        if (debug) System.out.println("In FillTree before new File:" + sTocFile);
            FileInputStream fis = new FileInputStream(sTocFile);
        if (debug) System.out.println("In FillTree after new File:" + sTocFile);

            /** Fills the tree from a file */
            dynamicTree = parseTableOfContents(fis);

            fis.close();
        }
//        else
//            throw new IOException(sTocFile + " does not exist.");

        if (dynamicTree != null)
        {
            // create a JTree
            DynamicTreeModel = new DefaultTreeModel(dynamicTree);
            DynamicTreeModel.addTreeModelListener(new TMListener());
            jt = new JTree(DynamicTreeModel);
            jt.setEditable(true);
            inTree.setModel(jt.getModel());
            return DynamicTreeModel;
        }
        else
            throw new IOException(sTocFile + " is empty.");
    }

    class MyDropTargetLister extends DropTarget
    {
        MyDropTargetLister(){}
        public void dragOver(DropTargetDragEvent dtde)
        {
            Point p = dtde.getLocation();
            int row = RQ_Slots_Tree.getRowForLocation(p.x, p.y);
            RQ_Slots_Tree.setSelectionRow(row);
            if (debug) System.out.println("In DropTarget target local is:" + row);
        }

        public void drop(DropTargetDropEvent dtde)
        {
            Transferable trans = dtde.getTransferable();
            DefaultMutableTreeNode node = null;
            DataFlavor STRING_FLAVOR = new DataFlavor(String.class, "String Type");
            try
            {
                node = new DefaultMutableTreeNode(trans.getTransferData(STRING_FLAVOR));
                if (debug) System.out.println("In Drop target the value of node." + node.toString()/* + " " + dataflav.toString()*/);
            }catch(Exception e)
            {
                e.printStackTrace();
            }

            if (debug) System.out.println("In Drop target before setting the value." + dtde.getSource().toString());
            if(RQ_Slots_Tree.getSelectionPath().getPathCount() == 3)
                RQ_Slots_TreeModel.addObject((Object)node, RQ_Slots_Tree.getSelectionPath());
            if (debug) System.out.println("In Drop target value is:" + node.toString());
        }
    }

    class TMListener implements TreeModelListener {
        public void treeNodesChanged(TreeModelEvent e) {
            DefaultMutableTreeNode node;
            node = (DefaultMutableTreeNode)
                     (e.getTreePath().getLastPathComponent());

            /*
             * If the event lists children, then the changed
             * node is the child of the node we've already
             * gotten.  Otherwise, the changed node and the
             * specified node are the same.
             */
            try {
                int index = e.getChildIndices()[0];
                node = (DefaultMutableTreeNode)
                       (node.getChildAt(index));
            } catch (NullPointerException exc) {}

            System.out.println("The user has finished editing the node.");
            System.out.println("New value: " + node.getUserObject());
        }
        public void treeNodesInserted(TreeModelEvent e) {
        }
        public void treeNodesRemoved(TreeModelEvent e) {
        }
        public void treeStructureChanged(TreeModelEvent e) {
        }
    }

    class Cfilter implements FilenameFilter {
        public String ext;

        public Cfilter() {
            ext = "";
        }

        public Cfilter(String in) {
            ext = in;
        }

        public boolean accept(File dir, String name) {
            return(name.endsWith(ext));
        }
    }

    class pThread extends Thread
    {
        String TxtFile;
        public pThread(){}
        public pThread(String in)
        {
            TxtFile = in;
        }

        public void run() //throws gate.util.GateException, java.io.IOException
        {
            FileInputStream fis = null;
            BufferedReader br = null;
            String sLine = "";
            jLStatus.setText("GATE initialised . . . . Processing");
            Saa.WorkingDir = WorkingDir;
            Saa.CurrentRules = RulesWordlistDir;
            jProgressBar1.setIndeterminate(true);

            // initialise ANNIE (this may take several minutes)
            try
            {
                Saa.initAnnie();
            }catch(Exception ioe)
            {
                ioe.printStackTrace();
            }

            // create a GATE corpus and add a document for each command-line
            // argument
            gate.Corpus corpus = null;
            java.net.URL u = null;
            try
            {
                corpus = (gate.Corpus) Factory.createResource("gate.corpora.CorpusImpl");
                u = new java.net.URL(TxtFile);
            }catch(Exception ioe)
            {
                System.out.println(ioe.toString());
            }
            for(int i = 0; i < 1; i++) {

              gate.FeatureMap params = Factory.newFeatureMap();
              params.put("sourceUrl", u);
              params.put("preserveOriginalContent", new Boolean(true));
              params.put("collectRepositioningInfo", new Boolean(true));
              jLStatus.setText("Creating doc for current file");
              gate.Document doc = null;
            try
            {
              doc = (gate.Document)
                Factory.createResource("gate.corpora.DocumentImpl", params);
            }catch(Exception ioe)
            {
                System.out.println(ioe.toString());
            }
              corpus.add(doc);
            } // for each of args

            // tell the pipeline about the corpus and run it
            Saa.setCorpus(corpus);
            try
            {
                Saa.execute();
            }catch(Exception ioe)
            {
                System.out.println(ioe.toString());
            }

            // for each document, get an XML document with the
            // person and location names added
            java.util.Iterator iter = corpus.iterator();
            int count = 0;
            String startTagPart_1 = "<span GateID=\"";
            String startTagPart_2 = "\" title=\"";
            String startTagPart_3 = "\" style=\"background:";
            String color[] = {"Red", "Green", "Blue", "lightBlue", "lightGreen", "Pink", "Magenta"};
            String startTagPart_4 = ";\">";
            String endTag = "</span>";
            int color_count = 0;

            while(iter.hasNext()) {
              gate.Document doc = (gate.Document) iter.next();
              gate.AnnotationSet defaultAnnotSet = doc.getAnnotations();
              java.util.Set annotTypesRequired = new java.util.HashSet();

            // check if file exists
            File f = new File(WorkingDir + "/AssistRQ/Japes/Annots.ini");
            if (f.exists())
            {
                try{
                if (debug) System.out.println("The file in .rq : ");
                    fis = new FileInputStream(WorkingDir + "/AssistRQ/Japes/Annots.ini");
                }catch(IOException io_e)
                {
                    System.out.print(" does not exist.");
                }
            }else
                return;

            br = new BufferedReader(new InputStreamReader(fis));
                if (debug) System.out.println("after br in export");
            //Extract the values in the slots and output to a file
            while(sLine != null)
            {
                try
                {
                   sLine = br.readLine();
                   if (debug) System.out.println("after readline in export");
                }catch(IOException io_e)
                {
                    System.out.print(" does not exist.");
                }
                if(sLine == null)break;
                sLine = sLine.trim();
                if (debug) System.out.println("after node in export: " + sLine);
                annotTypesRequired.add(sLine);

            }//end of while

              gate.AnnotationSet peopleAndPlaces = defaultAnnotSet.get(annotTypesRequired);

              gate.FeatureMap features = doc.getFeatures();
              String originalContent = (String)
                features.get(gate.GateConstants.ORIGINAL_DOCUMENT_CONTENT_FEATURE_NAME);
              gate.corpora.RepositioningInfo info = (gate.corpora.RepositioningInfo)
                features.get(gate.GateConstants.DOCUMENT_REPOSITIONING_INFO_FEATURE_NAME);

              ++count;
              String temp = "";
    //////////////////////////////////////////////////////////////////////////
            for (int i = 0; i < u.getPath().length(); i++)
            {
                if(u.getPath().charAt(i) == '.')
                {
                    for(int x = 0; x  < i; x++)
                    {
                        temp += u.getPath().charAt(x);
                    }
                }
            }
    //////////////////////////////////////////////////////////////////////////
              File file = new File(temp + ".HTML");
              if (debug) System.out.println("File name: '"+file.getAbsolutePath()+"'");
              if(originalContent != null && info != null) {
                jLStatus.setText("OrigContent and reposInfo existing. Generate file...");

                java.util.Iterator it = peopleAndPlaces.iterator();
                Annotation currAnnot;
                StandAloneAnnie.SortedAnnotationList sortedAnnotations = new StandAloneAnnie.SortedAnnotationList();

                while(it.hasNext()) {
                  currAnnot = (Annotation) it.next();
                  sortedAnnotations.addSortedExclusive(currAnnot);
                } // while

                StringBuffer editableContent = new StringBuffer(originalContent);
                long insertPositionEnd;
                long insertPositionStart;
                // insert anotation tags backward
                if (debug) System.out.println("Unsorted annotations count: "+peopleAndPlaces.size());
                if (debug) System.out.println("Sorted annotations count: "+sortedAnnotations.size());
                for(int i=sortedAnnotations.size()-1; i>=0; --i) {
                  currAnnot = (Annotation) sortedAnnotations.get(i);
                  insertPositionStart =
                    currAnnot.getStartNode().getOffset().longValue();
                  insertPositionStart = info.getOriginalPos(insertPositionStart);
                  insertPositionEnd = currAnnot.getEndNode().getOffset().longValue();
                  insertPositionEnd = info.getOriginalPos(insertPositionEnd, true);
                  if(insertPositionEnd != -1 && insertPositionStart != -1) {
                    editableContent.insert((int)insertPositionEnd, endTag);
                    if(color_count > 5)color_count = 0;
                    else color_count++;
                    String Temp = (startTagPart_3 + color[color_count] + startTagPart_4);
                    if (debug) System.out.println("Tag for color: " + Temp);
                    editableContent.insert((int)insertPositionStart, Temp);
                    editableContent.insert((int)insertPositionStart,
                                                                  currAnnot.getType());
                    editableContent.insert((int)insertPositionStart, startTagPart_2);
                    editableContent.insert((int)insertPositionStart,
                                                          currAnnot.getId().toString());
                    editableContent.insert((int)insertPositionStart, startTagPart_1);
                  } // if
                } // for

                jLStatus.setText("Writing file to disk: "+file.toString());
                try
                {
                    FileWriter writer = new java.io.FileWriter(temp + ".HTML");
                    writer.write(editableContent.toString());
                    writer.close();
                }catch(Exception ioe)
                {
                    System.out.println(ioe.toString());
                }
              } // if - should generate
              else {
                jLStatus.setText("Writing unHighlighted file to disk: "+file.toString());
                try
                {
                    FileWriter writer = new java.io.FileWriter(temp + ".HTML");
                    writer.write(originalContent);
                    writer.close();
                }catch(Exception ioe)
                {
                    System.out.println(ioe.toString());
                }
                if (debug) System.out.println("Content : "+originalContent);
                if (debug) System.out.println("Repositioning: "+info);
              }
            } // for each doc
            jLStatus.setText("Done!");
            jDiagStatus.hide();
        }
    }
}

