/*
 *  TemplateManager.java                1-16-03
 *
 * Andy Trimble
 * (719) 570-8078
 * Andy.Trimble@trw.com
 *
 * Copyright (c) 2002 - 2003 Northrop Grumman Mission Systems
 *
 * Northrop Grumman Private/Proprietary
 */

package com.ngms.ontology;

import java.util.Vector;
import java.lang.String;
import java.sql.*;

/**
 * This an object for the management of reporters
 * questions templates.
 *
 * @author Andrew Trimble
 */
public class TemplateManager {
        /** A vector of Templates */
        private Vector templ;
        
        /** A vector desribing the fields in a Template */
        private Vector labels;
        
        /** The database from which to load the evidence */
        private String database;

        /** The number of fields in the evidence template */
        public int length;
        
        /** The number of template instances held by the manager */
        public int instances;

	public String port, host, uname, password;

        /** A constructor */
        public TemplateManager() {
                instances = 0;
                templ = new Vector();
                labels = new Vector();
        }
        
        /** Returns the field value at the given instance and index
         *
         * @param instance the template object from which to extract the value
         * @param index the field index from which to extract the value
         *
         * @return the field value
         */
        public String elementAt(int instance, int index) {
                return (String)(((Vector)(templ.elementAt(instance))).elementAt(index));
        }

        /** Sets the field value at the given instance and index
         *
         * @param instance the template object at which to set the value
         * @param index the field index at which to set the value
         * @param value the new field value
         */
        public void setElementAt(int instance, int index, String value) {
                ((Vector)(templ.elementAt(instance))).setElementAt(value, index);
        }

        /** Returns the field name at a given index
         *
         * @param index the index of the field
         *
         * @return the field label
         */
        public String fieldAt(int index) {
                return (String)(labels.elementAt(index));
        }
	
	public String getValueByName(String field, int instance) {
	        for(int i = 0; i < length; i++) {
		        if(((String)(labels.elementAt(i))).equalsIgnoreCase(field))
			        return ((String)((Vector)(templ.elementAt(instance))).elementAt(i));
	        }
		return "";
	}

        /** Returns the number of template objects held by this manager 
         *
         * @return the number of evidence templates
         */
        public int getInstanceNum() {
                return instances;
        }

        /** Returns the index of a given instance.  All templates
         *  have a template id as the first field.  This method will
         *  return the local index of the template with the given
         *  template id.  It will return -1 if the template id cannot
         *  be found.
         *
         * @param id the template id
         *
         * @return the index of the template, -1 if it is not found
         */
        public int getInstanceIndex(int id) {
                for(int i = 0; i < instances; i++) {
                        if((new Integer(elementAt(i, 0))).intValue() == id) {
                                return i;
                        }
                }
                return -1;
        }
        
        /** Save all the hypotheses to the database
         *
         * @throws Exception probably generated by the database
         */
        public void saveAll() throws Exception {
                Connection conn;
                Statement stmnt;

                try { // get an instance of a driver
                        Class.forName("com.mysql.jdbc.Driver").newInstance();
                } catch(Exception ex) {
                        System.out.println("Error getting driver instance\n");
                        throw ex;
                }

                try { // create a connection
        	        conn = DriverManager.getConnection(
	        	        "jdbc:mysql://" + host + ":" + port + "/" + database + "?user=" + uname + "&password=" + password);
                } catch(Exception ex) {
                        System.out.println("Error getting connection\n");
                        throw ex;
                }

                // Update the Hypotheses
                for(int i = 0; i < instances; i++) {
                        try { // create a statement
                                stmnt = conn.createStatement();
                        } catch(Exception ex) {
                                System.out.println("Error creating statement\n");
                                throw ex;
                        }

                        try { // execute a statement to update the hypotheses
                                stmnt.executeUpdate("UPDATE Evidence SET " + labels.elementAt(1) + 
                                                                  " = \"" + ((Vector)(templ.elementAt(i))).elementAt(1) +
                                                                  "\" WHERE " + labels.elementAt(0) + " = " +
                                                                  ((Vector)(templ.elementAt(i))).elementAt(0));
                        } catch(Exception ex) {
                                System.out.println("Error executing update\n");
                                throw ex;
                        }
                }
        }

        /** Load evidence from the database
         *
         * @param dbName the database from which to load the evidence
         * @throws Exception probably generated by the database
         */
        public void parse(String port, String host, String uname, String password, String dbName) throws Exception {
                boolean verbose = false;
                int i;
                String temp;
                String name;
                
        	Connection conn;
                Statement stmnt;
                ResultSet rs;

		this.port = port;
		this.host = host;
		this.uname = uname;
		this.password = password;

                database = dbName;

                try { // get an instance of a driver
                        Class.forName("com.mysql.jdbc.Driver").newInstance();
                } catch(Exception ex) {
                        System.out.println("Error getting driver instance\n");
                        throw ex;
                }

                try { // create a connection
        	        conn = DriverManager.getConnection(
	        	        "jdbc:mysql://" + host + ":" + port + "/" + dbName + "?user=" + uname + "&password=" + password);
                } catch(Exception ex) {
                        System.out.println("Error getting connection\n");
                        throw ex;
                }

                // Get the Labels

                try { // create a statement
                        stmnt = conn.createStatement();
                } catch(Exception ex) {
                        System.out.println("Error creating statement\n");
                        throw ex;
                }

                try { // execute a statement to get the labels
                        rs = stmnt.executeQuery("SELECT * FROM Labels;");
                } catch(Exception ex) {
                        System.out.println("Error executing statement\n");
                        throw ex;
                }

                try { // parse the results
                        rs.next();
                        name = rs.getString(1);
                        i = 2;

                        try { // get all the column values
                                while(name != null) {
					if(name.charAt(0) == '?') {

                                        } else if(name.charAt(0) != '+') {
                                                temp = name.substring(1);
                                                labels.add(temp);
                                        }
                                        name = rs.getString(i);
                                        i++;
                                }
                        } catch(SQLException sqlex) {}
                        labels.trimToSize();
                        length = labels.size();

                        if(verbose) { // print the values
                                for(int j = 0; j < labels.size(); j++) {
                                        System.out.println(j + " : " + labels.elementAt(j));
                                }
                        }
                } catch (Exception ex) {
                        System.out.println("Error parsing labels\n");
                        throw ex;
                }
                
                // Get the Evidence

                instances = 0;

                try { // create a statement
                        stmnt = conn.createStatement();
                } catch(Exception ex) {
                        System.out.println("Error creating statement\n");
                        throw ex;
                }

                try { // execute a statement to get the labels
                        rs = stmnt.executeQuery("SELECT * FROM Evidence;");
                } catch(Exception ex) {
                        System.out.println("Error executing statement\n");
                        throw ex;
                }
                
                try { // parse the values
                        while(rs.next()) {
                                templ.add(new Vector());
                                instances++;
                                for(int j = 0; j < length-1; j++) {
                                        //name = rs.getString((String)(labels.elementAt(j)));
					name = rs.getString(j+1);
                                        ((Vector)(templ.elementAt(instances-1))).add(name);
                                }
                                ((Vector)(templ.elementAt(instances-1))).trimToSize();
                        }
                        templ.trimToSize();
                        if(verbose) {
                                for(int k = 0; k < instances; k++) {
                                        System.out.println("Instance " + k + "\n");
                                        for(int l = 0; l < length; l++) {
                                                System.out.println(labels.elementAt(l) + " : " +
                                                        ((Vector)(templ.elementAt(k))).elementAt(l));
                                        }
                                }
                        }
                } catch(Exception ex) {
                        System.out.println("Error parsing evidence\n");
                        throw ex;
                }
        }

        /** A method for printing the field names */
        public void printFieldNames() {
                System.out.println("\nPrinting Field Names...\n");
                for(int i = 0; i < length-1; i++)
                        System.out.println(labels.elementAt(i));
        }

        /** A method for printing the field values
         *
         * @param inst the index of the template object to print
         */
        public void printFieldValues(int inst) {
                System.out.println("\nPrinting Field Values...\n");
                for(int i = 0; i < length-1; i++) {
                        System.out.println(fieldAt(i) + " : " + elementAt(inst, i));
                }
        }
}

